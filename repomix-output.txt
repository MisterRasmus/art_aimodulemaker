This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-01-25T13:10:48.421Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.github/workflows/deploy.yml
.github/workflows/quality.yml
.github/workflows/release.yml
.github/workflows/tests.yml
.gitignore
classes/AiHandler/AiHandlerInterface.php
classes/AiHandler/ClaudeHandler.php
classes/AiHandler/OpenAiHandler.php
classes/Database/ApiKeyRepository.php
classes/Database/ModuleRepository.php
classes/Database/VersionRepository.php
classes/GitHandler/GitHandlerInterface.php
classes/GitHandler/GitHubHandler.php
classes/ModuleBuilder/FileGenerator.php
classes/ModuleBuilder/ModuleGenerator.php
classes/ModuleBuilder/ValidationHandler.php
composer.json
config.xml
config/config.yml
config/routes.yml
config/services.yml
controllers/admin/AdminRlAiModuleListController.php
controllers/admin/AdminRlAiModuleMakerController.php
controllers/admin/AdminRlAiSettingsController.php
controllers/front/api.php
index.php
license.txt
phpunit.xml.dist
README.md
rl_aimodulemaker.php
sql/install.php
sql/uninstall.php
tests/Unit/ModuleGeneratorTest.php
tests/Unit/ModuleValidationTest.php
tools/code_validator.php
tools/template_generator.php
translations/en.php
translations/sv.php
upgrade/index.php
upgrade/upgrade-1.1.0.php
views/css/admin.css
views/css/components.css
views/js/admin.js
views/js/aiChat.js
views/js/fileExplorer.js
views/js/moduleBuilder.js
views/templates/admin/configure.tpl
views/templates/admin/module_builder.tpl
views/templates/admin/module_list.tpl
views/templates/admin/settings.tpl
views/templates/components/ai_chat.tpl
views/templates/components/file_explorer.tpl

================================================================
Files
================================================================

================
File: .github/workflows/deploy.yml
================
name: Deploy

on:
  workflow_run:
    workflows: ["Release"]
    types:
      - completed

jobs:
  deploy-staging:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - uses: actions/checkout@v2

      - name: Download release artifact
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: release.yml
          workflow_conclusion: success

      - name: Deploy to staging
        uses: SamKirkland/FTP-Deploy-Action@4.0.0
        with:
          server: ${{ secrets.FTP_SERVER_STAGING }}
          username: ${{ secrets.FTP_USERNAME_STAGING }}
          password: ${{ secrets.FTP_PASSWORD_STAGING }}
          server-dir: modules/rl_aimodulemaker/
          exclude: |
            **/.git*
            **/.git*/**
            **/tests/**
            **/docs/**

  deploy-production:
    needs: deploy-staging
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v2

      - name: Download release artifact
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: release.yml
          workflow_conclusion: success

      - name: Deploy to production
        uses: SamKirkland/FTP-Deploy-Action@4.0.0
        with:
          server: ${{ secrets.FTP_SERVER_PRODUCTION }}
          username: ${{ secrets.FTP_USERNAME_PRODUCTION }}
          password: ${{ secrets.FTP_PASSWORD_PRODUCTION }}
          server-dir: modules/rl_aimodulemaker/
          exclude: |
            **/.git*
            **/.git*/**
            **/tests/**
            **/docs/**

  notify:
    needs: [deploy-staging, deploy-production]
    runs-on: ubuntu-latest
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

================
File: .github/workflows/quality.yml
================
name: Code Quality

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  quality:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '7.4'
          tools: phpcs, phpstan, php-cs-fixer

      - name: Check PHP Version
        run: php -v

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress

      - name: Run PHPCS
        run: phpcs --standard=PSR2 classes/ controllers/

      - name: Run PHPStan
        run: phpstan analyse -l 5 classes/ controllers/

      - name: Run PHP CS Fixer
        run: php-cs-fixer fix --dry-run --diff

      - name: Check file permissions
        run: |
          find . -type f -name "*.php" -exec chmod 644 {} \;
          find . -type d -exec chmod 755 {} \;

      - name: Check for merge conflicts
        run: |
          if grep -r "^<<<<<<< HEAD" .; then
            echo "Merge conflicts found"
            exit 1
          fi

      - name: Security check dependencies
        run: composer audit

      - name: Validate Smarty templates
        run: |
          for file in $(find ./views/templates -name "*.tpl"); do
            php -l "$file"
          done

      - name: Check JavaScript files
        if: hashFiles('package.json')
        run: |
          npm install
          npm run lint

================
File: .github/workflows/release.yml
================
name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '7.4'
          extensions: mbstring, xml, ctype, iconv, intl
          coverage: none

      - name: Install dependencies
        run: composer install --no-dev --optimize-autoloader

      - name: Create release zip
        run: |
          MODULE_VERSION=${GITHUB_REF#refs/tags/v}
          MODULE_NAME="rl_aimodulemaker"
          # Remove development files
          rm -rf .git .github tests phpunit.xml.dist
          # Create zip
          zip -r "${MODULE_NAME}-${MODULE_VERSION}.zip" . -x ".*" -x "__MACOSX"

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./rl_aimodulemaker-${{ github.ref_name }}.zip
          asset_name: rl_aimodulemaker-${{ github.ref_name }}.zip
          asset_content_type: application/zip

      - name: Deploy to PrestaShop Addons (Production)
        if: "!contains(github.ref, '-beta')"
        env:
          PRESTASHOP_API_KEY: ${{ secrets.PRESTASHOP_API_KEY }}
        run: |
          curl -X POST "https://addons.prestashop.com/api/products/upload" \
          -H "Authorization: Bearer ${PRESTASHOP_API_KEY}" \
          -F "file=@rl_aimodulemaker-${{ github.ref_name }}.zip" \
          -F "version=${{ github.ref_name }}" \
          -F "changelog=See CHANGELOG.md"

================
File: .github/workflows/tests.yml
================
name: Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php-versions: ['7.2', '7.3', '7.4', '8.0']

    steps:
    - uses: actions/checkout@v2

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-versions }}
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, mysql
        coverage: xdebug

    - name: Validate composer.json and composer.lock
      run: composer validate --strict

    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v2
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-

    - name: Install dependencies
      run: composer install --prefer-dist --no-progress

    - name: Run test suite
      run: composer run-script test

    - name: Run PHPStan
      run: composer run-script phpstan

    - name: Check coding standards
      run: composer run-script lint

================
File: .gitignore
================
# Composer
/vendor/
composer.lock

# Node modules
/node_modules/
package-lock.json

# Cache and logs
/cache/*
/logs/*
*.log
*.cache

# IDE specific files
.idea/
.vscode/
*.sublime-project
*.sublime-workspace
*.swp
*.swo
.DS_Store

# Build files
/build/
/dist/

# Testing
/coverage/
.phpunit.result.cache

# Environment files
.env
.env.local
.env.*.local

# PrestaShop specific
config_*.xml
*.zip
/modules/

# Project specific
/exports/
/uploads/
/cache/
/temp/

# API Keys and sensitive data
*.pem
*.key
credentials.json

================
File: classes/AiHandler/AiHandlerInterface.php
================
<?php
/**
 * Interface for AI handlers
 * @author Ljustema Sverige AB
 */

interface AiHandlerInterface
{
    /**
     * Generate code based on prompt and context
     *
     * @param string $prompt The user's prompt/request
     * @param array $context Additional context about the module
     * @return string Generated code
     * @throws Exception If code generation fails
     */
    public function generateCode(string $prompt, array $context = []): string;

    /**
     * Get a response from the AI chat
     *
     * @param string $message User's message
     * @param array $conversation Previous conversation history
     * @return string AI response
     * @throws Exception If chat fails
     */
    public function chat(string $message, array $conversation = []): string;

    /**
     * Analyze existing code and provide suggestions
     *
     * @param string $code Code to analyze
     * @param array $context Additional context about the code
     * @return array Analysis results and suggestions
     * @throws Exception If analysis fails
     */
    public function analyzeCode(string $code, array $context = []): array;

    /**
     * Test the API connection
     *
     * @return bool True if connection is successful
     * @throws Exception If connection test fails
     */
    public function testConnection(): bool;

    /**
     * Get available models for this AI service
     *
     * @return array List of available models
     */
    public function getAvailableModels(): array;

    /**
     * Get the current API usage/limits
     *
     * @return array Usage statistics and limits
     */
    public function getApiUsage(): array;
}

================
File: classes/AiHandler/ClaudeHandler.php
================
<?php
/**
 * Anthropic Claude integration handler
 * @author Ljustema Sverige AB
 */

class ClaudeHandler implements AiHandlerInterface
{
    /** @var string */
    private $apiKey;

    /** @var string */
    private $model;

    /** @var array */
    private $defaultHeaders;

    public function __construct()
    {
        $this->apiKey = Configuration::get('RLAIMODULEMAKER_CLAUDE_API_KEY');
        $this->model = Configuration::get('RLAIMODULEMAKER_CLAUDE_MODEL', 'claude-3-opus-20240229');
        
        $this->defaultHeaders = [
            'x-api-key: ' . $this->apiKey,
            'anthropic-version: 2023-06-01',
            'Content-Type: application/json',
        ];
    }

    public function generateCode(string $prompt, array $context = []): string
    {
        $systemPrompt = $this->buildSystemPrompt($context);
        
        $response = $this->makeApiRequest('https://api.anthropic.com/v1/messages', [
            'model' => $this->model,
            'max_tokens' => 2000,
            'messages' => [
                [
                    'role' => 'user',
                    'content' => $prompt
                ]
            ],
            'system' => $systemPrompt
        ]);

        if (!isset($response['content'][0]['text'])) {
            throw new Exception('Invalid response from Claude');
        }

        return $response['content'][0]['text'];
    }

    public function chat(string $message, array $conversation = []): string
    {
        $messages = [];

        // Convert conversation history to Claude format
        foreach ($conversation as $entry) {
            $messages[] = [
                'role' => isset($entry['isUser']) && $entry['isUser'] ? 'user' : 'assistant',
                'content' => $entry['message']
            ];
        }

        // Add new message
        $messages[] = ['role' => 'user', 'content' => $message];

        $response = $this->makeApiRequest('https://api.anthropic.com/v1/messages', [
            'model' => $this->model,
            'max_tokens' => 1000,
            'messages' => $messages,
            'system' => 'You are an expert PrestaShop developer assistant. Help the user with module development, following best practices and security guidelines.'
        ]);

        if (!isset($response['content'][0]['text'])) {
            throw new Exception('Invalid response from Claude');
        }

        return $response['content'][0]['text'];
    }

    public function analyzeCode(string $code, array $context = []): array
    {
        $prompt = "Analyze the following PrestaShop module code and provide feedback on:
1. Code quality and best practices
2. Security concerns
3. Performance optimization opportunities
4. Compatibility issues
5. Suggested improvements

Code to analyze:
```php
{$code}
```

Please provide your analysis in JSON format with the following structure:
{
    \"quality\": {\"issues\": [], \"suggestions\": []},
    \"security\": {\"vulnerabilities\": [], \"recommendations\": []},
    \"performance\": {\"issues\": [], \"optimizations\": []},
    \"compatibility\": {\"issues\": [], \"suggestions\": []},
    \"improvements\": []
}";

        $response = $this->generateCode($prompt, [
            'task' => 'code_analysis',
            'format' => 'json'
        ]);

        $analysis = json_decode($response, true);
        
        if (!$analysis) {
            throw new Exception('Failed to parse analysis response');
        }

        return $analysis;
    }

    public function testConnection(): bool
    {
        try {
            $response = $this->makeApiRequest('https://api.anthropic.com/v1/messages', [
                'model' => $this->model,
                'max_tokens' => 10,
                'messages' => [['role' => 'user', 'content' => 'test']]
            ]);
            
            return isset($response['content']) && is_array($response['content']);
        } catch (Exception $e) {
            throw new Exception('Claude connection test failed: ' . $e->getMessage());
        }
    }

    public function getAvailableModels(): array
    {
        return [
            'claude-3-opus-20240229' => 'Claude-3 Opus (Most Capable)',
            'claude-3-sonnet-20240229' => 'Claude-3 Sonnet (Balanced)',
        ];
    }

    public function getApiUsage(): array
    {
        // Claude API doesn't currently provide usage statistics
        // Return empty structure for compatibility
        return [
            'total_tokens' => 0,
            'total_requests' => 0,
            'remaining_credits' => 0,
        ];
    }

    private function buildSystemPrompt(array $context): string
    {
        $basePrompt = "You are an expert PrestaShop developer assistant. You specialize in creating secure, efficient, and maintainable code for PrestaShop modules.";

        if (isset($context['task'])) {
            $basePrompt .= "\nCurrent task: {$context['task']}";
        }

        if (isset($context['format'])) {
            $basePrompt .= "\nRequired output format: {$context['format']}";
        }

        if (isset($context['constraints'])) {
            $basePrompt .= "\nConstraints: {$context['constraints']}";
        }

        return $basePrompt;
    }

    private function makeApiRequest(string $endpoint, array $data = [], string $method = 'POST'): array
    {
        if (!$this->apiKey) {
            throw new Exception('Claude API key not configured');
        }

        $ch = curl_init($endpoint);
        
        curl_setopt_array($ch, [
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_FOLLOWLOCATION => true,
            CURLOPT_HTTPHEADER => $this->defaultHeaders,
            CURLOPT_SSL_VERIFYPEER => true,
            CURLOPT_SSL_VERIFYHOST => 2,
        ]);

        if ($method === 'POST') {
            curl_setopt($ch, CURLOPT_POST, true);
            curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
        }

        $response = curl_exec($ch);
        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        
        if (curl_errno($ch)) {
            throw new Exception('Claude API request failed: ' . curl_error($ch));
        }
        
        curl_close($ch);

        if ($httpCode !== 200) {
            throw new Exception('Claude API returned error: ' . $response);
        }

        $decodedResponse = json_decode($response, true);
        
        if (json_last_error() !== JSON_ERROR_NONE) {
            throw new Exception('Failed to decode Claude response');
        }

        return $decodedResponse;
    }

    private function handleRateLimit($response)
    {
        // Implementera rate limiting hantering här om det behövs
        if (isset($response['error']) && strpos($response['error'], 'rate_limit') !== false) {
            throw new Exception('Rate limit exceeded. Please try again later.');
        }
    }

    private function logApiUsage($tokens)
    {
        // Implementera loggning av API-användning här om det behövs
        // Detta kan vara användbart för framtida fakturering eller övervakning
    }
}

================
File: classes/AiHandler/OpenAiHandler.php
================
<?php
/**
 * OpenAI integration handler
 * @author Ljustema Sverige AB
 */

class OpenAiHandler implements AiHandlerInterface
{
    /** @var string */
    private $apiKey;

    /** @var string */
    private $model;

    /** @var array */
    private $defaultHeaders;

    public function __construct()
    {
        $this->apiKey = Configuration::get('RLAIMODULEMAKER_OPENAI_API_KEY');
        $this->model = Configuration::get('RLAIMODULEMAKER_OPENAI_MODEL', 'gpt-4');
        
        $this->defaultHeaders = [
            'Authorization: Bearer ' . $this->apiKey,
            'Content-Type: application/json',
        ];
    }

    public function generateCode(string $prompt, array $context = []): string
    {
        $systemPrompt = $this->buildSystemPrompt($context);
        
        $messages = [
            ['role' => 'system', 'content' => $systemPrompt],
            ['role' => 'user', 'content' => $prompt]
        ];

        $response = $this->makeApiRequest('https://api.openai.com/v1/chat/completions', [
            'model' => $this->model,
            'messages' => $messages,
            'temperature' => 0.7,
            'max_tokens' => 2000,
            'top_p' => 1,
            'frequency_penalty' => 0,
            'presence_penalty' => 0
        ]);

        if (!isset($response['choices'][0]['message']['content'])) {
            throw new Exception('Invalid response from OpenAI');
        }

        return $response['choices'][0]['message']['content'];
    }

    public function chat(string $message, array $conversation = []): string
    {
        $messages = [];
        
        // Add system message if conversation is new
        if (empty($conversation)) {
            $messages[] = [
                'role' => 'system',
                'content' => 'You are an expert PrestaShop developer assistant. Help the user with module development, following best practices and security guidelines.'
            ];
        }

        // Convert conversation history to OpenAI format
        foreach ($conversation as $entry) {
            $messages[] = [
                'role' => isset($entry['isUser']) && $entry['isUser'] ? 'user' : 'assistant',
                'content' => $entry['message']
            ];
        }

        // Add new message
        $messages[] = ['role' => 'user', 'content' => $message];

        $response = $this->makeApiRequest('https://api.openai.com/v1/chat/completions', [
            'model' => $this->model,
            'messages' => $messages,
            'temperature' => 0.7,
            'max_tokens' => 1000,
            'top_p' => 1,
        ]);

        if (!isset($response['choices'][0]['message']['content'])) {
            throw new Exception('Invalid response from OpenAI');
        }

        return $response['choices'][0]['message']['content'];
    }

    public function analyzeCode(string $code, array $context = []): array
    {
        $prompt = "Analyze the following PrestaShop module code and provide feedback on:
1. Code quality and best practices
2. Security concerns
3. Performance optimization opportunities
4. Compatibility issues
5. Suggested improvements

Code to analyze:
```php
{$code}
```

Additional context:
" . json_encode($context);

        $response = json_decode($this->generateCode($prompt, [
            'task' => 'code_analysis',
            'format' => 'json'
        ]), true);

        if (!$response) {
            throw new Exception('Failed to parse analysis response');
        }

        return $response;
    }

    public function testConnection(): bool
    {
        try {
            $response = $this->makeApiRequest('https://api.openai.com/v1/models', [], 'GET');
            return isset($response['data']) && is_array($response['data']);
        } catch (Exception $e) {
            throw new Exception('OpenAI connection test failed: ' . $e->getMessage());
        }
    }

    public function getAvailableModels(): array
    {
        return [
            'gpt-4' => 'GPT-4 (Recommended)',
            'gpt-3.5-turbo' => 'GPT-3.5 Turbo (Faster)',
        ];
    }

    public function getApiUsage(): array
    {
        $response = $this->makeApiRequest('https://api.openai.com/v1/usage', [], 'GET');
        
        return [
            'total_tokens' => $response['total_tokens'] ?? 0,
            'total_requests' => $response['total_requests'] ?? 0,
            'remaining_credits' => $response['remaining_credits'] ?? 0,
        ];
    }

    private function buildSystemPrompt(array $context): string
    {
        $basePrompt = "You are an expert PrestaShop developer assistant. Your task is to generate high-quality, secure, and efficient code for PrestaShop modules.";

        if (isset($context['task'])) {
            $basePrompt .= "\nSpecific task: {$context['task']}";
        }

        if (isset($context['format'])) {
            $basePrompt .= "\nRequired format: {$context['format']}";
        }

        return $basePrompt;
    }

    private function makeApiRequest(string $endpoint, array $data = [], string $method = 'POST'): array
    {
        if (!$this->apiKey) {
            throw new Exception('OpenAI API key not configured');
        }

        $ch = curl_init($endpoint);
        
        curl_setopt_array($ch, [
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_FOLLOWLOCATION => true,
            CURLOPT_HTTPHEADER => $this->defaultHeaders,
            CURLOPT_SSL_VERIFYPEER => true,
            CURLOPT_SSL_VERIFYHOST => 2,
        ]);

        if ($method === 'POST') {
            curl_setopt($ch, CURLOPT_POST, true);
            curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
        }

        $response = curl_exec($ch);
        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        
        if (curl_errno($ch)) {
            throw new Exception('OpenAI API request failed: ' . curl_error($ch));
        }
        
        curl_close($ch);

        if ($httpCode !== 200) {
            throw new Exception('OpenAI API returned error: ' . $response);
        }

        $decodedResponse = json_decode($response, true);
        
        if (json_last_error() !== JSON_ERROR_NONE) {
            throw new Exception('Failed to decode OpenAI response');
        }

        return $decodedResponse;
    }
}

================
File: classes/Database/ApiKeyRepository.php
================
<?php
/**
 * Repository för hantering av API-nycklar
 * @author Ljustema Sverige AB
 */

class ApiKeyRepository
{
    private const ENCRYPTION_KEY = _COOKIE_KEY_; // Använder PrestaShops cookie-nyckel för kryptering
    private const TABLE_NAME = 'rl_aimodulemaker_api_keys';

    /**
     * Hämta en API-nyckel
     *
     * @param string $apiType Typ av API (openai, claude, github)
     * @return string|null
     */
    public function getApiKey(string $apiType): ?string
    {
        $query = new DbQuery();
        $query->select('api_key')
              ->from(self::TABLE_NAME)
              ->where('api_type = "' . pSQL($apiType) . '"')
              ->where('active = 1');

        $result = Db::getInstance()->getValue($query);
        
        return $result ? $this->decrypt($result) : null;
    }

    /**
     * Uppdatera eller skapa en API-nyckel
     *
     * @param string $apiType Typ av API
     * @param string $apiKey API-nyckel
     * @return bool
     */
    public function updateApiKey(string $apiType, string $apiKey): bool
    {
        $encryptedKey = $this->encrypt($apiKey);
        $data = [
            'api_type' => pSQL($apiType),
            'api_key' => pSQL($encryptedKey),
            'active' => 1,
            'date_upd' => date('Y-m-d H:i:s')
        ];

        // Kontrollera om nyckeln redan finns
        if ($this->exists($apiType)) {
            return Db::getInstance()->update(
                self::TABLE_NAME,
                $data,
                'api_type = "' . pSQL($apiType) . '"'
            );
        }

        $data['date_add'] = date('Y-m-d H:i:s');
        return Db::getInstance()->insert(self::TABLE_NAME, $data);
    }

    /**
     * Kontrollera om en API-nyckel är konfigurerad
     *
     * @param string $apiType Typ av API
     * @return bool
     */
    public function isConfigured(string $apiType): bool
    {
        $query = new DbQuery();
        $query->select('COUNT(*)')
              ->from(self::TABLE_NAME)
              ->where('api_type = "' . pSQL($apiType) . '"')
              ->where('active = 1');

        return (bool)Db::getInstance()->getValue($query);
    }

    /**
     * Hämta alla aktiva API-nycklar
     *
     * @return array
     */
    public function getAllApiKeys(): array
    {
        $query = new DbQuery();
        $query->select('*')
              ->from(self::TABLE_NAME)
              ->where('active = 1');

        $results = Db::getInstance()->executeS($query);
        $keys = [];

        foreach ($results as $result) {
            $keys[$result['api_type']] = [
                'key' => $this->decrypt($result['api_key']),
                'date_add' => $result['date_add'],
                'date_upd' => $result['date_upd']
            ];
        }

        return $keys;
    }

    /**
     * Inaktivera en API-nyckel
     *
     * @param string $apiType Typ av API
     * @return bool
     */
    public function deactivateApiKey(string $apiType): bool
    {
        return Db::getInstance()->update(
            self::TABLE_NAME,
            ['active' => 0],
            'api_type = "' . pSQL($apiType) . '"'
        );
    }

    /**
     * Kontrollera om en API-nyckel är giltig
     *
     * @param string $apiKey API-nyckel att validera
     * @return bool
     */
    public function validateApiKey(string $apiKey): bool
    {
        $query = new DbQuery();
        $query->select('COUNT(*)')
              ->from(self::TABLE_NAME)
              ->where('api_key = "' . pSQL($this->encrypt($apiKey)) . '"')
              ->where('active = 1');

        return (bool)Db::getInstance()->getValue($query);
    }

    /**
     * Kontrollera om en API-typ redan finns
     *
     * @param string $apiType Typ av API
     * @return bool
     */
    private function exists(string $apiType): bool
    {
        $query = new DbQuery();
        $query->select('COUNT(*)')
              ->from(self::TABLE_NAME)
              ->where('api_type = "' . pSQL($apiType) . '"');

        return (bool)Db::getInstance()->getValue($query);
    }

    /**
     * Kryptera en API-nyckel
     *
     * @param string $value Värde att kryptera
     * @return string
     */
    private function encrypt(string $value): string
    {
        $ivLength = openssl_cipher_iv_length('AES-256-CBC');
        $iv = openssl_random_pseudo_bytes($ivLength);
        $encrypted = openssl_encrypt(
            $value,
            'AES-256-CBC',
            self::ENCRYPTION_KEY,
            0,
            $iv
        );
        return base64_encode($iv . $encrypted);
    }

    /**
     * Dekryptera en API-nyckel
     *
     * @param string $value Värde att dekryptera
     * @return string
     */
    private function decrypt(string $value): string
    {
        $data = base64_decode($value);
        $ivLength = openssl_cipher_iv_length('AES-256-CBC');
        $iv = substr($data, 0, $ivLength);
        $encrypted = substr($data, $ivLength);
        return openssl_decrypt(
            $encrypted,
            'AES-256-CBC',
            self::ENCRYPTION_KEY,
            0,
            $iv
        );
    }
}

================
File: classes/Database/ModuleRepository.php
================
<?php
/**
 * Repository för hantering av moduler
 * @author Ljustema Sverige AB
 */

class ModuleRepository
{
    private const TABLE_NAME = 'rl_aimodulemaker_modules';

    /**
     * Skapa en ny modul
     *
     * @param array $moduleData Moduldata
     * @return array
     */
    public function create(array $moduleData): array
    {
        $data = [
            'name' => pSQL($moduleData['name']),
            'github_repo' => pSQL($moduleData['github_repo'] ?? ''),
            'local_path' => pSQL($moduleData['local_path']),
            'version' => pSQL($moduleData['version']),
            'status' => pSQL($moduleData['status'] ?? 'development'),
            'date_add' => date('Y-m-d H:i:s'),
            'date_upd' => date('Y-m-d H:i:s')
        ];

        if (!Db::getInstance()->insert(self::TABLE_NAME, $data)) {
            throw new Exception('Failed to create module in database');
        }

        $moduleData['id'] = Db::getInstance()->Insert_ID();
        return $moduleData;
    }

    /**
     * Uppdatera en modul
     *
     * @param int $moduleId Modul-ID
     * @param array $moduleData Ny moduldata
     * @return bool
     */
    public function update(int $moduleId, array $moduleData): bool
    {
        $data = [
            'name' => pSQL($moduleData['name']),
            'github_repo' => pSQL($moduleData['github_repo'] ?? ''),
            'local_path' => pSQL($moduleData['local_path']),
            'version' => pSQL($moduleData['version']),
            'status' => pSQL($moduleData['status']),
            'date_upd' => date('Y-m-d H:i:s')
        ];

        return Db::getInstance()->update(
            self::TABLE_NAME,
            $data,
            'id = ' . (int)$moduleId
        );
    }

    /**
     * Hämta en modul via ID
     *
     * @param int $moduleId Modul-ID
     * @return array|null
     */
    public function getById(int $moduleId): ?array
    {
        $query = new DbQuery();
        $query->select('*')
              ->from(self::TABLE_NAME)
              ->where('id = ' . (int)$moduleId);

        return Db::getInstance()->getRow($query);
    }

    /**
     * Hämta alla moduler
     *
     * @param array $filters Valfria filter
     * @return array
     */
    public function getAll(array $filters = []): array
    {
        $query = new DbQuery();
        $query->select('*')
              ->from(self::TABLE_NAME);

        if (isset($filters['status'])) {
            $query->where('status = "' . pSQL($filters['status']) . '"');
        }

        if (isset($filters['name'])) {
            $query->where('name LIKE "%' . pSQL($filters['name']) . '%"');
        }

        $query->orderBy('date_upd DESC');

        return Db::getInstance()->executeS($query);
    }

    /**
     * Ta bort en modul
     *
     * @param int $moduleId Modul-ID
     * @return bool
     */
    public function delete(int $moduleId): bool
    {
        return Db::getInstance()->delete(
            self::TABLE_NAME,
            'id = ' . (int)$moduleId
        );
    }

    /**
     * Uppdatera modulstatus
     *
     * @param int $moduleId Modul-ID
     * @param string $status Ny status
     * @return bool
     */
    public function updateStatus(int $moduleId, string $status): bool
    {
        return Db::getInstance()->update(
            self::TABLE_NAME,
            [
                'status' => pSQL($status),
                'date_upd' => date('Y-m-d H:i:s')
            ],
            'id = ' . (int)$moduleId
        );
    }

    /**
     * Uppdatera modulversion
     *
     * @param int $moduleId Modul-ID
     * @param string $version Ny version
     * @return bool
     */
    public function updateVersion(int $moduleId, string $version): bool
    {
        return Db::getInstance()->update(
            self::TABLE_NAME,
            [
                'version' => pSQL($version),
                'date_upd' => date('Y-m-d H:i:s')
            ],
            'id = ' . (int)$moduleId
        );
    }

    /**
     * Hämta modul via namn
     *
     * @param string $name Modulnamn
     * @return array|null
     */
    public function getByName(string $name): ?array
    {
        $query = new DbQuery();
        $query->select('*')
              ->from(self::TABLE_NAME)
              ->where('name = "' . pSQL($name) . '"');

        return Db::getInstance()->getRow($query);
    }

    /**
     * Kontrollera om en modul existerar
     *
     * @param string $name Modulnamn
     * @return bool
     */
    public function exists(string $name): bool
    {
        $query = new DbQuery();
        $query->select('COUNT(*)')
              ->from(self::TABLE_NAME)
              ->where('name = "' . pSQL($name) . '"');

        return (bool)Db::getInstance()->getValue($query);
    }

    /**
     * Hämta modulstatistik
     *
     * @return array
     */
    public function getStatistics(): array
    {
        $stats = [
            'total' => 0,
            'development' => 0,
            'testing' => 0,
            'production' => 0,
            'archived' => 0
        ];

        $query = new DbQuery();
        $query->select('status, COUNT(*) as count')
              ->from(self::TABLE_NAME)
              ->groupBy('status');

        $results = Db::getInstance()->executeS($query);

        foreach ($results as $result) {
            $stats[$result['status']] = (int)$result['count'];
            $stats['total'] += (int)$result['count'];
        }

        return $stats;
    }
}

================
File: classes/Database/VersionRepository.php
================
<?php
/**
 * Repository för hantering av modulversioner
 * @author Ljustema Sverige AB
 */

class VersionRepository
{
    private const TABLE_NAME = 'rl_aimodulemaker_version_history';

    /**
     * Lägg till en ny version
     *
     * @param array $versionData Versionsdata
     * @return bool
     */
    public function addVersion(array $versionData): bool
    {
        $data = [
            'module_id' => (int)$versionData['module_id'],
            'version' => pSQL($versionData['version']),
            'commit_hash' => pSQL($versionData['commit_hash'] ?? ''),
            'changes' => pSQL($versionData['changes']),
            'date_add' => date('Y-m-d H:i:s')
        ];

        return Db::getInstance()->insert(self::TABLE_NAME, $data);
    }

    /**
     * Hämta versionshistorik för en modul
     *
     * @param int $moduleId Modul-ID
     * @param int $limit Antal versioner att hämta
     * @return array
     */
    public function getVersionHistory(int $moduleId, int $limit = 10): array
    {
        $query = new DbQuery();
        $query->select('*')
              ->from(self::TABLE_NAME)
              ->where('module_id = ' . (int)$moduleId)
              ->orderBy('date_add DESC')
              ->limit($limit);

        return Db::getInstance()->executeS($query);
    }

    /**
     * Hämta senaste versionen för en modul
     *
     * @param int $moduleId Modul-ID
     * @return array|null
     */
    public function getLatestVersion(int $moduleId): ?array
    {
        $query = new DbQuery();
        $query->select('*')
              ->from(self::TABLE_NAME)
              ->where('module_id = ' . (int)$moduleId)
              ->orderBy('date_add DESC')
              ->limit(1);

        return Db::getInstance()->getRow($query);
    }

    /**
     * Kontrollera om en version existerar
     *
     * @param int $moduleId Modul-ID
     * @param string $version Versionsnummer
     * @return bool
     */
    public function versionExists(int $moduleId, string $version): bool
    {
        $query = new DbQuery();
        $query->select('COUNT(*)')
              ->from(self::TABLE_NAME)
              ->where('module_id = ' . (int)$moduleId)
              ->where('version = "' . pSQL($version) . '"');

        return (bool)Db::getInstance()->getValue($query);
    }

    /**
     * Ta bort en specifik version
     *
     * @param int $versionId Versions-ID
     * @return bool
     */
    public function deleteVersion(int $versionId): bool
    {
        return Db::getInstance()->delete(
            self::TABLE_NAME,
            'id = ' . (int)$versionId
        );
    }

    /**
     * Ta bort alla versioner för en modul
     *
     * @param int $moduleId Modul-ID
     * @return bool
     */
    public function deleteAllVersions(int $moduleId): bool
    {
        return Db::getInstance()->delete(
            self::TABLE_NAME,
            'module_id = ' . (int)$moduleId
        );
    }

    /**
     * Hämta version via commit hash
     *
     * @param string $commitHash Git commit hash
     * @return array|null
     */
    public function getByCommitHash(string $commitHash): ?array
    {
        $query = new DbQuery();
        $query->select('*')
              ->from(self::TABLE_NAME)
              ->where('commit_hash = "' . pSQL($commitHash) . '"');

        return Db::getInstance()->getRow($query);
    }

    /**
     * Hämta antal versioner för en modul
     *
     * @param int $moduleId Modul-ID
     * @return int
     */
    public function getVersionCount(int $moduleId): int
    {
        $query = new DbQuery();
        $query->select('COUNT(*)')
              ->from(self::TABLE_NAME)
              ->where('module_id = ' . (int)$moduleId);

        return (int)Db::getInstance()->getValue($query);
    }

    /**
     * Jämför två versioner
     *
     * @param int $moduleId Modul-ID
     * @param string $version1 Första versionen
     * @param string $version2 Andra versionen
     * @return array
     */
    public function compareVersions(int $moduleId, string $version1, string $version2): array
    {
        $query = new DbQuery();
        $query->select('*')
              ->from(self::TABLE_NAME)
              ->where('module_id = ' . (int)$moduleId)
              ->where('version IN ("' . pSQL($version1) . '", "' . pSQL($version2) . '")')
              ->orderBy('date_add ASC');

        $versions = Db::getInstance()->executeS($query);
        
        if (count($versions) !== 2) {
            throw new Exception('One or both versions not found');
        }

        return [
            'older' => $versions[0],
            'newer' => $versions[1],
            'time_difference' => strtotime($versions[1]['date_add']) - strtotime($versions[0]['date_add']),
            'changes' => $versions[1]['changes']
        ];
    }

    /**
     * Säkerhetskopiera versionshistorik
     *
     * @param int $moduleId Modul-ID
     * @return string JSON-sträng med backup
     */
    public function backupVersionHistory(int $moduleId): string
    {
        $query = new DbQuery();
        $query->select('*')
              ->from(self::TABLE_NAME)
              ->where('module_id = ' . (int)$moduleId)
              ->orderBy('date_add ASC');

        $versions = Db::getInstance()->executeS($query);
        
        return json_encode([
            'module_id' => $moduleId,
            'backup_date' => date('Y-m-d H:i:s'),
            'versions' => $versions
        ]);
    }

    /**
     * Återställ versionshistorik från backup
     *
     * @param string $backupData JSON-sträng med backup-data
     * @return bool
     */
    public function restoreVersionHistory(string $backupData): bool
    {
        $backup = json_decode($backupData, true);
        if (!$backup || !isset($backup['versions'])) {
            throw new Exception('Invalid backup data');
        }

        // Ta bort existerande versioner
        $this->deleteAllVersions($backup['module_id']);

        // Återställ versioner
        foreach ($backup['versions'] as $version) {
            unset($version['id']); // Låt databasen hantera ID
            if (!Db::getInstance()->insert(self::TABLE_NAME, $version)) {
                return false;
            }
        }

        return true;
    }
}

================
File: classes/GitHandler/GitHandlerInterface.php
================
<?php
/**
 * Interface for Git handlers
 * @author Ljustema Sverige AB
 */

interface GitHandlerInterface
{
    /**
     * Initialize a new repository
     *
     * @param string $moduleName Name of the module
     * @param string $localPath Local path to the module
     * @return bool Success status
     * @throws Exception If initialization fails
     */
    public function initRepository(string $moduleName, string $localPath): bool;

    /**
     * Clone an existing repository
     *
     * @param string $repoUrl Repository URL
     * @param string $localPath Local path to clone to
     * @return bool Success status
     * @throws Exception If clone fails
     */
    public function cloneRepository(string $repoUrl, string $localPath): bool;

    /**
     * Commit changes
     *
     * @param int $moduleId Module ID
     * @param string $message Commit message
     * @return string Commit hash
     * @throws Exception If commit fails
     */
    public function commit(int $moduleId, string $message): string;

    /**
     * Push changes to remote
     *
     * @param int $moduleId Module ID
     * @param string $branch Branch name (optional)
     * @return bool Success status
     * @throws Exception If push fails
     */
    public function push(int $moduleId, string $branch = ''): bool;

    /**
     * Pull changes from remote
     *
     * @param int $moduleId Module ID
     * @param string $branch Branch name (optional)
     * @return bool Success status
     * @throws Exception If pull fails
     */
    public function pull(int $moduleId, string $branch = ''): bool;

    /**
     * Create a new branch
     *
     * @param int $moduleId Module ID
     * @param string $branchName Name of the new branch
     * @param bool $checkout Whether to checkout the new branch
     * @return bool Success status
     * @throws Exception If branch creation fails
     */
    public function createBranch(int $moduleId, string $branchName, bool $checkout = true): bool;

    /**
     * Switch to a branch
     *
     * @param int $moduleId Module ID
     * @param string $branchName Branch name
     * @return bool Success status
     * @throws Exception If checkout fails
     */
    public function checkout(int $moduleId, string $branchName): bool;

    /**
     * Get repository status
     *
     * @param int $moduleId Module ID
     * @return array Status information
     * @throws Exception If status check fails
     */
    public function getStatus(int $moduleId): array;

    /**
     * Get commit history
     *
     * @param int $moduleId Module ID
     * @param int $limit Number of commits to retrieve (optional)
     * @return array Commit history
     * @throws Exception If history retrieval fails
     */
    public function getHistory(int $moduleId, int $limit = 10): array;

    /**
     * Create a tag
     *
     * @param int $moduleId Module ID
     * @param string $tagName Tag name
     * @param string $message Tag message
     * @return bool Success status
     * @throws Exception If tag creation fails
     */
    public function createTag(int $moduleId, string $tagName, string $message = ''): bool;

    /**
     * Test the connection to the Git service
     *
     * @return bool True if connection is successful
     * @throws Exception If connection test fails
     */
    public function testConnection(): bool;
}

================
File: classes/GitHandler/GitHubHandler.php
================
<?php
/**
 * GitHub integration handler
 * @author Ljustema Sverige AB
 */

class GitHubHandler implements GitHandlerInterface
{
    /** @var string */
    private $token;

    /** @var string */
    private $username;

    /** @var string */
    private $organization;

    /** @var array */
    private $defaultHeaders;

    /** @var ModuleRepository */
    private $moduleRepository;

    public function __construct()
    {
        $this->token = Configuration::get('RLAIMODULEMAKER_GITHUB_TOKEN');
        $this->username = Configuration::get('RLAIMODULEMAKER_GITHUB_USERNAME');
        $this->organization = Configuration::get('RLAIMODULEMAKER_GITHUB_ORG');
        
        $this->defaultHeaders = [
            'Authorization: token ' . $this->token,
            'Accept: application/vnd.github.v3+json',
            'User-Agent: AI Module Maker',
        ];

        $this->moduleRepository = new ModuleRepository();
    }

    public function initRepository(string $moduleName, string $localPath): bool
    {
        // Skapa repo på GitHub först
        $repoData = [
            'name' => $moduleName,
            'description' => 'PrestaShop module created with AI Module Maker',
            'private' => true,
            'auto_init' => true,
        ];

        $owner = $this->organization ?: $this->username;
        $response = $this->makeApiRequest("https://api.github.com/user/repos", $repoData);

        if (!isset($response['clone_url'])) {
            throw new Exception('Failed to create GitHub repository');
        }

        // Initiera lokalt repo
        $commands = [
            'git init',
            'git remote add origin ' . $response['clone_url'],
            'git add .',
            'git commit -m "Initial commit"',
            'git push -u origin main'
        ];

        foreach ($commands as $command) {
            $this->executeGitCommand($command, $localPath);
        }

        return true;
    }

    public function cloneRepository(string $repoUrl, string $localPath): bool
    {
        $command = "git clone {$repoUrl} {$localPath}";
        $this->executeGitCommand($command);
        return true;
    }

    public function commit(int $moduleId, string $message): string
    {
        $module = $this->moduleRepository->getById($moduleId);
        if (!$module) {
            throw new Exception('Module not found');
        }

        // Add all changes
        $this->executeGitCommand('git add .', $module->local_path);

        // Create commit
        $commitCommand = sprintf('git commit -m "%s"', addslashes($message));
        $output = $this->executeGitCommand($commitCommand, $module->local_path);

        // Extract commit hash
        if (preg_match('/\[([^\]]+)\s+([a-f0-9]+)\]/', $output, $matches)) {
            return $matches[2];
        }

        throw new Exception('Failed to extract commit hash');
    }

    public function push(int $moduleId, string $branch = ''): bool
    {
        $module = $this->moduleRepository->getById($moduleId);
        if (!$module) {
            throw new Exception('Module not found');
        }

        $command = 'git push';
        if ($branch) {
            $command .= ' origin ' . escapeshellarg($branch);
        }

        $this->executeGitCommand($command, $module->local_path);
        return true;
    }

    public function pull(int $moduleId, string $branch = ''): bool
    {
        $module = $this->moduleRepository->getById($moduleId);
        if (!$module) {
            throw new Exception('Module not found');
        }

        $command = 'git pull';
        if ($branch) {
            $command .= ' origin ' . escapeshellarg($branch);
        }

        $this->executeGitCommand($command, $module->local_path);
        return true;
    }

    public function createBranch(int $moduleId, string $branchName, bool $checkout = true): bool
    {
        $module = $this->moduleRepository->getById($moduleId);
        if (!$module) {
            throw new Exception('Module not found');
        }

        // Create branch
        $command = 'git branch ' . escapeshellarg($branchName);
        $this->executeGitCommand($command, $module->local_path);

        if ($checkout) {
            return $this->checkout($moduleId, $branchName);
        }

        return true;
    }

    public function checkout(int $moduleId, string $branchName): bool
    {
        $module = $this->moduleRepository->getById($moduleId);
        if (!$module) {
            throw new Exception('Module not found');
        }

        $command = 'git checkout ' . escapeshellarg($branchName);
        $this->executeGitCommand($command, $module->local_path);
        return true;
    }

    public function getStatus(int $moduleId): array
    {
        $module = $this->moduleRepository->getById($moduleId);
        if (!$module) {
            throw new Exception('Module not found');
        }

        $output = $this->executeGitCommand('git status --porcelain -b', $module->local_path);
        $lines = explode("\n", trim($output));

        $status = [
            'branch' => '',
            'modified' => [],
            'untracked' => [],
            'deleted' => []
        ];

        foreach ($lines as $line) {
            if (strpos($line, '## ') === 0) {
                // Branch info
                preg_match('/## ([^\.]+)/', $line, $matches);
                $status['branch'] = $matches[1] ?? 'unknown';
            } else {
                // File status
                $statusCode = substr($line, 0, 2);
                $file = substr($line, 3);

                switch (trim($statusCode)) {
                    case 'M':
                        $status['modified'][] = $file;
                        break;
                    case '??':
                        $status['untracked'][] = $file;
                        break;
                    case 'D':
                        $status['deleted'][] = $file;
                        break;
                }
            }
        }

        return $status;
    }

    public function getHistory(int $moduleId, int $limit = 10): array
    {
        $module = $this->moduleRepository->getById($moduleId);
        if (!$module) {
            throw new Exception('Module not found');
        }

        $command = sprintf(
            'git log -%d --pretty=format:"%%H|%%an|%%ae|%%at|%%s"',
            (int)$limit
        );

        $output = $this->executeGitCommand($command, $module->local_path);
        $commits = [];

        foreach (explode("\n", trim($output)) as $line) {
            list($hash, $author, $email, $timestamp, $message) = explode('|', $line);
            $commits[] = [
                'hash' => $hash,
                'author' => $author,
                'email' => $email,
                'date' => date('Y-m-d H:i:s', (int)$timestamp),
                'message' => $message
            ];
        }

        return $commits;
    }

    public function createTag(int $moduleId, string $tagName, string $message = ''): bool
    {
        $module = $this->moduleRepository->getById($moduleId);
        if (!$module) {
            throw new Exception('Module not found');
        }

        $command = 'git tag';
        if ($message) {
            $command .= ' -a ' . escapeshellarg($tagName) . ' -m ' . escapeshellarg($message);
        } else {
            $command .= ' ' . escapeshellarg($tagName);
        }

        $this->executeGitCommand($command, $module->local_path);
        return true;
    }

    public function testConnection(): bool
    {
        try {
            $response = $this->makeApiRequest('https://api.github.com/user');
            return isset($response['login']);
        } catch (Exception $e) {
            throw new Exception('GitHub connection test failed: ' . $e->getMessage());
        }
    }

    private function makeApiRequest(string $endpoint, array $data = [], string $method = 'POST'): array
    {
        if (!$this->token) {
            throw new Exception('GitHub token not configured');
        }

        $ch = curl_init($endpoint);
        
        curl_setopt_array($ch, [
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_FOLLOWLOCATION => true,
            CURLOPT_HTTPHEADER => $this->defaultHeaders,
            CURLOPT_SSL_VERIFYPEER => true,
            CURLOPT_SSL_VERIFYHOST => 2,
        ]);

        if ($method === 'POST') {
            curl_setopt($ch, CURLOPT_POST, true);
            curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
        }

        $response = curl_exec($ch);
        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        
        if (curl_errno($ch)) {
            throw new Exception('GitHub API request failed: ' . curl_error($ch));
        }
        
        curl_close($ch);

        if ($httpCode !== 200 && $httpCode !== 201) {
            throw new Exception('GitHub API returned error: ' . $response);
        }

        $decodedResponse = json_decode($response, true);
        
        if (json_last_error() !== JSON_ERROR_NONE) {
            throw new Exception('Failed to decode GitHub response');
        }

        return $decodedResponse;
    }

    private function executeGitCommand(string $command, string $workingDir = null): string
    {
        $descriptorspec = [
            1 => ['pipe', 'w'], // stdout
            2 => ['pipe', 'w']  // stderr
        ];

        $pipes = [];
        $process = proc_open(
            $command,
            $descriptorspec,
            $pipes,
            $workingDir
        );

        if (!is_resource($process)) {
            throw new Exception('Failed to execute git command: ' . $command);
        }

        $output = stream_get_contents($pipes[1]);
        $error = stream_get_contents($pipes[2]);

        fclose($pipes[1]);
        fclose($pipes[2]);

        $returnValue = proc_close($process);

        if ($returnValue !== 0) {
            throw new Exception('Git command failed: ' . $error);
        }

        return trim($output);
    }

    private function getRepoUrl(string $moduleName): string
    {
        $owner = $this->organization ?: $this->username;
        return "https://github.com/{$owner}/{$moduleName}";
    }
}

================
File: classes/ModuleBuilder/FileGenerator.php
================
<?php
/**
 * File Generator class
 * @author Ljustema Sverige AB
 */

class FileGenerator
{
    /**
     * Skapa en fil med innehåll
     *
     * @param string $path Sökväg till filen
     * @param string $content Filens innehåll
     * @return bool
     * @throws Exception
     */
    public function createFile(string $path, string $content): bool
    {
        if (!$this->ensureDirectoryExists(dirname($path))) {
            throw new Exception("Could not create directory: " . dirname($path));
        }

        if (file_put_contents($path, $content) === false) {
            throw new Exception("Could not write to file: $path");
        }

        return true;
    }

    /**
     * Skapa index.php filer i alla undermappar
     *
     * @param string $baseDir Basmapp
     * @param string $content Innehåll för index.php
     * @return void
     */
    public function createIndexFiles(string $baseDir, string $content): void
    {
        $directory = new RecursiveDirectoryIterator($baseDir);
        $iterator = new RecursiveIteratorIterator($directory);

        foreach ($iterator as $file) {
            if ($file->isDir() && !$file->isDot()) {
                $indexPath = $file->getPathname() . '/index.php';
                if (!file_exists($indexPath)) {
                    $this->createFile($indexPath, $content);
                }
            }
        }
    }

    /**
     * Ta bort en mapp och allt dess innehåll
     *
     * @param string $dir Mapp att ta bort
     * @return bool
     */
    public function deleteDirectory(string $dir): bool
    {
        if (!is_dir($dir)) {
            return false;
        }

        $files = array_diff(scandir($dir), ['.', '..']);
        
        foreach ($files as $file) {
            $path = $dir . '/' . $file;
            
            if (is_dir($path)) {
                $this->deleteDirectory($path);
            } else {
                unlink($path);
            }
        }

        return rmdir($dir);
    }

    /**
     * Skapa en mapp om den inte finns
     *
     * @param string $dir Mapp att skapa
     * @return bool
     */
    private function ensureDirectoryExists(string $dir): bool
    {
        return is_dir($dir) || mkdir($dir, 0755, true);
    }

    /**
     * Kopiera en mapp rekursivt
     *
     * @param string $source Källmapp
     * @param string $dest Målmapp
     * @return bool
     */
    public function copyDirectory(string $source, string $dest): bool
    {
        if (!is_dir($source)) {
            return false;
        }

        if (!is_dir($dest)) {
            if (!mkdir($dest, 0755, true)) {
                return false;
            }
        }

        $iterator = new RecursiveIteratorIterator(
            new RecursiveDirectoryIterator($source, RecursiveDirectoryIterator::SKIP_DOTS),
            RecursiveIteratorIterator::SELF_FIRST
        );

        foreach ($iterator as $item) {
            if ($item->isDir()) {
                $newDir = $dest . DIRECTORY_SEPARATOR . $iterator->getSubPathName();
                if (!is_dir($newDir)) {
                    mkdir($newDir);
                }
            } else {
                copy($item, $dest . DIRECTORY_SEPARATOR . $iterator->getSubPathName());
            }
        }

        return true;
    }

    /**
     * Läs in en mall-fil
     *
     * @param string $templateName Mall att läsa
     * @return string
     * @throws Exception
     */
    public function loadTemplate(string $templateName): string
    {
        $templatePath = _PS_MODULE_DIR_ . 'rl_aimodulemaker/templates/' . $templateName;
        
        if (!file_exists($templatePath)) {
            throw new Exception("Template file not found: $templateName");
        }

        return file_get_contents($templatePath);
    }

    /**
     * Ersätt platshållare i en mall
     *
     * @param string $template Mall
     * @param array $variables Variabler att ersätta
     * @return string
     */
    public function replaceTemplateVariables(string $template, array $variables): string
    {
        foreach ($variables as $key => $value) {
            $template = str_replace('{{' . $key . '}}', $value, $template);
        }

        return $template;
    }

    /**
     * Kontrollera om en fil är skrivbar
     *
     * @param string $path Sökväg till fil
     * @return bool
     */
    public function isWritable(string $path): bool
    {
        if (file_exists($path)) {
            return is_writable($path);
        }

        return is_writable(dirname($path));
    }

    /**
     * Skapa en backup av en fil
     *
     * @param string $path Sökväg till fil
     * @return string Sökväg till backup
     * @throws Exception
     */
    public function createBackup(string $path): string
    {
        if (!file_exists($path)) {
            throw new Exception("File does not exist: $path");
        }

        $backupPath = $path . '.' . date('Y-m-d-His') . '.bak';
        
        if (!copy($path, $backupPath)) {
            throw new Exception("Failed to create backup of: $path");
        }

        return $backupPath;
    }

    /**
     * Validera att en fil har korrekt syntax
     *
     * @param string $path Sökväg till fil
     * @param string $type Filtyp (php, js, css, etc)
     * @return bool
     */
    public function validateFileSyntax(string $path, string $type = 'php'): bool
    {
        switch ($type) {
            case 'php':
                exec("php -l $path 2>&1", $output, $returnVar);
                return $returnVar === 0;

            case 'js':
                if (file_exists(NODE_MODULES_PATH . '/eslint/bin/eslint.js')) {
                    exec("node " . NODE_MODULES_PATH . "/eslint/bin/eslint.js $path 2>&1", $output, $returnVar);
                    return $returnVar === 0;
                }
                return true;

            case 'css':
                if (file_exists(NODE_MODULES_PATH . '/stylelint/bin/stylelint.js')) {
                    exec("node " . NODE_MODULES_PATH . "/stylelint/bin/stylelint.js $path 2>&1", $output, $returnVar);
                    return $returnVar === 0;
                }
                return true;

            case 'json':
                $content = file_get_contents($path);
                json_decode($content);
                return json_last_error() === JSON_ERROR_NONE;

            case 'xml':
                $content = file_get_contents($path);
                libxml_use_internal_errors(true);
                simplexml_load_string($content);
                $errors = libxml_get_errors();
                libxml_clear_errors();
                return empty($errors);

            default:
                return true;
        }
    }

    /**
     * Generera en unik filnamn
     *
     * @param string $baseDir Basmapp
     * @param string $prefix Prefix för filnamn
     * @param string $extension Filändelse
     * @return string
     */
    public function generateUniqueFilename(string $baseDir, string $prefix, string $extension): string
    {
        $counter = 0;
        do {
            $filename = $prefix . ($counter > 0 ? '_' . $counter : '') . '.' . $extension;
            $path = $baseDir . '/' . $filename;
            $counter++;
        } while (file_exists($path));

        return $path;
    }

    /**
     * Lägg till innehåll i början av en fil
     *
     * @param string $path Sökväg till fil
     * @param string $content Innehåll att lägga till
     * @return bool
     */
    public function prependToFile(string $path, string $content): bool
    {
        if (!file_exists($path)) {
            return $this->createFile($path, $content);
        }

        $existingContent = file_get_contents($path);
        return $this->createFile($path, $content . $existingContent);
    }

    /**
     * Lägg till innehåll i slutet av en fil
     *
     * @param string $path Sökväg till fil
     * @param string $content Innehåll att lägga till
     * @return bool
     */
    public function appendToFile(string $path, string $content): bool
    {
        if (!file_exists($path)) {
            return $this->createFile($path, $content);
        }

        return file_put_contents($path, $content, FILE_APPEND) !== false;
    }

    /**
     * Ersätt innehåll i en fil
     *
     * @param string $path Sökväg till fil
     * @param string $search Sök efter
     * @param string $replace Ersätt med
     * @return bool
     */
    public function replaceInFile(string $path, string $search, string $replace): bool
    {
        if (!file_exists($path)) {
            return false;
        }

        $content = file_get_contents($path);
        $content = str_replace($search, $replace, $content);
        return $this->createFile($path, $content);
    }

    /**
     * Skapa en temporär fil
     *
     * @param string $content Innehåll
     * @param string $prefix Prefix för filnamn
     * @return string Sökväg till temporär fil
     */
    public function createTempFile(string $content, string $prefix = 'tmp_'): string
    {
        $tempFile = tempnam(sys_get_temp_dir(), $prefix);
        $this->createFile($tempFile, $content);
        return $tempFile;
    }

    /**
     * Ta bort tomma mappar rekursivt
     *
     * @param string $dir Mapp att rensa
     * @return bool
     */
    public function removeEmptyDirectories(string $dir): bool
    {
        if (!is_dir($dir)) {
            return false;
        }

        $files = array_diff(scandir($dir), ['.', '..']);
        
        foreach ($files as $file) {
            $path = $dir . '/' . $file;
            if (is_dir($path)) {
                $this->removeEmptyDirectories($path);
            }
        }

        if (count(array_diff(scandir($dir), ['.', '..'])) === 0) {
            rmdir($dir);
        }

        return true;
    }
}

================
File: classes/ModuleBuilder/ModuleGenerator.php
================
<?php
/**
 * Module Generator class
 * @author Ljustema Sverige AB
 */

class ModuleGenerator
{
    /** @var array */
    private $moduleData;

    /** @var string */
    private $outputPath;

    /** @var FileGenerator */
    private $fileGenerator;

    /** @var ValidationHandler */
    private $validator;

    /** @var AiHandlerInterface */
    private $aiHandler;

    public function __construct(array $moduleData, string $outputPath)
    {
        $this->moduleData = $moduleData;
        $this->outputPath = $outputPath;
        $this->fileGenerator = new FileGenerator();
        $this->validator = new ValidationHandler();
        
        // Välj AI handler baserat på konfiguration
        $aiModel = Configuration::get('RLAIMODULEMAKER_DEFAULT_AI', 'openai');
        $this->aiHandler = $aiModel === 'claude' ? new ClaudeHandler() : new OpenAiHandler();
    }

    /**
     * Generera en ny modul
     *
     * @return bool
     * @throws Exception
     */
    public function generateModule(): bool
    {
        try {
            // Validera moduldata
            $this->validator->validateModuleData($this->moduleData);

            // Skapa modulstruktur
            $this->createModuleStructure();

            // Generera grundfiler
            $this->generateBaseFiles();

            // Generera specifika filer baserat på modultyp
            $this->generateSpecificFiles();

            // Skapa GitHub repository om konfigurerat
            if ($this->shouldCreateGitRepo()) {
                $this->initializeGitRepository();
            }

            // Generera VS Code workspace om det behövs
            if ($this->moduleData['create_workspace'] ?? false) {
                $this->createVSCodeWorkspace();
            }

            return true;

        } catch (Exception $e) {
            // Ta bort ofullständig modul vid fel
            $this->cleanup();
            throw $e;
        }
    }

    /**
     * Skapa modulens mappstruktur
     */
    private function createModuleStructure(): void
    {
        $directories = [
            $this->outputPath,
            $this->outputPath . '/controllers',
            $this->outputPath . '/controllers/admin',
            $this->outputPath . '/controllers/front',
            $this->outputPath . '/classes',
            $this->outputPath . '/views',
            $this->outputPath . '/views/templates',
            $this->outputPath . '/views/templates/admin',
            $this->outputPath . '/views/templates/front',
            $this->outputPath . '/views/css',
            $this->outputPath . '/views/js',
            $this->outputPath . '/sql',
            $this->outputPath . '/translations',
            $this->outputPath . '/config',
            $this->outputPath . '/upgrade'
        ];

        foreach ($directories as $dir) {
            if (!is_dir($dir) && !mkdir($dir, 0755, true)) {
                throw new Exception("Failed to create directory: $dir");
            }
        }
    }

    /**
     * Generera modulens grundfiler
     */
    private function generateBaseFiles(): void
    {
        // Huvudmodulfil
        $mainModuleContent = $this->generateMainModuleFile();
        $this->fileGenerator->createFile(
            $this->outputPath . '/' . $this->moduleData['name'] . '.php',
            $mainModuleContent
        );

        // Konfigurationsfil
        $configXmlContent = $this->generateConfigXml();
        $this->fileGenerator->createFile(
            $this->outputPath . '/config.xml',
            $configXmlContent
        );

        // SQL-filer
        $this->fileGenerator->createFile(
            $this->outputPath . '/sql/install.php',
            $this->generateInstallSQL()
        );
        
        $this->fileGenerator->createFile(
            $this->outputPath . '/sql/uninstall.php',
            $this->generateUninstallSQL()
        );

        // Index-filer för säkerhet
        $indexContent = $this->generateIndexFile();
        $this->fileGenerator->createIndexFiles($this->outputPath, $indexContent);

        // License och README
        $this->fileGenerator->createFile(
            $this->outputPath . '/license.txt',
            $this->generateLicense()
        );
        
        $this->fileGenerator->createFile(
            $this->outputPath . '/README.md',
            $this->generateReadme()
        );
    }

    /**
     * Generera specifika filer baserat på modultyp
     */
    private function generateSpecificFiles(): void
    {
        switch ($this->moduleData['type']) {
            case 'payment':
                $this->generatePaymentModuleFiles();
                break;
            
            case 'shipping':
                $this->generateShippingModuleFiles();
                break;
            
            case 'analytics':
                $this->generateAnalyticsModuleFiles();
                break;
            
            case 'marketplace':
                $this->generateMarketplaceModuleFiles();
                break;
            
            case 'seo':
                $this->generateSeoModuleFiles();
                break;
        }
    }

    /**
     * Initiera Git repository
     */
    private function initializeGitRepository(): void
    {
        $gitHandler = new GitHubHandler();
        $gitHandler->initRepository(
            $this->moduleData['name'],
            $this->outputPath
        );
    }

    /**
     * Skapa VS Code workspace
     */
    private function createVSCodeWorkspace(): void
    {
        $workspace = [
            'folders' => [
                [
                    'path' => '.'
                ]
            ],
            'settings' => [
                'files.exclude' => [
                    '**/.git' => true,
                    '**/.DS_Store' => true
                ],
                'php.suggest.basic' => true,
                'php.validate.enable' => true
            ],
            'extensions' => [
                'recommendations' => [
                    'bmewburn.vscode-intelephense-client',
                    'neilbrayfield.php-docblocker',
                    'mrmlnc.vscode-duplicate'
                ]
            ]
        ];

        $this->fileGenerator->createFile(
            $this->outputPath . '/' . $this->moduleData['name'] . '.code-workspace',
            json_encode($workspace, JSON_PRETTY_PRINT)
        );
    }

    /**
     * Generera huvudmodulfilen med AI-assistans
     */
    private function generateMainModuleFile(): string
    {
        $prompt = "Create a PrestaShop module main file with the following specifications:\n";
        $prompt .= "Module Name: " . $this->moduleData['name'] . "\n";
        $prompt .= "Description: " . $this->moduleData['description'] . "\n";
        $prompt .= "Type: " . $this->moduleData['type'] . "\n";
        $prompt .= "Version: " . $this->moduleData['version'] . "\n";
        
        $code = $this->aiHandler->generateCode($prompt, [
            'task' => 'module_main_file',
            'format' => 'php'
        ]);

        return $this->validator->validatePhpCode($code);
    }

    /**
     * Städa upp vid fel
     */
    private function cleanup(): void
    {
        if (is_dir($this->outputPath)) {
            $this->fileGenerator->deleteDirectory($this->outputPath);
        }
    }

    private function shouldCreateGitRepo(): bool
    {
        return isset($this->moduleData['create_git_repo']) && 
               $this->moduleData['create_git_repo'] === true &&
               Configuration::get('RLAIMODULEMAKER_GITHUB_TOKEN');
    }

    /**
     * Generera config.xml
     */
    private function generateConfigXml(): string
    {
        $template = <<<XML
<?xml version="1.0" encoding="UTF-8" ?>
<module>
    <name>{$this->moduleData['name']}</name>
    <displayName><![CDATA[{$this->moduleData['display_name']}]]></displayName>
    <version><![CDATA[{$this->moduleData['version']}]]></version>
    <description><![CDATA[{$this->moduleData['description']}]]></description>
    <author><![CDATA[Ljustema Sverige AB]]></author>
    <tab><![CDATA[{$this->moduleData['tab']}]]></tab>
    <is_configurable>1</is_configurable>
    <need_instance>1</need_instance>
    <limited_countries></limited_countries>
</module>
XML;
        return $template;
    }

    /**
     * Generera install.php för SQL
     */
    private function generateInstallSQL(): string
    {
        $tables = $this->moduleData['tables'] ?? [];
        $sql = "<?php\n\$sql = array();\n\n";

        foreach ($tables as $table) {
            $sql .= "\$sql[] = 'CREATE TABLE IF NOT EXISTS `' . _DB_PREFIX_ . '{$table['name']}` (\n";
            foreach ($table['fields'] as $field) {
                $sql .= "    `{$field['name']}` {$field['type']},\n";
            }
            $sql .= "    PRIMARY KEY (`{$table['primary_key']}`)\n";
            $sql .= ") ENGINE=' . _MYSQL_ENGINE_ . ' DEFAULT CHARSET=utf8mb4;';\n\n";
        }

        return $sql;
    }

    /**
     * Generera uninstall.php för SQL
     */
    private function generateUninstallSQL(): string
    {
        $tables = $this->moduleData['tables'] ?? [];
        $sql = "<?php\n\$sql = array();\n\n";

        foreach ($tables as $table) {
            $sql .= "\$sql[] = 'DROP TABLE IF EXISTS `' . _DB_PREFIX_ . '{$table['name']}`;';\n";
        }

        return $sql;
    }

    /**
     * Generera index.php säkerhetsfil
     */
    private function generateIndexFile(): string
    {
        return <<<PHP
<?php
header('Expires: Mon, 26 Jul 1997 05:00:00 GMT');
header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT');
header('Cache-Control: no-store, no-cache, must-revalidate');
header('Cache-Control: post-check=0, pre-check=0', false);
header('Pragma: no-cache');
header('Location: ../');
exit;
PHP;
    }

    /**
     * Generera README.md
     */
    private function generateReadme(): string
    {
        return <<<MARKDOWN
# {$this->moduleData['display_name']}

## Description
{$this->moduleData['description']}

## Features
{$this->generateFeaturesList()}

## Installation
1. Upload the module to your PrestaShop modules directory
2. Install the module through PrestaShop admin panel
3. Configure the module settings as needed

## Configuration
{$this->generateConfigurationGuide()}

## Requirements
- PrestaShop {$this->moduleData['ps_version']} or later
- PHP {$this->moduleData['php_version']} or later

## Author
Ljustema Sverige AB

## License
Commercial License - All rights reserved
MARKDOWN;
    }

    /**
     * Generera licensfil
     */
    private function generateLicense(): string
    {
        return <<<LICENSE
Commercial License

Copyright (c) 2024 Ljustema Sverige AB
All rights reserved.

This module is part of a commercial product by Ljustema Sverige AB.
Unauthorized copying, modification, distribution, or use of this software is strictly prohibited.
LICENSE;
    }

    /**
     * Generera lista över funktioner för README
     */
    private function generateFeaturesList(): string
    {
        $features = $this->moduleData['features'] ?? [];
        if (empty($features)) {
            return "- Basic module functionality\n- PrestaShop compatibility\n- Easy configuration";
        }

        return implode("\n", array_map(function($feature) {
            return "- " . $feature;
        }, $features));
    }

    /**
     * Generera konfigurationsguide för README
     */
    private function generateConfigurationGuide(): string
    {
        $settings = $this->moduleData['settings'] ?? [];
        if (empty($settings)) {
            return "No specific configuration needed.";
        }

        $guide = "Configure the following settings in the module configuration page:\n\n";
        foreach ($settings as $setting) {
            $guide .= "- {$setting['name']}: {$setting['description']}\n";
        }
        return $guide;
    }

    /**
     * Generera betalningsmodulfiler
     */
    private function generatePaymentModuleFiles(): void
    {
        // Generera controllers
        $this->fileGenerator->createFile(
            $this->outputPath . '/controllers/front/payment.php',
            $this->generatePaymentController()
        );

        $this->fileGenerator->createFile(
            $this->outputPath . '/controllers/front/validation.php',
            $this->generateValidationController()
        );

        // Generera templates
        $this->fileGenerator->createFile(
            $this->outputPath . '/views/templates/front/payment.tpl',
            $this->generatePaymentTemplate()
        );

        $this->fileGenerator->createFile(
            $this->outputPath . '/views/templates/hook/payment.tpl',
            $this->generatePaymentHookTemplate()
        );
    }

    /**
     * Generera fraktmodulfiler
     */
    private function generateShippingModuleFiles(): void
    {
        $this->fileGenerator->createFile(
            $this->outputPath . '/controllers/front/carrier.php',
            $this->generateCarrierController()
        );

        $this->fileGenerator->createFile(
            $this->outputPath . '/classes/ShippingCalculator.php',
            $this->generateShippingCalculator()
        );
    }

    /**
     * Generera analysfiler
     */
    private function generateAnalyticsModuleFiles(): void
    {
        $this->fileGenerator->createFile(
            $this->outputPath . '/classes/AnalyticsTracker.php',
            $this->generateAnalyticsTracker()
        );

        $this->fileGenerator->createFile(
            $this->outputPath . '/views/js/tracking.js',
            $this->generateTrackingScript()
        );
    }

    /**
     * Generera marketplace-filer
     */
    private function generateMarketplaceModuleFiles(): void
    {
        $this->fileGenerator->createFile(
            $this->outputPath . '/controllers/front/seller.php',
            $this->generateSellerController()
        );

        $this->fileGenerator->createFile(
            $this->outputPath . '/classes/MarketplaceManager.php',
            $this->generateMarketplaceManager()
        );
    }

    /**
     * Generera SEO-filer
     */
    private function generateSeoModuleFiles(): void
    {
        $this->fileGenerator->createFile(
            $this->outputPath . '/classes/SeoOptimizer.php',
            $this->generateSeoOptimizer()
        );

        $this->fileGenerator->createFile(
            $this->outputPath . '/views/js/seo.js',
            $this->generateSeoScript()
        );
    }
}

================
File: classes/ModuleBuilder/ValidationHandler.php
================
<?php
/**
 * Validation Handler class
 * @author Ljustema Sverige AB
 */

class ValidationHandler
{
    /**
     * Validera moduldata innan generering
     *
     * @param array $moduleData Data att validera
     * @return bool
     * @throws Exception
     */
    public function validateModuleData(array $moduleData): bool
    {
        // Kontrollera obligatoriska fält
        $requiredFields = ['name', 'version', 'description'];
        foreach ($requiredFields as $field) {
            if (empty($moduleData[$field])) {
                throw new Exception("Missing required field: $field");
            }
        }

        // Validera modulnamn
        if (!$this->isValidModuleName($moduleData['name'])) {
            throw new Exception('Invalid module name. Module names must be lowercase, contain only letters, numbers and underscores, and start with a letter.');
        }

        // Validera version
        if (!$this->isValidVersion($moduleData['version'])) {
            throw new Exception('Invalid version format. Use semantic versioning (e.g., 1.0.0)');
        }

        // Validera beskrivning
        if (strlen($moduleData['description']) > 255) {
            throw new Exception('Description is too long. Maximum 255 characters.');
        }

        return true;
    }

    /**
     * Validera PHP-kod
     *
     * @param string $code Kod att validera
     * @return string Validerad kod
     * @throws Exception
     */
    public function validatePhpCode(string $code): string
    {
        // Skapa temporär fil för validering
        $tempFile = tempnam(sys_get_temp_dir(), 'php_validate_');
        file_put_contents($tempFile, $code);

        // Kontrollera syntax
        exec("php -l $tempFile 2>&1", $output, $returnVar);
        unlink($tempFile);

        if ($returnVar !== 0) {
            throw new Exception('PHP syntax error: ' . implode("\n", $output));
        }

        // Kontrollera säkerhetsproblem
        $this->checkSecurityIssues($code);

        // Kontrollera PrestaShop-kompatibilitet
        $this->checkPrestashopCompatibility($code);

        return $code;
    }

    /**
     * Validera modulstruktur
     *
     * @param string $modulePath Sökväg till modul
     * @return bool
     * @throws Exception
     */
    public function validateModuleStructure(string $modulePath): bool
    {
        // Kontrollera nödvändiga filer
        $requiredFiles = [
            'config.xml',
            'index.php',
            'LICENSE'
        ];

        foreach ($requiredFiles as $file) {
            if (!file_exists($modulePath . '/' . $file)) {
                throw new Exception("Missing required file: $file");
            }
        }

        // Kontrollera nödvändiga mappar
        $requiredDirs = [
            'controllers',
            'views',
            'translations'
        ];

        foreach ($requiredDirs as $dir) {
            if (!is_dir($modulePath . '/' . $dir)) {
                throw new Exception("Missing required directory: $dir");
            }
        }

        // Validera alla PHP-filer
        $iterator = new RecursiveIteratorIterator(
            new RecursiveDirectoryIterator($modulePath)
        );

        foreach ($iterator as $file) {
            if ($file->isFile() && $file->getExtension() === 'php') {
                $this->validatePhpCode(file_get_contents($file->getPathname()));
            }
        }

        return true;
    }

    /**
     * Kontrollera om ett modulnamn är giltigt
     *
     * @param string $name Modulnamn att kontrollera
     * @return bool
     */
    private function isValidModuleName(string $name): bool
    {
        return (bool)preg_match('/^[a-z][a-z0-9_]+$/', $name);
    }

    /**
     * Kontrollera om en version är giltig
     *
     * @param string $version Version att kontrollera
     * @return bool
     */
    private function isValidVersion(string $version): bool
    {
        return (bool)preg_match('/^\d+\.\d+\.\d+$/', $version);
    }

    /**
     * Kontrollera säkerhetsproblem i kod
     *
     * @param string $code Kod att kontrollera
     * @throws Exception
     */
    private function checkSecurityIssues(string $code): void
    {
        // Lista över osäkra funktioner
        $unsafeFunctions = [
            'eval',
            'exec',
            'passthru',
            'shell_exec',
            'system',
            'proc_open',
            'popen',
            'curl_exec',
            'curl_multi_exec',
            'parse_str',
            'extract'
        ];

        foreach ($unsafeFunctions as $function) {
            if (stripos($code, $function . '(') !== false) {
                throw new Exception("Potentially unsafe function used: $function");
            }
        }

        // Kontrollera direkt användning av superglobals
        $unsafeGlobals = ['$_GET', '$_POST', '$_REQUEST'];
        foreach ($unsafeGlobals as $global) {
            if (strpos($code, $global) !== false) {
                throw new Exception("Direct superglobal usage detected. Use Tools::getValue() instead.");
            }
        }

        // Kontrollera SQL-injektion risker
        if (strpos($code, 'INSERT INTO') !== false || 
            strpos($code, 'UPDATE') !== false || 
            strpos($code, 'DELETE FROM') !== false) {
            if (strpos($code, 'pSQL') === false && 
                strpos($code, 'bqSQL') === false) {
                throw new Exception("SQL queries must use pSQL() or bqSQL() for security.");
            }
        }
    }

    /**
     * Kontrollera PrestaShop-kompatibilitet
     *
     * @param string $code Kod att kontrollera
     * @throws Exception
     */
    private function checkPrestashopCompatibility(string $code): void
    {
        // Kontrollera att _PS_VERSION_ kontroll finns
        if (strpos($code, '!defined(\'_PS_VERSION_\')') === false) {
            throw new Exception('Missing PrestaShop version check.');
        }

        // Kontrollera deprecated funktioner
        $deprecatedFunctions = [
            'mysql_',
            'split(',
            'Tools::displayError(',
            'Tools::p(',
        ];

        foreach ($deprecatedFunctions as $function) {
            if (strpos($code, $function) !== false) {
                throw new Exception("Deprecated function or method used: $function");
            }
        }

        // Kontrollera korrekt användning av hooks
        if (strpos($code, 'extends Module') !== false &&
            strpos($code, 'public function install') !== false &&
            strpos($code, 'registerHook') === false) {
            throw new Exception('Module should register at least one hook.');
        }
    }
}

================
File: composer.json
================
{
    "name": "ljustema/rl_aimodulemaker",
    "description": "Create and manage PrestaShop modules with AI assistance",
    "type": "prestashop-module",
    "license": "proprietary",
    "authors": [
        {
            "name": "Ljustema Sverige AB",
            "email": "info@ljustema.se"
        }
    ],
    "require": {
        "php": ">=7.2.0",
        "guzzlehttp/guzzle": "^7.0",
        "symfony/yaml": "^4.4",
        "knplabs/github-api": "^3.0",
        "czproject/git-php": "^4.0",
        "league/flysystem": "^2.0",
        "psr/log": "^1.1",
        "symfony/cache": "^4.4",
        "symfony/dotenv": "^4.4",
        "twig/twig": "^2.0",
        "monolog/monolog": "^2.0"
    },
    "require-dev": {
        "phpunit/phpunit": "^9.0",
        "prestashop/php-dev-tools": "^4.0",
        "phpstan/phpstan": "^1.0",
        "squizlabs/php_codesniffer": "^3.6"
    },
    "autoload": {
        "psr-4": {
            "PrestaShop\\Module\\RlAimodulemaker\\Controller\\Admin\\": "modules/rl_aimodulemaker/controllers/admin/",
            "PrestaShop\\Module\\RlAimodulemaker\\": "modules/rl_aimodulemaker/src/"
        },
        "classmap": [
            "modules/rl_aimodulemaker/rl_aimodulemaker.php"
        ]
    },
    "config": {
        "preferred-install": "dist",
        "prepend-autoloader": false
    },
    "scripts": {
        "test": "phpunit",
        "phpstan": "phpstan analyse",
        "lint": "php-cs-fixer fix --dry-run",
        "fix": "php-cs-fixer fix"
    }
}

================
File: config.xml
================
<?xml version="1.0" encoding="UTF-8" ?>
<module>
    <name>rl_aimodulemaker</name>
    <displayName><![CDATA[AI Module Maker]]></displayName>
    <version><![CDATA[1.0.0]]></version>
    <description><![CDATA[Create and manage PrestaShop modules with AI assistance]]></description>
    <author><![CDATA[Ljustema Sverige AB]]></author>
    <tab><![CDATA[administration]]></tab>
    <is_configurable>1</is_configurable>
    <need_instance>1</need_instance>
    <limited_countries></limited_countries>
</module>

================
File: config/config.yml
================
# Main configuration for AI Module Maker
module:
    name: rl_aimodulemaker
    display_name: AI Module Maker
    version: 1.0.0
    author: Ljustema Sverige AB
    compatibility:
        min_prestashop: '1.7.0.0'
        max_prestashop: _PS_VERSION_
        php_version: '7.2.0'

# AI Configuration
ai:
    openai:
        models:
            - name: gpt-4
              display_name: GPT-4 (Most Capable)
              max_tokens: 4000
            - name: gpt-3.5-turbo
              display_name: GPT-3.5 Turbo (Faster)
              max_tokens: 4000
        default_model: gpt-4
        temperature: 0.7
        max_history: 10
        
    claude:
        models:
            - name: claude-3-opus-20240229
              display_name: Claude-3 Opus (Most Capable)
              max_tokens: 4000
            - name: claude-3-sonnet-20240229
              display_name: Claude-3 Sonnet (Balanced)
              max_tokens: 4000
        default_model: claude-3-opus-20240229
        temperature: 0.7
        max_history: 10

# GitHub Configuration
github:
    default_visibility: private
    auto_init: true
    gitignore_template: prestashop
    required_files:
        - README.md
        - LICENSE
        - config.xml
    branch_protection:
        required_reviews: 1
        required_status_checks: true

# Module Templates
templates:
    module_types:
        payment:
            name: Payment Module
            files:
                - controllers/front/payment.php
                - controllers/front/validation.php
                - views/templates/front/payment.tpl
                - views/templates/hook/payment.tpl
            hooks:
                - displayPayment
                - displayPaymentReturn
                - displayAdminOrder
                
        shipping:
            name: Shipping Module
            files:
                - controllers/front/carrier.php
                - classes/ShippingCalculator.php
                - views/templates/front/carrier.tpl
            hooks:
                - displayCarrierList
                - actionCarrierProcess
                
        analytics:
            name: Analytics Module
            files:
                - classes/AnalyticsTracker.php
                - views/js/tracking.js
            hooks:
                - displayHeader
                - displayFooter
                - actionOrderStatusUpdate
                
        marketplace:
            name: Marketplace Module
            files:
                - controllers/front/seller.php
                - classes/MarketplaceManager.php
                - views/templates/front/seller.tpl
            hooks:
                - displayCustomerAccount
                - displayMyAccountBlock
                
        seo:
            name: SEO Module
            files:
                - classes/SeoOptimizer.php
                - views/js/seo.js
            hooks:
                - displayHeader
                - actionMetaPageSave

# Code Editor Settings
editor:
    theme: default
    tab_size: 4
    line_numbers: true
    auto_complete: true
    supported_languages:
        - php
        - javascript
        - css
        - smarty
        - xml
        - json
        - markdown
    file_types:
        php:
            extensions: [php]
            mode: application/x-httpd-php
        javascript:
            extensions: [js]
            mode: text/javascript
        css:
            extensions: [css]
            mode: text/css
        smarty:
            extensions: [tpl]
            mode: text/x-smarty
        xml:
            extensions: [xml]
            mode: application/xml
        json:
            extensions: [json]
            mode: application/json
        markdown:
            extensions: [md, markdown]
            mode: text/x-markdown

# Security Settings
security:
    encryption_key: _COOKIE_KEY_
    allowed_ips: []
    api_rate_limit: 100
    max_file_size: 10485760  # 10MB
    allowed_file_types:
        - php
        - js
        - css
        - tpl
        - xml
        - json
        - md
        - txt
        - jpg
        - png
        - gif
        - svg
    blocked_file_types:
        - exe
        - sh
        - bat
        - dll
        - so

================
File: config/routes.yml
================
# Admin Routes
admin_aimodulemaker_dashboard:
    path: aimodulemaker/dashboard
    methods: [GET]
    defaults:
        _controller: 'AdminRlAiModuleMakerController::dashboardAction'
        _legacy_controller: 'AdminRlAiModuleMaker'
        _legacy_link: 'AdminRlAiModuleMaker'

admin_aimodulemaker_list:
    path: aimodulemaker/modules
    methods: [GET]
    defaults:
        _controller: 'AdminRlAiModuleListController::listAction'
        _legacy_controller: 'AdminRlAiModuleList'
        _legacy_link: 'AdminRlAiModuleList'

admin_aimodulemaker_create:
    path: aimodulemaker/create
    methods: [GET, POST]
    defaults:
        _controller: 'AdminRlAiModuleMakerController::createAction'
        _legacy_controller: 'AdminRlAiModuleMaker'
        _legacy_link: 'AdminRlAiModuleMaker'

admin_aimodulemaker_edit:
    path: aimodulemaker/edit/{id}
    methods: [GET, POST]
    defaults:
        _controller: 'AdminRlAiModuleMakerController::editAction'
        _legacy_controller: 'AdminRlAiModuleMaker'
        _legacy_link: 'AdminRlAiModuleMaker'
    requirements:
        id: '\d+'

admin_aimodulemaker_delete:
    path: aimodulemaker/delete/{id}
    methods: [POST, DELETE]
    defaults:
        _controller: 'AdminRlAiModuleMakerController::deleteAction'
        _legacy_controller: 'AdminRlAiModuleMaker'
        _legacy_link: 'AdminRlAiModuleMaker'
    requirements:
        id: '\d+'

admin_aimodulemaker_settings:
    path: aimodulemaker/settings
    methods: [GET, POST]
    defaults:
        _controller: 'AdminRlAiSettingsController::indexAction'
        _legacy_controller: 'AdminRlAiSettings'
        _legacy_link: 'AdminRlAiSettings'

# API Routes
admin_aimodulemaker_ai_chat:
    path: aimodulemaker/api/chat
    methods: [POST]
    defaults:
        _controller: 'AdminRlAiModuleMakerController::aiChatAction'
        _legacy_controller: 'AdminRlAiModuleMaker'

admin_aimodulemaker_generate_code:
    path: aimodulemaker/api/generate
    methods: [POST]
    defaults:
        _controller: 'AdminRlAiModuleMakerController::generateCodeAction'
        _legacy_controller: 'AdminRlAiModuleMaker'

admin_aimodulemaker_analyze_code:
    path: aimodulemaker/api/analyze
    methods: [POST]
    defaults:
        _controller: 'AdminRlAiModuleMakerController::analyzeCodeAction'
        _legacy_controller: 'AdminRlAiModuleMaker'

# File Management Routes
admin_aimodulemaker_files:
    path: aimodulemaker/files/{id}
    methods: [GET]
    defaults:
        _controller: 'AdminRlAiModuleMakerController::filesAction'
        _legacy_controller: 'AdminRlAiModuleMaker'
    requirements:
        id: '\d+'

admin_aimodulemaker_file_content:
    path: aimodulemaker/file/{id}/{path}
    methods: [GET]
    defaults:
        _controller: 'AdminRlAiModuleMakerController::fileContentAction'
        _legacy_controller: 'AdminRlAiModuleMaker'
    requirements:
        id: '\d+'
        path: '.+'

admin_aimodulemaker_save_file:
    path: aimodulemaker/file/save/{id}/{path}
    methods: [POST]
    defaults:
        _controller: 'AdminRlAiModuleMakerController::saveFileAction'
        _legacy_controller: 'AdminRlAiModuleMaker'
    requirements:
        id: '\d+'
        path: '.+'

# Version Management Routes
admin_aimodulemaker_versions:
    path: aimodulemaker/versions/{id}
    methods: [GET]
    defaults:
        _controller: 'AdminRlAiModuleMakerController::versionsAction'
        _legacy_controller: 'AdminRlAiModuleMaker'
    requirements:
        id: '\d+'

admin_aimodulemaker_create_version:
    path: aimodulemaker/version/create/{id}
    methods: [POST]
    defaults:
        _controller: 'AdminRlAiModuleMakerController::createVersionAction'
        _legacy_controller: 'AdminRlAiModuleMaker'
    requirements:
        id: '\d+'

# GitHub Integration Routes
admin_aimodulemaker_github_sync:
    path: aimodulemaker/github/sync/{id}
    methods: [POST]
    defaults:
        _controller: 'AdminRlAiModuleMakerController::githubSyncAction'
        _legacy_controller: 'AdminRlAiModuleMaker'
    requirements:
        id: '\d+'

admin_aimodulemaker_github_webhook:
    path: aimodulemaker/github/webhook
    methods: [POST]
    defaults:
        _controller: 'AdminRlAiModuleMakerController::githubWebhookAction'
        _legacy_controller: 'AdminRlAiModuleMaker'

# Export/Import Routes
admin_aimodulemaker_export:
    path: aimodulemaker/export/{id}
    methods: [GET]
    defaults:
        _controller: 'AdminRlAiModuleMakerController::exportAction'
        _legacy_controller: 'AdminRlAiModuleMaker'
    requirements:
        id: '\d+'

admin_aimodulemaker_import:
    path: aimodulemaker/import
    methods: [POST]
    defaults:
        _controller: 'AdminRlAiModuleMakerController::importAction'
        _legacy_controller: 'AdminRlAiModuleMaker'

================
File: config/services.yml
================
services:
    _defaults:
        public: true
        autowire: true
        autoconfigure: true

    # Controllers
    PrestaShop\Module\RlAimodulemaker\Controller\Admin\:
        resource: '../controllers/admin/*'
        exclude: '../controllers/admin/index.php'

    PrestaShop\Module\RlAimodulemaker\Controller\Front\:
        resource: '../controllers/front/*'
        exclude: '../controllers/front/index.php'
        
    # Repositories
    PrestaShop\Module\RlAimodulemaker\Repository\:
        resource: '../classes/Database/*Repository.php'
        
    # AI Handlers
    PrestaShop\Module\RlAimodulemaker\AiHandler\:
        resource: '../classes/AiHandler/*Handler.php'
        
    # Git Handlers
    PrestaShop\Module\RlAimodulemaker\GitHandler\:
        resource: '../classes/GitHandler/*Handler.php'
        
    # Module Builder
    PrestaShop\Module\RlAimodulemaker\ModuleBuilder\:
        resource: '../classes/ModuleBuilder/*.php'

    # Specific Services
    prestashop.module.rl_aimodulemaker.module_builder:
        class: PrestaShop\Module\RlAimodulemaker\ModuleBuilder\ModuleGenerator
        arguments:
            $fileGenerator: '@prestashop.module.rl_aimodulemaker.file_generator'
            $validator: '@prestashop.module.rl_aimodulemaker.validation_handler'
            
    prestashop.module.rl_aimodulemaker.file_generator:
        class: PrestaShop\Module\RlAimodulemaker\ModuleBuilder\FileGenerator
        
    prestashop.module.rl_aimodulemaker.validation_handler:
        class: PrestaShop\Module\RlAimodulemaker\ModuleBuilder\ValidationHandler
        
    prestashop.module.rl_aimodulemaker.openai_handler:
        class: PrestaShop\Module\RlAimodulemaker\AiHandler\OpenAiHandler
        arguments:
            $apiRepository: '@prestashop.module.rl_aimodulemaker.api_repository'
            
    prestashop.module.rl_aimodulemaker.claude_handler:
        class: PrestaShop\Module\RlAimodulemaker\AiHandler\ClaudeHandler
        arguments:
            $apiRepository: '@prestashop.module.rl_aimodulemaker.api_repository'
            
    prestashop.module.rl_aimodulemaker.github_handler:
        class: PrestaShop\Module\RlAimodulemaker\GitHandler\GitHubHandler
        arguments:
            $apiRepository: '@prestashop.module.rl_aimodulemaker.api_repository'
            $moduleRepository: '@prestashop.module.rl_aimodulemaker.module_repository'
            
    # Repositories as Services
    prestashop.module.rl_aimodulemaker.api_repository:
        class: PrestaShop\Module\RlAimodulemaker\Repository\ApiKeyRepository
        
    prestashop.module.rl_aimodulemaker.module_repository:
        class: PrestaShop\Module\RlAimodulemaker\Repository\ModuleRepository
        
    prestashop.module.rl_aimodulemaker.version_repository:
        class: PrestaShop\Module\RlAimodulemaker\Repository\VersionRepository

    # Event Subscribers
    prestashop.module.rl_aimodulemaker.module_subscriber:
        class: PrestaShop\Module\RlAimodulemaker\Event\ModuleSubscriber
        tags:
            - { name: kernel.event_subscriber }
            
    prestashop.module.rl_aimodulemaker.github_subscriber:
        class: PrestaShop\Module\RlAimodulemaker\Event\GitHubSubscriber
        tags:
            - { name: kernel.event_subscriber }

    # Cache Services
    prestashop.module.rl_aimodulemaker.cache.file_cache:
        class: PrestaShop\Module\RlAimodulemaker\Cache\FileCache
        arguments:
            $cacheDir: '%kernel.cache_dir%/rl_aimodulemaker'
            
    prestashop.module.rl_aimodulemaker.cache.api_cache:
        class: PrestaShop\Module\RlAimodulemaker\Cache\ApiCache
        arguments:
            $cacheService: '@prestashop.module.rl_aimodulemaker.cache.file_cache'
            
    # Security Services
    prestashop.module.rl_aimodulemaker.security.api_authenticator:
        class: PrestaShop\Module\RlAimodulemaker\Security\ApiAuthenticator
        arguments:
            $apiRepository: '@prestashop.module.rl_aimodulemaker.api_repository'
            
    prestashop.module.rl_aimodulemaker.security.token_generator:
        class: PrestaShop\Module\RlAimodulemaker\Security\TokenGenerator
        arguments:
            $secret: '%kernel.secret%'

    # Utility Services
    prestashop.module.rl_aimodulemaker.utils.file_manager:
        class: PrestaShop\Module\RlAimodulemaker\Utils\FileManager
        arguments:
            $moduleDir: '%kernel.project_dir%/modules/rl_aimodulemaker'
            
    prestashop.module.rl_aimodulemaker.utils.code_analyzer:
        class: PrestaShop\Module\RlAimodulemaker\Utils\CodeAnalyzer
        
    prestashop.module.rl_aimodulemaker.utils.template_renderer:
        class: PrestaShop\Module\RlAimodulemaker\Utils\TemplateRenderer
        arguments:
            $twig: '@twig'

    # Export/Import Services
    prestashop.module.rl_aimodulemaker.export.module_exporter:
        class: PrestaShop\Module\RlAimodulemaker\Export\ModuleExporter
        arguments:
            $fileManager: '@prestashop.module.rl_aimodulemaker.utils.file_manager'
            
    prestashop.module.rl_aimodulemaker.export.module_importer:
        class: PrestaShop\Module\RlAimodulemaker\Export\ModuleImporter
        arguments:
            $fileManager: '@prestashop.module.rl_aimodulemaker.utils.file_manager'
            $moduleRepository: '@prestashop.module.rl_aimodulemaker.module_repository'

    # Logger Services
    prestashop.module.rl_aimodulemaker.logger.module_logger:
        class: PrestaShop\Module\RlAimodulemaker\Logger\ModuleLogger
        arguments:
            $logDir: '%kernel.logs_dir%/rl_aimodulemaker'

================
File: controllers/admin/AdminRlAiModuleListController.php
================
<?php
/**
 * Controller for managing AI-powered modules
 * @author Ljustema Sverige AB
 */

 namespace PrestaShop\Module\RlAimodulemaker\Controller\Admin;

 use PrestaShopBundle\Controller\Admin\FrameworkBundleAdminController;
 
 class AdminRlAiModuleListController extends FrameworkBundleAdminController
 {
    public function __construct()
    {
        $this->bootstrap = true;
        $this->table = 'rl_aimodulemaker_modules';
        $this->className = 'ModuleRepository';
        $this->lang = false;
        $this->addRowAction('edit');
        $this->addRowAction('delete');
        $this->addRowAction('export');
        $this->addRowAction('github');
        $this->addRowAction('vscode');

        parent::__construct();

        $this->fields_list = [
            'id' => [
                'title' => $this->l('ID'),
                'align' => 'center',
                'class' => 'fixed-width-xs'
            ],
            'name' => [
                'title' => $this->l('Module Name'),
                'filter_key' => 'a!name'
            ],
            'version' => [
                'title' => $this->l('Version'),
                'align' => 'center',
                'class' => 'fixed-width-sm'
            ],
            'status' => [
                'title' => $this->l('Status'),
                'align' => 'center',
                'class' => 'fixed-width-sm',
                'callback' => 'getStatusDisplay'
            ],
            'github_repo' => [
                'title' => $this->l('GitHub Repository'),
                'callback' => 'getGitHubLink'
            ],
            'date_add' => [
                'title' => $this->l('Created'),
                'type' => 'datetime'
            ],
            'date_upd' => [
                'title' => $this->l('Last Update'),
                'type' => 'datetime'
            ]
        ];

        $this->bulk_actions = [
            'delete' => [
                'text' => $this->l('Delete selected'),
                'confirm' => $this->l('Delete selected items?'),
                'icon' => 'icon-trash'
            ],
            'export' => [
                'text' => $this->l('Export selected'),
                'icon' => 'icon-cloud-download'
            ]
        ];

        $this->_select = 'a.*';
        $this->_orderBy = 'date_upd';
        $this->_orderWay = 'DESC';
    }

    public function initPageHeaderToolbar()
    {
        if (empty($this->display)) {
            $this->page_header_toolbar_btn['new_module'] = [
                'href' => self::$currentIndex.'&addmodule&token='.$this->token,
                'desc' => $this->l('Add New Module'),
                'icon' => 'process-icon-new'
            ];
            $this->page_header_toolbar_btn['import_module'] = [
                'href' => self::$currentIndex.'&importmodule&token='.$this->token,
                'desc' => $this->l('Import Module'),
                'icon' => 'process-icon-import'
            ];
        }

        parent::initPageHeaderToolbar();
    }

    public function renderList()
    {
        // Add custom CSS and JS for the list
        $this->addCSS($this->module->getPathUri().'views/css/admin.css');
        $this->addJS($this->module->getPathUri().'views/js/moduleList.js');

        return parent::renderList();
    }

    public function renderForm()
    {
        $this->fields_form = [
            'legend' => [
                'title' => $this->l('Module Information'),
                'icon' => 'icon-cogs'
            ],
            'input' => [
                [
                    'type' => 'text',
                    'label' => $this->l('Module Name'),
                    'name' => 'name',
                    'required' => true,
                    'desc' => $this->l('The technical name of your module')
                ],
                [
                    'type' => 'text',
                    'label' => $this->l('Version'),
                    'name' => 'version',
                    'required' => true
                ],
                [
                    'type' => 'text',
                    'label' => $this->l('GitHub Repository'),
                    'name' => 'github_repo',
                    'desc' => $this->l('GitHub repository URL')
                ],
                [
                    'type' => 'select',
                    'label' => $this->l('Status'),
                    'name' => 'status',
                    'options' => [
                        'query' => $this->getStatusOptions(),
                        'id' => 'id',
                        'name' => 'name'
                    ]
                ]
            ],
            'submit' => [
                'title' => $this->l('Save')
            ]
        ];

        return parent::renderForm();
    }

    protected function getStatusOptions()
    {
        return [
            ['id' => 'development', 'name' => $this->l('In Development')],
            ['id' => 'testing', 'name' => $this->l('Testing')],
            ['id' => 'production', 'name' => $this->l('Production')],
            ['id' => 'archived', 'name' => $this->l('Archived')]
        ];
    }

    public function getStatusDisplay($status, $row)
    {
        $statusClasses = [
            'development' => 'info',
            'testing' => 'warning',
            'production' => 'success',
            'archived' => 'secondary'
        ];

        $class = isset($statusClasses[$status]) ? $statusClasses[$status] : 'default';
        return '<span class="badge badge-'.$class.'">'.$status.'</span>';
    }

    public function getGitHubLink($url, $row)
    {
        if (empty($url)) {
            return '-';
        }
        return '<a href="'.$url.'" target="_blank" rel="noopener noreferrer">'.$url.'</a>';
    }

    public function processSave()
    {
        $object = parent::processSave();

        if (Validate::isLoadedObject($object)) {
            // Update GitHub repository if needed
            if (Tools::getValue('github_repo')) {
                $gitHandler = new GitHubHandler();
                $gitHandler->updateRepository($object);
            }

            // Generate VS Code workspace if needed
            if (Tools::getValue('generate_workspace')) {
                $this->generateVSCodeWorkspace($object);
            }
        }

        return $object;
    }

    protected function generateVSCodeWorkspace($module)
    {
        try {
            $workspace = [
                'folders' => [
                    [
                        'path' => $module->local_path
                    ]
                ],
                'settings' => [
                    'files.exclude' => [
                        '**/.git' => true,
                        '**/.DS_Store' => true
                    ],
                    'php.suggest.basic' => true
                ]
            ];
    
            $workspaceFile = $module->local_path . '/' . $module->name . '.code-workspace';
            file_put_contents($workspaceFile, json_encode($workspace, JSON_PRETTY_PRINT));
    
            return true;
        } catch (Exception $e) {
            $this->errors[] = $this->l('Failed to generate VS Code workspace: ') . $e->getMessage();
            return false;
        }
    }

    public function processExport()
    {
        $moduleId = Tools::getValue('id_module');
        
        if (!$moduleId) {
            $this->errors[] = $this->l('No module selected for export');
            return false;
        }

        try {
            $module = new ModuleRepository($moduleId);
            $zipFile = $this->module->getLocalPath() . 'export/' . $module->name . '.zip';
            
            // Create export directory if it doesn't exist
            if (!file_exists(dirname($zipFile))) {
                mkdir(dirname($zipFile), 0777, true);
            }

            $zip = new ZipArchive();
            if ($zip->open($zipFile, ZipArchive::CREATE) !== true) {
                throw new Exception($this->l('Unable to create ZIP file'));
            }

            // Add module files to ZIP
            $this->addFolderToZip($zip, $module->local_path, '');
            $zip->close();

            // Send file to browser
            header('Content-Type: application/zip');
            header('Content-Disposition: attachment; filename="'.$module->name.'.zip"');
            header('Content-Length: ' . filesize($zipFile));
            readfile($zipFile);
            unlink($zipFile);
            exit;

        } catch (Exception $e) {
            $this->errors[] = $this->l('Export failed: ') . $e->getMessage();
            return false;
        }
    }

    protected function addFolderToZip($zip, $folder, $zipFolder)
    {
        $handle = opendir($folder);
        while (false !== ($entry = readdir($handle))) {
            if ($entry != '.' && $entry != '..') {
                $filePath = $folder . '/' . $entry;
                $zipPath = $zipFolder . ($zipFolder ? '/' : '') . $entry;

                if (is_file($filePath)) {
                    $zip->addFile($filePath, $zipPath);
                } elseif (is_dir($filePath)) {
                    $zip->addEmptyDir($zipPath);
                    $this->addFolderToZip($zip, $filePath, $zipPath);
                }
            }
        }
        closedir($handle);
    }
}

================
File: controllers/admin/AdminRlAiModuleMakerController.php
================
<?php
/**
 * Main controller for AI Module Maker
 * @author Ljustema Sverige AB
 */
namespace PrestaShop\Module\RlAimodulemaker\Controller\Admin;

use PrestaShopBundle\Controller\Admin\FrameworkBundleAdminController;

class AdminRlAiModuleMakerController extends FrameworkBundleAdminController
{
    public function __construct()
    {
        $this->bootstrap = true;
        $this->className = 'Configuration';
        $this->table = 'configuration';

        parent::__construct();

        $this->toolbar_title = $this->l('AI Module Maker');
    }

    public function initContent()
    {
        parent::initContent();

        $this->context->smarty->assign([
            'bootstrap' => true,
            'moduleImgUri' => $this->module->getPathUri().'views/img/',
            'moduleActions' => $this->getModuleActions(),
            'apiStatus' => $this->checkApiStatus(),
        ]);

        $this->setTemplate('module_dashboard.tpl');
    }

    protected function getModuleActions()
    {
        return [
            [
                'title' => $this->l('Create New Module'),
                'description' => $this->l('Start creating a new PrestaShop module with AI assistance'),
                'link' => $this->context->link->getAdminLink('AdminRlAiModuleMaker').'&action=createModule',
                'icon' => 'add_circle',
            ],
            [
                'title' => $this->l('Import Existing Module'),
                'description' => $this->l('Import and manage an existing module with AI and Git'),
                'link' => $this->context->link->getAdminLink('AdminRlAiModuleMaker').'&action=importModule',
                'icon' => 'cloud_upload',
            ],
            [
                'title' => $this->l('Module List'),
                'description' => $this->l('View and manage your AI-powered modules'),
                'link' => $this->context->link->getAdminLink('AdminRlAiModuleList'),
                'icon' => 'list',
            ],
            [
                'title' => $this->l('Settings'),
                'description' => $this->l('Configure API keys and module preferences'),
                'link' => $this->context->link->getAdminLink('AdminRlAiSettings'),
                'icon' => 'settings',
            ],
        ];
    }

    protected function checkApiStatus()
    {
        $apiRepository = new ApiKeyRepository();
        return [
            'openai' => $apiRepository->isConfigured('openai'),
            'claude' => $apiRepository->isConfigured('claude'),
            'github' => $apiRepository->isConfigured('github'),
        ];
    }

    public function postProcess()
    {
        parent::postProcess();

        if (Tools::isSubmit('action')) {
            switch (Tools::getValue('action')) {
                case 'createModule':
                    $this->processCreateModule();
                    break;
                    
                case 'importModule':
                    $this->processImportModule();
                    break;

                case 'generateCode':
                    $this->ajaxProcessGenerateCode();
                    break;

                case 'aiChat':
                    $this->ajaxProcessAiChat();
                    break;
            }
        }
    }

    protected function processCreateModule()
    {
        $this->context->smarty->assign([
            'aiModels' => $this->getAvailableAiModels(),
            'moduleTypes' => $this->getModuleTypes(),
            'createModuleToken' => $this->generateCreateModuleToken(),
        ]);

        $this->setTemplate('create_module.tpl');
    }

    protected function processImportModule()
    {
        $this->context->smarty->assign([
            'maxUploadSize' => $this->getMaxUploadSize(),
            'importModuleToken' => $this->generateImportModuleToken(),
        ]);

        $this->setTemplate('import_module.tpl');
    }

    public function ajaxProcessGenerateCode()
    {
        header('Content-Type: application/json');

        try {
            $prompt = Tools::getValue('prompt');
            $aiModel = Tools::getValue('model');
            $moduleContext = Tools::getValue('context');

            $aiHandler = $this->getAiHandler($aiModel);
            $generatedCode = $aiHandler->generateCode($prompt, $moduleContext);

            die(json_encode([
                'success' => true,
                'code' => $generatedCode,
            ]));
        } catch (Exception $e) {
            die(json_encode([
                'success' => false,
                'error' => $e->getMessage(),
            ]));
        }
    }

    public function ajaxProcessAiChat()
    {
        header('Content-Type: application/json');

        try {
            $message = Tools::getValue('message');
            $aiModel = Tools::getValue('model');
            $conversation = Tools::getValue('conversation', []);

            $aiHandler = $this->getAiHandler($aiModel);
            $response = $aiHandler->chat($message, $conversation);

            die(json_encode([
                'success' => true,
                'response' => $response,
            ]));
        } catch (Exception $e) {
            die(json_encode([
                'success' => false,
                'error' => $e->getMessage(),
            ]));
        }
    }

    protected function getAiHandler($model)
    {
        switch ($model) {
            case 'openai':
                return new OpenAiHandler();
            case 'claude':
                return new ClaudeHandler();
            default:
                throw new Exception('Invalid AI model specified');
        }
    }

    protected function getAvailableAiModels()
    {
        $apiRepository = new ApiKeyRepository();
        $models = [];

        if ($apiRepository->isConfigured('openai')) {
            $models[] = ['id' => 'openai', 'name' => 'OpenAI GPT-4'];
        }
        if ($apiRepository->isConfigured('claude')) {
            $models[] = ['id' => 'claude', 'name' => 'Anthropic Claude'];
        }

        return $models;
    }

    protected function getModuleTypes()
    {
        return [
            ['id' => 'payment', 'name' => $this->l('Payment Module')],
            ['id' => 'shipping', 'name' => $this->l('Shipping Module')],
            ['id' => 'analytics', 'name' => $this->l('Analytics Module')],
            ['id' => 'marketplace', 'name' => $this->l('Marketplace Module')],
            ['id' => 'seo', 'name' => $this->l('SEO Module')],
            ['id' => 'custom', 'name' => $this->l('Custom Module')],
        ];
    }

    protected function getMaxUploadSize()
    {
        return min(
            $this->convertPHPSizeToBytes(ini_get('upload_max_filesize')),
            $this->convertPHPSizeToBytes(ini_get('post_max_size'))
        );
    }

    protected function convertPHPSizeToBytes($sSize)
    {
        $sSuffix = strtoupper(substr($sSize, -1));
        if (!in_array($sSuffix, ['P','T','G','M','K'])) {
            return (int)$sSize;
        }
        $iValue = substr($sSize, 0, -1);
        switch ($sSuffix) {
            case 'P':
                $iValue *= 1024;
            case 'T':
                $iValue *= 1024;
            case 'G':
                $iValue *= 1024;
            case 'M':
                $iValue *= 1024;
            case 'K':
                $iValue *= 1024;
                break;
        }
        return (int)$iValue;
    }

    protected function generateCreateModuleToken()
    {
        return Tools::encrypt('create_module_'.time());
    }

    protected function generateImportModuleToken()
    {
        return Tools::encrypt('import_module_'.time());
    }
}

================
File: controllers/admin/AdminRlAiSettingsController.php
================
<?php
/**
 * Controller for managing AI Module Maker settings
 * @author Ljustema Sverige AB
 */
namespace PrestaShop\Module\RlAimodulemaker\Controller\Admin;

use PrestaShopBundle\Controller\Admin\FrameworkBundleAdminController;

class AdminRlAiSettingsController extends FrameworkBundleAdminController
{
    public function __construct()
    {
        $this->bootstrap = true;
        $this->className = 'Configuration';
        $this->table = 'configuration';

        parent::__construct();

        $this->toolbar_title = $this->l('AI Module Maker Settings');
    }

    public function initContent()
    {
        parent::initContent();

        // Hämta aktuella inställningar
        $apiRepository = new ApiKeyRepository();
        $currentSettings = $apiRepository->getAllApiKeys();

        $this->context->smarty->assign([
            'settingsForm' => $this->renderSettingsForm(),
            'currentSettings' => $currentSettings,
            'apiTestResults' => $this->getApiTestResults(),
            'gitHubRepoPath' => $this->getDefaultGitHubRepoPath(),
            'baseModulePath' => _PS_MODULE_DIR_
        ]);

        $this->setTemplate('settings.tpl');
    }

    protected function renderSettingsForm()
    {
        $helper = new HelperForm();

        $helper->show_toolbar = false;
        $helper->table = $this->table;
        $helper->module = $this;
        $helper->default_form_language = $this->context->language->id;
        $helper->allow_employee_form_lang = Configuration::get('PS_BO_ALLOW_EMPLOYEE_FORM_LANG', 0);

        $helper->identifier = $this->identifier;
        $helper->submit_action = 'submitRlAiSettings';
        $helper->currentIndex = $this->context->link->getAdminLink('AdminRlAiSettings');
        $helper->token = Tools::getAdminTokenLite('AdminRlAiSettings');

        $helper->tpl_vars = [
            'fields_value' => $this->getConfigFormValues(),
            'languages' => $this->context->controller->getLanguages(),
            'id_language' => $this->context->language->id,
        ];

        return $helper->generateForm([$this->getConfigForm()]);
    }

    protected function getConfigForm()
    {
        return [
            'form' => [
                'legend' => [
                    'title' => $this->l('Settings'),
                    'icon' => 'icon-cogs',
                ],
                'tabs' => [
                    'api' => $this->l('API Settings'),
                    'github' => $this->l('GitHub Settings'),
                    'general' => $this->l('General Settings'),
                ],
                'input' => [
                    // API Settings Tab
                    [
                        'tab' => 'api',
                        'type' => 'text',
                        'prefix' => '<i class="icon icon-key"></i>',
                        'name' => 'RLAIMODULEMAKER_OPENAI_API_KEY',
                        'label' => $this->l('OpenAI API Key'),
                        'desc' => $this->l('Enter your OpenAI API key'),
                        'class' => 'fixed-width-xxl',
                        'hint' => $this->l('Get your API key from OpenAI dashboard'),
                    ],
                    [
                        'tab' => 'api',
                        'type' => 'select',
                        'name' => 'RLAIMODULEMAKER_OPENAI_MODEL',
                        'label' => $this->l('OpenAI Model'),
                        'options' => [
                            'query' => [
                                ['id' => 'gpt-4', 'name' => 'GPT-4'],
                                ['id' => 'gpt-3.5-turbo', 'name' => 'GPT-3.5 Turbo'],
                            ],
                            'id' => 'id',
                            'name' => 'name'
                        ]
                    ],
                    [
                        'tab' => 'api',
                        'type' => 'text',
                        'prefix' => '<i class="icon icon-key"></i>',
                        'name' => 'RLAIMODULEMAKER_CLAUDE_API_KEY',
                        'label' => $this->l('Claude API Key'),
                        'desc' => $this->l('Enter your Anthropic Claude API key'),
                        'class' => 'fixed-width-xxl',
                    ],
                    [
                        'tab' => 'api',
                        'type' => 'select',
                        'name' => 'RLAIMODULEMAKER_CLAUDE_MODEL',
                        'label' => $this->l('Claude Model'),
                        'options' => [
                            'query' => [
                                ['id' => 'claude-3-opus-20240229', 'name' => 'Claude-3 Opus'],
                                ['id' => 'claude-3-sonnet-20240229', 'name' => 'Claude-3 Sonnet'],
                            ],
                            'id' => 'id',
                            'name' => 'name'
                        ]
                    ],
                    
                    // GitHub Settings Tab
                    [
                        'tab' => 'github',
                        'type' => 'text',
                        'prefix' => '<i class="icon icon-github"></i>',
                        'name' => 'RLAIMODULEMAKER_GITHUB_TOKEN',
                        'label' => $this->l('GitHub Personal Access Token'),
                        'desc' => $this->l('Enter your GitHub personal access token'),
                        'class' => 'fixed-width-xxl',
                    ],
                    [
                        'tab' => 'github',
                        'type' => 'text',
                        'name' => 'RLAIMODULEMAKER_GITHUB_USERNAME',
                        'label' => $this->l('GitHub Username'),
                        'desc' => $this->l('Your GitHub username for repository creation'),
                    ],
                    [
                        'tab' => 'github',
                        'type' => 'text',
                        'name' => 'RLAIMODULEMAKER_GITHUB_ORG',
                        'label' => $this->l('GitHub Organization'),
                        'desc' => $this->l('Optional: GitHub organization name'),
                    ],
                    
                    // General Settings Tab
                    [
                        'tab' => 'general',
                        'type' => 'switch',
                        'name' => 'RLAIMODULEMAKER_AUTO_COMMIT',
                        'label' => $this->l('Auto Commit Changes'),
                        'desc' => $this->l('Automatically commit changes to GitHub'),
                        'values' => [
                            [
                                'id' => 'active_on',
                                'value' => 1,
                                'label' => $this->l('Enabled')
                            ],
                            [
                                'id' => 'active_off',
                                'value' => 0,
                                'label' => $this->l('Disabled')
                            ]
                        ]
                    ],
                    [
                        'tab' => 'general',
                        'type' => 'text',
                        'name' => 'RLAIMODULEMAKER_DEFAULT_AUTHOR',
                        'label' => $this->l('Default Module Author'),
                        'desc' => $this->l('Default author name for new modules'),
                        'value' => 'Ljustema Sverige AB'
                    ],
                ],
                'submit' => [
                    'title' => $this->l('Save'),
                    'class' => 'btn btn-default pull-right'
                ],
            ],
        ];
    }

    protected function getConfigFormValues()
    {
        $fields = [
            'RLAIMODULEMAKER_OPENAI_API_KEY' => Configuration::get('RLAIMODULEMAKER_OPENAI_API_KEY'),
            'RLAIMODULEMAKER_OPENAI_MODEL' => Configuration::get('RLAIMODULEMAKER_OPENAI_MODEL', 'gpt-4'),
            'RLAIMODULEMAKER_CLAUDE_API_KEY' => Configuration::get('RLAIMODULEMAKER_CLAUDE_API_KEY'),
            'RLAIMODULEMAKER_CLAUDE_MODEL' => Configuration::get('RLAIMODULEMAKER_CLAUDE_MODEL', 'claude-3-opus-20240229'),
            'RLAIMODULEMAKER_GITHUB_TOKEN' => Configuration::get('RLAIMODULEMAKER_GITHUB_TOKEN'),
            'RLAIMODULEMAKER_GITHUB_USERNAME' => Configuration::get('RLAIMODULEMAKER_GITHUB_USERNAME'),
            'RLAIMODULEMAKER_GITHUB_ORG' => Configuration::get('RLAIMODULEMAKER_GITHUB_ORG'),
            'RLAIMODULEMAKER_AUTO_COMMIT' => Configuration::get('RLAIMODULEMAKER_AUTO_COMMIT', 1),
            'RLAIMODULEMAKER_DEFAULT_AUTHOR' => Configuration::get('RLAIMODULEMAKER_DEFAULT_AUTHOR', 'Ljustema Sverige AB'),
        ];

        return $fields;
    }

    public function postProcess()
    {
        if (Tools::isSubmit('submitRlAiSettings')) {
            $this->processConfiguration();
        }

        if (Tools::isSubmit('testApi')) {
            $this->processApiTest();
        }

        parent::postProcess();
    }

    protected function processConfiguration()
    {
        $form_values = $this->getConfigFormValues();

        foreach (array_keys($form_values) as $key) {
            Configuration::updateValue($key, Tools::getValue($key));
        }

        // Uppdatera API nycklar säkert
        $apiRepository = new ApiKeyRepository();
        
        if ($openaiKey = Tools::getValue('RLAIMODULEMAKER_OPENAI_API_KEY')) {
            $apiRepository->updateApiKey('openai', $openaiKey);
        }
        
        if ($claudeKey = Tools::getValue('RLAIMODULEMAKER_CLAUDE_API_KEY')) {
            $apiRepository->updateApiKey('claude', $claudeKey);
        }
        
        if ($githubToken = Tools::getValue('RLAIMODULEMAKER_GITHUB_TOKEN')) {
            $apiRepository->updateApiKey('github', $githubToken);
        }

        $this->confirmations[] = $this->l('Settings updated successfully');
    }

    protected function processApiTest()
    {
        $apiType = Tools::getValue('api_type');
        $results = [];

        try {
            switch ($apiType) {
                case 'openai':
                    $handler = new OpenAiHandler();
                    $results = $handler->testConnection();
                    break;
                    
                case 'claude':
                    $handler = new ClaudeHandler();
                    $results = $handler->testConnection();
                    break;
                    
                case 'github':
                    $handler = new GitHubHandler();
                    $results = $handler->testConnection();
                    break;
            }

            $this->confirmations[] = sprintf($this->l('Successfully tested %s API connection'), $apiType);
            
        } catch (Exception $e) {
            $this->errors[] = sprintf($this->l('Failed to test %s API: %s'), $apiType, $e->getMessage());
        }

        return $results;
    }

    protected function getApiTestResults()
    {
        $results = [];
        $apiRepository = new ApiKeyRepository();

        foreach (['openai', 'claude', 'github'] as $api) {
            $results[$api] = [
                'configured' => $apiRepository->isConfigured($api),
                'lastTest' => Configuration::get('RLAIMODULEMAKER_' . strtoupper($api) . '_LAST_TEST'),
                'status' => Configuration::get('RLAIMODULEMAKER_' . strtoupper($api) . '_STATUS')
            ];
        }

        return $results;
    }

    protected function getDefaultGitHubRepoPath()
    {
        $username = Configuration::get('RLAIMODULEMAKER_GITHUB_USERNAME');
        $org = Configuration::get('RLAIMODULEMAKER_GITHUB_ORG');
        
        return ($org ? $org : $username) . '/prestashop-modules';
    }
}

================
File: controllers/front/api.php
================
<?php
/**
 * API Controller for AI Module Maker
 * @author Ljustema Sverige AB
 */

class Rl_aimodulemakerApiModuleFrontController extends ModuleFrontController
{
    /** @var bool */
    public $ajax = true;
    
    /** @var bool */
    protected $useSSL = true;

    public function init()
    {
        parent::init();
        
        // Säkerställ att anropet är autentiserat
        if (!$this->isAuthenticated()) {
            $this->ajaxDie(json_encode([
                'success' => false,
                'error' => 'Unauthorized access'
            ]));
        }
    }

    public function initContent()
    {
        parent::initContent();

        $action = Tools::getValue('action');
        $response = [];

        try {
            switch ($action) {
                case 'generate_code':
                    $response = $this->handleGenerateCode();
                    break;

                case 'analyze_module':
                    $response = $this->handleModuleAnalysis();
                    break;

                case 'git_operation':
                    $response = $this->handleGitOperation();
                    break;

                case 'save_module':
                    $response = $this->handleSaveModule();
                    break;

                case 'ai_chat':
                    $response = $this->handleAiChat();
                    break;

                default:
                    throw new Exception('Invalid action specified');
            }

            $this->ajaxDie(json_encode([
                'success' => true,
                'data' => $response
            ]));

        } catch (Exception $e) {
            $this->ajaxDie(json_encode([
                'success' => false,
                'error' => $e->getMessage()
            ]));
        }
    }

    protected function isAuthenticated()
    {
        // Kontrollera API-nyckel och admin-token
        $apiKey = Tools::getValue('api_key');
        $token = Tools::getValue('token');

        if (!$apiKey || !$token) {
            return false;
        }

        // Verifiera admin token
        if (!Tools::isPrestashopToken($token)) {
            return false;
        }

        // Verifiera API nyckel mot databasen
        $apiRepository = new ApiKeyRepository();
        return $apiRepository->validateApiKey($apiKey);
    }

    protected function handleGenerateCode()
    {
        $prompt = Tools::getValue('prompt');
        $context = Tools::getValue('context');
        $model = Tools::getValue('model', 'gpt-4');

        // Validera input
        if (!$prompt) {
            throw new Exception('Prompt is required');
        }

        // Välj AI handler baserat på model
        $aiHandler = $this->getAiHandler($model);
        
        // Generera kod
        $generatedCode = $aiHandler->generateCode($prompt, $context);

        return [
            'code' => $generatedCode,
            'model' => $model
        ];
    }

    protected function handleModuleAnalysis()
    {
        $moduleId = (int)Tools::getValue('module_id');
        $analysisType = Tools::getValue('type', 'full');

        if (!$moduleId) {
            throw new Exception('Module ID is required');
        }

        $moduleRepo = new ModuleRepository();
        $module = $moduleRepo->getById($moduleId);

        if (!$module) {
            throw new Exception('Module not found');
        }

        // Utför analys baserat på typ
        switch ($analysisType) {
            case 'code_quality':
                return $this->analyzeCodeQuality($module);
                
            case 'security':
                return $this->analyzeModuleSecurity($module);
                
            case 'performance':
                return $this->analyzeModulePerformance($module);
                
            case 'full':
            default:
                return [
                    'code_quality' => $this->analyzeCodeQuality($module),
                    'security' => $this->analyzeModuleSecurity($module),
                    'performance' => $this->analyzeModulePerformance($module)
                ];
        }
    }

    protected function handleGitOperation()
    {
        $operation = Tools::getValue('git_operation');
        $moduleId = (int)Tools::getValue('module_id');
        $message = Tools::getValue('message');

        if (!$moduleId || !$operation) {
            throw new Exception('Module ID and operation are required');
        }

        $gitHandler = new GitHubHandler();
        
        switch ($operation) {
            case 'commit':
                return $gitHandler->commit($moduleId, $message);
                
            case 'push':
                return $gitHandler->push($moduleId);
                
            case 'pull':
                return $gitHandler->pull($moduleId);
                
            case 'create_branch':
                $branchName = Tools::getValue('branch_name');
                return $gitHandler->createBranch($moduleId, $branchName);
                
            default:
                throw new Exception('Invalid Git operation');
        }
    }

    protected function handleSaveModule()
    {
        $moduleData = Tools::getValue('module_data');
        
        if (!$moduleData || !is_array($moduleData)) {
            throw new Exception('Invalid module data');
        }

        $moduleRepo = new ModuleRepository();
        
        // Om det är en uppdatering
        if (isset($moduleData['id'])) {
            $module = $moduleRepo->update($moduleData['id'], $moduleData);
        } 
        // Om det är en ny modul
        else {
            $module = $moduleRepo->create($moduleData);
        }

        return [
            'module_id' => $module->id,
            'status' => 'saved'
        ];
    }

    protected function handleAiChat()
    {
        $message = Tools::getValue('message');
        $conversation = Tools::getValue('conversation', []);
        $model = Tools::getValue('model', 'gpt-4');
        $moduleId = (int)Tools::getValue('module_id');

        if (!$message) {
            throw new Exception('Message is required');
        }

        $aiHandler = $this->getAiHandler($model);
        
        // Om ett modul-id finns, lägg till modulkontext
        if ($moduleId) {
            $moduleRepo = new ModuleRepository();
            $module = $moduleRepo->getById($moduleId);
            if ($module) {
                $conversation = array_merge($this->getModuleContext($module), $conversation);
            }
        }

        $response = $aiHandler->chat($message, $conversation);

        return [
            'response' => $response,
            'model' => $model
        ];
    }

    protected function getAiHandler($model)
    {
        switch ($model) {
            case 'gpt-4':
            case 'gpt-3.5-turbo':
                return new OpenAiHandler();
                
            case 'claude-3-opus-20240229':
            case 'claude-3-sonnet-20240229':
                return new ClaudeHandler();
                
            default:
                throw new Exception('Invalid AI model specified');
        }
    }

    protected function analyzeCodeQuality($module)
    {
        // Implementera kodkvalitetsanalys
        $analyzer = new CodeQualityAnalyzer();
        return $analyzer->analyze($module->getFiles());
    }

    protected function analyzeModuleSecurity($module)
    {
        // Implementera säkerhetsanalys
        $analyzer = new SecurityAnalyzer();
        return $analyzer->analyze($module->getFiles());
    }

    protected function analyzeModulePerformance($module)
    {
        // Implementera prestanda-analys
        $analyzer = new PerformanceAnalyzer();
        return $analyzer->analyze($module->getFiles());
    }

    protected function getModuleContext($module)
    {
        return [
            'module_name' => $module->name,
            'file_structure' => $module->getFileStructure(),
            'dependencies' => $module->getDependencies(),
            'hooks' => $module->getHooks()
        ];
    }
}

================
File: index.php
================
<?php
header('Expires: Mon, 26 Jul 1997 05:00:00 GMT');
header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT');
header('Cache-Control: no-store, no-cache, must-revalidate');
header('Cache-Control: post-check=0, pre-check=0', false);
header('Pragma: no-cache');
header('Location: ../');
exit;

================
File: license.txt
================
Commercial License

Copyright (c) 2025 Ljustema Sverige AB

All rights reserved.

This software is the proprietary information of Ljustema Sverige AB. Use is subject to license terms.

This license agreement ("License") is a legal agreement between you (either an individual or a single entity) and Ljustema Sverige AB for the software product identified above, which includes computer software and may include associated media, printed materials, and "online" or electronic documentation ("Software Product").

By installing, copying, or otherwise using the Software Product, you agree to be bound by the terms of this License. If you do not agree to the terms of this License, do not install or use the Software Product.

1. GRANT OF LICENSE
Ljustema Sverige AB grants you the following rights provided that you comply with all terms and conditions of this License:
- Installation and Use: You may install and use one copy of the Software Product on a single PrestaShop installation.
- Reproduction and Distribution: You may not distribute copies of the Software Product to third parties.
- Rental: You may not rent, lease, or lend the Software Product.

2. COPYRIGHT
All title and copyrights in and to the Software Product (including but not limited to any images, text, and "applets" incorporated into the Software Product), the accompanying printed materials, and any copies of the Software Product are owned by Ljustema Sverige AB. The Software Product is protected by copyright laws and international treaty provisions.

3. DESCRIPTION OF OTHER RIGHTS AND LIMITATIONS
- Limitations on Reverse Engineering, Decompilation, and Disassembly: You may not reverse engineer, decompile, or disassemble the Software Product.
- Separation of Components: The Software Product is licensed as a single product. Its component parts may not be separated for use on more than one computer.
- Support Services: Ljustema Sverige AB may provide you with support services related to the Software Product. Use of Support Services is governed by Ljustema Sverige AB policies and programs.

4. TERMINATION
Without prejudice to any other rights, Ljustema Sverige AB may terminate this License if you fail to comply with the terms and conditions of this License. In such event, you must destroy all copies of the Software Product.

5. NO WARRANTIES
Ljustema Sverige AB expressly disclaims any warranty for the Software Product. The Software Product and any related documentation is provided "as is" without warranty of any kind, either express or implied.

6. LIMITATION OF LIABILITY
In no event shall Ljustema Sverige AB be liable for any damages whatsoever arising out of the use of or inability to use this Software Product.

For questions about this license or to purchase additional licenses, please contact:
Ljustema Sverige AB
info@ljustema.se

================
File: phpunit.xml.dist
================
<?xml version="1.0" encoding="UTF-8"?>
<phpunit
    bootstrap="tests/bootstrap.php"
    colors="true"
    convertErrorsToExceptions="true"
    convertNoticesToExceptions="true"
    convertWarningsToExceptions="true"
    processIsolation="false"
    stopOnFailure="false"
    verbose="true">
    <testsuites>
        <testsuite name="Unit">
            <directory suffix="Test.php">./tests/Unit</directory>
        </testsuite>
    </testsuites>
    <filter>
        <whitelist processUncoveredFilesFromWhitelist="true">
            <directory suffix=".php">./classes</directory>
            <directory suffix=".php">./controllers</directory>
            <exclude>
                <directory>./vendor</directory>
                <directory>./tests</directory>
            </exclude>
        </whitelist>
    </filter>
    <php>
        <env name="APP_ENV" value="testing"/>
        <env name="CACHE_DRIVER" value="array"/>
    </php>
</phpunit>

================
File: README.md
================
# AI Module Maker for PrestaShop

A commercial product by Ljustema Sverige AB

## Description
AI Module Maker is a professional-grade PrestaShop module that helps you create, manage, and maintain PrestaShop modules with AI assistance. It provides seamless integration with OpenAI and Claude for intelligent code generation, and GitHub for version control.

## Key Features
- AI-powered module creation
- GitHub integration for version control
- Intelligent code generation and optimization
- Module version tracking and management
- VS Code integration
- Automatic documentation generation
- Code quality analysis
- Professional support

## Requirements
- PrestaShop 1.7 or later
- PHP 7.2 or later
- MySQL 5.6 or later
- OpenAI API key and/or Claude API key
- GitHub API key

## Installation
1. Upload the module to your PrestaShop modules directory
2. Install the module through PrestaShop admin panel
3. Configure API keys in the module settings
4. Start creating AI-powered modules!

## Configuration
After installation, you need to:
1. Set up your API keys (OpenAI/Claude/GitHub)
2. Configure GitHub repository settings
3. Set up your preferred AI model settings

## Usage
1. Go to Improve > AI Module Maker in your PrestaShop admin panel
2. Choose "Create New Module" or "Import Existing Module"
3. Follow the wizard steps to create or modify your module
4. Use the AI chat interface to discuss and refine your module
5. Generate and download your module

## Support
For support and assistance, please contact our technical support team at:
Ljustema Sverige AB
[Contact Information]

## License
This is a commercial product of Ljustema Sverige AB. Usage is subject to license terms.
Copyright © 2024 Ljustema Sverige AB. All rights reserved.

================
File: rl_aimodulemaker.php
================
<?php
if (!defined('_PS_VERSION_')) {
    exit;
}

require_once _PS_MODULE_DIR_ . 'rl_aimodulemaker/classes/AiHandler/AiHandlerInterface.php';
require_once _PS_MODULE_DIR_ . 'rl_aimodulemaker/classes/GitHandler/GitHandlerInterface.php';
require_once _PS_MODULE_DIR_ . 'rl_aimodulemaker/classes/ModuleBuilder/ModuleGenerator.php';
require_once _PS_MODULE_DIR_ . 'rl_aimodulemaker/classes/Database/ApiKeyRepository.php';
require_once __DIR__ . '/vendor/autoload.php';

class Rl_aimodulemaker extends Module
{
    public function __construct()
    {
        $this->name = 'rl_aimodulemaker';
        $this->tab = 'administration';
        $this->version = '1.0.0';
        $this->author = 'Ljustema Sverige AB';
        $this->need_instance = 1;
        $this->bootstrap = true;
        $this->ps_versions_compliancy = ['min' => '1.7', 'max' => _PS_VERSION_];

        parent::__construct();

        $this->displayName = $this->l('AI Module Maker');
        $this->description = $this->l('Create and manage PrestaShop modules with AI assistance');
    }

    public function install()
    {
        include(dirname(__FILE__).'/sql/install.php');
        
        return parent::install() &&
            $this->installTab() &&
            $this->registerHook('actionAdminControllerSetMedia') &&
            $this->createTables();
    }

    public function uninstall()
    {
        include(dirname(__FILE__).'/sql/uninstall.php');
        
        return parent::uninstall() &&
            $this->uninstallTab() &&
            $this->dropTables();
    }

    private function installTab()
    {
        $tabs = [
            [
                'class_name' => 'AdminRlAiModuleMaker',
                'visible' => true,
                'name' => 'AI Module Maker',
                'parent_class_name' => 'IMPROVE',
            ],
            [
                'class_name' => 'AdminRlAiModuleList',
                'visible' => true,
                'name' => 'Module List',
                'parent_class_name' => 'AdminRlAiModuleMaker',
            ],
            [
                'class_name' => 'AdminRlAiSettings',
                'visible' => true,
                'name' => 'Settings',
                'parent_class_name' => 'AdminRlAiModuleMaker',
            ],
        ];

        foreach ($tabs as $tab) {
            $adminTab = new Tab();
            $adminTab->active = $tab['visible'];
            $adminTab->class_name = $tab['class_name'];
            $adminTab->name = array();
            foreach (Language::getLanguages(true) as $lang) {
                $adminTab->name[$lang['id_lang']] = $tab['name'];
            }
            $adminTab->id_parent = (int)Tab::getIdFromClassName($tab['parent_class_name']);
            $adminTab->module = $this->name;
            $adminTab->add();
        }

        return true;
    }

    private function uninstallTab()
    {
        $tabs = ['AdminRlAiModuleMaker', 'AdminRlAiModuleList', 'AdminRlAiSettings'];
        foreach ($tabs as $class_name) {
            $id_tab = (int)Tab::getIdFromClassName($class_name);
            if ($id_tab) {
                $tab = new Tab($id_tab);
                $tab->delete();
            }
        }
        return true;
    }

    private function createTables()
    {
        $sql = [];
        
        // API Keys table
        $sql[] = 'CREATE TABLE IF NOT EXISTS `' . _DB_PREFIX_ . 'rl_aimodulemaker_api_keys` (
            `id` int(11) NOT NULL AUTO_INCREMENT,
            `api_type` VARCHAR(50) NOT NULL,
            `api_key` TEXT NOT NULL,
            `active` TINYINT(1) NOT NULL DEFAULT 1,
            `date_add` DATETIME NOT NULL,
            `date_upd` DATETIME NOT NULL,
            PRIMARY KEY (`id`)
        ) ENGINE=' . _MYSQL_ENGINE_ . ' DEFAULT CHARSET=utf8mb4;';

        // Modules table
        $sql[] = 'CREATE TABLE IF NOT EXISTS `' . _DB_PREFIX_ . 'rl_aimodulemaker_modules` (
            `id` int(11) NOT NULL AUTO_INCREMENT,
            `name` VARCHAR(255) NOT NULL,
            `github_repo` VARCHAR(255),
            `local_path` VARCHAR(255),
            `version` VARCHAR(50),
            `status` VARCHAR(50),
            `date_add` DATETIME NOT NULL,
            `date_upd` DATETIME NOT NULL,
            PRIMARY KEY (`id`)
        ) ENGINE=' . _MYSQL_ENGINE_ . ' DEFAULT CHARSET=utf8mb4;';

        // Version history table
        $sql[] = 'CREATE TABLE IF NOT EXISTS `' . _DB_PREFIX_ . 'rl_aimodulemaker_version_history` (
            `id` int(11) NOT NULL AUTO_INCREMENT,
            `module_id` int(11) NOT NULL,
            `version` VARCHAR(50) NOT NULL,
            `commit_hash` VARCHAR(255),
            `changes` TEXT,
            `date_add` DATETIME NOT NULL,
            PRIMARY KEY (`id`),
            FOREIGN KEY (`module_id`) REFERENCES `' . _DB_PREFIX_ . 'rl_aimodulemaker_modules` (`id`)
        ) ENGINE=' . _MYSQL_ENGINE_ . ' DEFAULT CHARSET=utf8mb4;';

        foreach ($sql as $query) {
            if (!Db::getInstance()->execute($query)) {
                return false;
            }
        }

        return true;
    }

    private function dropTables()
    {
        $sql = [];
        $sql[] = 'DROP TABLE IF EXISTS `' . _DB_PREFIX_ . 'rl_aimodulemaker_version_history`';
        $sql[] = 'DROP TABLE IF EXISTS `' . _DB_PREFIX_ . 'rl_aimodulemaker_modules`';
        $sql[] = 'DROP TABLE IF EXISTS `' . _DB_PREFIX_ . 'rl_aimodulemaker_api_keys`';

        foreach ($sql as $query) {
            if (!Db::getInstance()->execute($query)) {
                return false;
            }
        }

        return true;
    }

    public function hookActionAdminControllerSetMedia()
    {
        if ($this->context->controller->controller_name === 'AdminRlAiModuleMaker' ||
            $this->context->controller->controller_name === 'AdminRlAiModuleList' ||
            $this->context->controller->controller_name === 'AdminRlAiSettings') {
            
            $this->context->controller->addJS($this->_path.'views/js/admin.js');
            $this->context->controller->addJS($this->_path.'views/js/aiChat.js');
            $this->context->controller->addJS($this->_path.'views/js/moduleBuilder.js');
            
            $this->context->controller->addCSS($this->_path.'views/css/admin.css');
        }
    }

    public function getContent()
    {
        Tools::redirectAdmin($this->context->link->getAdminLink('AdminRlAiModuleMaker'));
    }
}

================
File: sql/install.php
================
<?php
/**
 * SQL installation script
 * @author Ljustema Sverige AB
 */

$sql = array();

// API Keys table
$sql[] = 'CREATE TABLE IF NOT EXISTS `' . _DB_PREFIX_ . 'rl_aimodulemaker_api_keys` (
    `id` int(11) NOT NULL AUTO_INCREMENT,
    `api_type` varchar(50) NOT NULL,
    `api_key` text NOT NULL,
    `active` tinyint(1) NOT NULL DEFAULT 1,
    `date_add` datetime NOT NULL,
    `date_upd` datetime NOT NULL,
    PRIMARY KEY (`id`),
    KEY `api_type` (`api_type`)
) ENGINE=' . _MYSQL_ENGINE_ . ' DEFAULT CHARSET=utf8mb4;';

// Modules table
$sql[] = 'CREATE TABLE IF NOT EXISTS `' . _DB_PREFIX_ . 'rl_aimodulemaker_modules` (
    `id` int(11) NOT NULL AUTO_INCREMENT,
    `name` varchar(255) NOT NULL,
    `github_repo` varchar(255) DEFAULT NULL,
    `local_path` varchar(255) NOT NULL,
    `version` varchar(50) NOT NULL,
    `status` varchar(50) NOT NULL DEFAULT "development",
    `author` varchar(255) NOT NULL,
    `description` text,
    `is_payment` tinyint(1) NOT NULL DEFAULT 0,
    `is_shipping` tinyint(1) NOT NULL DEFAULT 0,
    `hooks` text,
    `dependencies` text,
    `date_add` datetime NOT NULL,
    `date_upd` datetime NOT NULL,
    PRIMARY KEY (`id`),
    UNIQUE KEY `name` (`name`)
) ENGINE=' . _MYSQL_ENGINE_ . ' DEFAULT CHARSET=utf8mb4;';

// Version history table
$sql[] = 'CREATE TABLE IF NOT EXISTS `' . _DB_PREFIX_ . 'rl_aimodulemaker_version_history` (
    `id` int(11) NOT NULL AUTO_INCREMENT,
    `module_id` int(11) NOT NULL,
    `version` varchar(50) NOT NULL,
    `commit_hash` varchar(255) DEFAULT NULL,
    `changes` text,
    `author` varchar(255) NOT NULL,
    `date_add` datetime NOT NULL,
    PRIMARY KEY (`id`),
    KEY `module_id` (`module_id`),
    CONSTRAINT `rl_aimodulemaker_version_history_ibfk_1` 
        FOREIGN KEY (`module_id`) 
        REFERENCES `' . _DB_PREFIX_ . 'rl_aimodulemaker_modules` (`id`) 
        ON DELETE CASCADE
) ENGINE=' . _MYSQL_ENGINE_ . ' DEFAULT CHARSET=utf8mb4;';

// Module files table
$sql[] = 'CREATE TABLE IF NOT EXISTS `' . _DB_PREFIX_ . 'rl_aimodulemaker_files` (
    `id` int(11) NOT NULL AUTO_INCREMENT,
    `module_id` int(11) NOT NULL,
    `path` varchar(255) NOT NULL,
    `type` varchar(50) NOT NULL,
    `checksum` varchar(32) NOT NULL,
    `last_modified` datetime NOT NULL,
    `date_add` datetime NOT NULL,
    `date_upd` datetime NOT NULL,
    PRIMARY KEY (`id`),
    UNIQUE KEY `module_path` (`module_id`, `path`),
    KEY `module_id` (`module_id`),
    CONSTRAINT `rl_aimodulemaker_files_ibfk_1` 
        FOREIGN KEY (`module_id`) 
        REFERENCES `' . _DB_PREFIX_ . 'rl_aimodulemaker_modules` (`id`) 
        ON DELETE CASCADE
) ENGINE=' . _MYSQL_ENGINE_ . ' DEFAULT CHARSET=utf8mb4;';

// Module activity log
$sql[] = 'CREATE TABLE IF NOT EXISTS `' . _DB_PREFIX_ . 'rl_aimodulemaker_activity_log` (
    `id` int(11) NOT NULL AUTO_INCREMENT,
    `module_id` int(11) NOT NULL,
    `action` varchar(50) NOT NULL,
    `details` text,
    `user_id` int(11) DEFAULT NULL,
    `date_add` datetime NOT NULL,
    PRIMARY KEY (`id`),
    KEY `module_id` (`module_id`),
    KEY `user_id` (`user_id`),
    CONSTRAINT `rl_aimodulemaker_activity_log_ibfk_1` 
        FOREIGN KEY (`module_id`) 
        REFERENCES `' . _DB_PREFIX_ . 'rl_aimodulemaker_modules` (`id`) 
        ON DELETE CASCADE
) ENGINE=' . _MYSQL_ENGINE_ . ' DEFAULT CHARSET=utf8mb4;';

// AI Chat history
$sql[] = 'CREATE TABLE IF NOT EXISTS `' . _DB_PREFIX_ . 'rl_aimodulemaker_chat_history` (
    `id` int(11) NOT NULL AUTO_INCREMENT,
    `module_id` int(11) DEFAULT NULL,
    `user_id` int(11) NOT NULL,
    `message` text NOT NULL,
    `response` text NOT NULL,
    `model` varchar(50) NOT NULL,
    `context` text,
    `date_add` datetime NOT NULL,
    PRIMARY KEY (`id`),
    KEY `module_id` (`module_id`),
    KEY `user_id` (`user_id`),
    CONSTRAINT `rl_aimodulemaker_chat_history_ibfk_1` 
        FOREIGN KEY (`module_id`) 
        REFERENCES `' . _DB_PREFIX_ . 'rl_aimodulemaker_modules` (`id`) 
        ON DELETE SET NULL
) ENGINE=' . _MYSQL_ENGINE_ . ' DEFAULT CHARSET=utf8mb4;';

================
File: sql/uninstall.php
================
<?php
/**
 * SQL uninstallation script
 * @author Ljustema Sverige AB
 */

$sql = array();

// Drop tables in correct order due to foreign key constraints
$sql[] = 'DROP TABLE IF EXISTS `' . _DB_PREFIX_ . 'rl_aimodulemaker_chat_history`';
$sql[] = 'DROP TABLE IF EXISTS `' . _DB_PREFIX_ . 'rl_aimodulemaker_activity_log`';
$sql[] = 'DROP TABLE IF EXISTS `' . _DB_PREFIX_ . 'rl_aimodulemaker_files`';
$sql[] = 'DROP TABLE IF EXISTS `' . _DB_PREFIX_ . 'rl_aimodulemaker_version_history`';
$sql[] = 'DROP TABLE IF EXISTS `' . _DB_PREFIX_ . 'rl_aimodulemaker_modules`';
$sql[] = 'DROP TABLE IF EXISTS `' . _DB_PREFIX_ . 'rl_aimodulemaker_api_keys`';

================
File: tests/Unit/ModuleGeneratorTest.php
================
<?php
namespace Tests\Unit;

use PHPUnit\Framework\TestCase;
use ModuleGenerator;
use FileGenerator;
use ValidationHandler;

class ModuleGeneratorTest extends TestCase
{
    private $generator;
    private $testModuleData;

    protected function setUp(): void
    {
        $this->testModuleData = [
            'name' => 'testmodule',
            'display_name' => 'Test Module',
            'version' => '1.0.0',
            'description' => 'Test module description',
            'author' => 'Ljustema Sverige AB',
            'type' => 'payment'
        ];

        $this->generator = new ModuleGenerator(
            $this->testModuleData,
            sys_get_temp_dir(),
            new FileGenerator(),
            new ValidationHandler()
        );
    }

    public function testGenerateModule()
    {
        $result = $this->generator->generateModule();
        $this->assertTrue($result);

        $modulePath = sys_get_temp_dir() . '/testmodule';
        $this->assertDirectoryExists($modulePath);
        $this->assertFileExists($modulePath . '/testmodule.php');
        $this->assertFileExists($modulePath . '/config.xml');
    }

    public function testGeneratePaymentModule()
    {
        $result = $this->generator->generateModule();
        $this->assertTrue($result);

        $modulePath = sys_get_temp_dir() . '/testmodule';
        $requiredFiles = [
            '/controllers/front/payment.php',
            '/controllers/front/validation.php',
            '/views/templates/front/payment.tpl',
            '/views/templates/hook/payment.tpl'
        ];

        foreach ($requiredFiles as $file) {
            $this->assertFileExists($modulePath . $file);
        }
    }

    public function testGenerateReadme()
    {
        $result = $this->generator->generateModule();
        $this->assertTrue($result);

        $readmePath = sys_get_temp_dir() . '/testmodule/README.md';
        $this->assertFileExists($readmePath);

        $content = file_get_contents($readmePath);
        $this->assertStringContainsString('Test Module', $content);
        $this->assertStringContainsString('1.0.0', $content);
        $this->assertStringContainsString('Ljustema Sverige AB', $content);
    }

    public function testGenerateGitHubFiles()
    {
        $this->testModuleData['create_github_repo'] = true;
        $result = $this->generator->generateModule();
        $this->assertTrue($result);

        $modulePath = sys_get_temp_dir() . '/testmodule';
        $this->assertFileExists($modulePath . '/.gitignore');
        $this->assertFileExists($modulePath . '/.github/workflows/tests.yml');
    }

    protected function tearDown(): void
    {
        $modulePath = sys_get_temp_dir() . '/testmodule';
        if (is_dir($modulePath)) {
            $this->removeDirectory($modulePath);
        }
    }

    private function removeDirectory($dir)
    {
        if (!is_dir($dir)) {
            return;
        }

        $files = array_diff(scandir($dir), ['.', '..']);
        foreach ($files as $file) {
            $path = $dir . '/' . $file;
            if (is_dir($path)) {
                $this->removeDirectory($path);
            } else {
                unlink($path);
            }
        }
        rmdir($dir);
    }
}

================
File: tests/Unit/ModuleValidationTest.php
================
<?php
namespace PrestaShop\Module\RlAimodulemaker\Tests\Unit;

use PHPUnit\Framework\TestCase;
use PrestaShop\Module\RlAimodulemaker\ModuleBuilder\ValidationHandler;

class ModuleValidationTest extends TestCase
{
    private $validator;

    protected function setUp(): void
    {
        if (!function_exists('pSQL')) {
            function pSQL($string) {
                return addslashes($string);
            }
        }
        $this->validator = new ValidationHandler();
    }

    public function testModuleNameValidation()
    {
        $this->assertTrue($this->validator->validateModuleName('mymodule'));
        $this->assertTrue($this->validator->validateModuleName('my_module_123'));
        $this->assertFalse($this->validator->validateModuleName('123module'));
        $this->assertFalse($this->validator->validateModuleName('My-Module'));
    }

    public function testVersionValidation()
    {
        $this->assertTrue($this->validator->validateVersion('1.0.0'));
        $this->assertTrue($this->validator->validateVersion('2.1.3'));
        $this->assertFalse($this->validator->validateVersion('1.0'));
        $this->assertFalse($this->validator->validateVersion('1.0.0.0'));
    }

    public function testSecurityValidation()
    {
        $code = 'SELECT * FROM table WHERE id = ' . $_GET['id'];
        $issues = $this->validator->validateSecurity($code);
        $this->assertNotEmpty($issues);

        $id = 1;
        $code = 'SELECT * FROM table WHERE id = ' . pSQL($id);
        $issues = $this->validator->validateSecurity($code);
        $this->assertEmpty($issues);
    }

    public function testPrestashopCompatibility()
    {
        $code = 'class MyModule extends Module { }';
        $issues = $this->validator->validateCompatibility($code);
        $this->assertNotEmpty($issues);

        $code = 'if (!defined("_PS_VERSION_")) exit;
                class MyModule extends Module { }';
        $issues = $this->validator->validateCompatibility($code);
        $this->assertEmpty($issues);
    }
}

================
File: tools/code_validator.php
================
<?php
/**
 * Code validator tool
 * @author Ljustema Sverige AB
 */

class CodeValidator 
{
    private $errors = [];
    private $warnings = [];

    public function validateFile($filePath) 
    {
        if (!file_exists($filePath)) {
            throw new Exception('File not found: ' . $filePath);
        }

        $extension = pathinfo($filePath, PATHINFO_EXTENSION);
        switch ($extension) {
            case 'php':
                return $this->validatePhpFile($filePath);
            case 'js':
                return $this->validateJsFile($filePath);
            case 'css':
                return $this->validateCssFile($filePath);
            case 'tpl':
                return $this->validateTplFile($filePath);
            default:
                throw new Exception('Unsupported file type: ' . $extension);
        }
    }

    private function validatePhpFile($filePath) 
    {
        // Syntax check
        $output = [];
        exec('php -l ' . escapeshellarg($filePath), $output, $return);
        if ($return !== 0) {
            $this->errors[] = 'PHP Syntax Error: ' . implode("\n", $output);
            return false;
        }

        $content = file_get_contents($filePath);

        // PSR-2 validation
        if (strpos($content, '<?=') !== false) {
            $this->warnings[] = 'Short echo tags are not recommended';
        }

        // Security checks
        $securityIssues = $this->checkSecurityIssues($content);
        if (!empty($securityIssues)) {
            $this->errors = array_merge($this->errors, $securityIssues);
        }

        // PrestaShop specific checks
        $this->validatePrestashopCode($content);

        return empty($this->errors);
    }

    private function validateJsFile($filePath) 
    {
        if (file_exists('node_modules/.bin/eslint')) {
            exec('node_modules/.bin/eslint ' . escapeshellarg($filePath), $output, $return);
            if ($return !== 0) {
                $this->errors[] = 'JavaScript validation failed: ' . implode("\n", $output);
                return false;
            }
        }

        $content = file_get_contents($filePath);
        
        // Basic security checks
        if (strpos($content, 'eval(') !== false) {
            $this->errors[] = 'Avoid using eval() in JavaScript';
        }

        return empty($this->errors);
    }

    private function validateCssFile($filePath) 
    {
        if (file_exists('node_modules/.bin/stylelint')) {
            exec('node_modules/.bin/stylelint ' . escapeshellarg($filePath), $output, $return);
            if ($return !== 0) {
                $this->errors[] = 'CSS validation failed: ' . implode("\n", $output);
                return false;
            }
        }

        return true;
    }

    private function validateTplFile($filePath) 
    {
        $content = file_get_contents($filePath);

        // Check for unclosed Smarty tags
        preg_match_all('/{[^}]*$/', $content, $matches);
        if (!empty($matches[0])) {
            $this->errors[] = 'Unclosed Smarty tags found';
            return false;
        }

        // Check for unescaped variables
        preg_match_all('/{[$][^|]*}/', $content, $matches);
        foreach ($matches[0] as $match) {
            if (strpos($match, '|escape') === false) {
                $this->warnings[] = 'Unescaped variable found: ' . $match;
            }
        }

        return empty($this->errors);
    }

    private function checkSecurityIssues($content) 
    {
        $issues = [];
        
        // Check for direct SQL queries without proper escaping
        if (preg_match('/\$sql\s*=\s*["\']SELECT|INSERT|UPDATE|DELETE/i', $content)) {
            if (!preg_match('/pSQL|bqSQL|Db::getInstance\(\)->escape/i', $content)) {
                $issues[] = 'Potential SQL injection: Use pSQL() or Db::getInstance()->escape()';
            }
        }

        // Check for direct superglobal usage
        $superglobals = ['$_GET', '$_POST', '$_REQUEST'];
        foreach ($superglobals as $global) {
            if (strpos($content, $global) !== false) {
                $issues[] = 'Direct superglobal usage found. Use Tools::getValue() instead';
            }
        }

        // Check for potentially dangerous functions
        $dangerousFunctions = [
            'eval', 'exec', 'passthru', 'shell_exec', 'system',
            'proc_open', 'popen', 'curl_exec', 'curl_multi_exec'
        ];
        foreach ($dangerousFunctions as $func) {
            if (preg_match('/\b' . $func . '\s*\(/i', $content)) {
                $issues[] = "Potentially dangerous function found: $func()";
            }
        }

        return $issues;
    }

    private function validatePrestashopCode($content) 
    {
        // Check for proper module class definition
        if (strpos($content, 'extends Module') !== false) {
            if (strpos($content, '_PS_VERSION_') === false) {
                $this->errors[] = 'Missing PrestaShop version check';
            }
            if (strpos($content, 'public function install()') !== false && 
                strpos($content, 'parent::install()') === false) {
                $this->errors[] = 'Module install() method must call parent::install()';
            }
        }

        // Check for deprecated functions
        $deprecated = [
            'mysql_',
            'Tools::displayError(',
            'Tools::p(',
            'class_exists(\'Mobile_Detect\')'
        ];
        foreach ($deprecated as $func) {
            if (strpos($content, $func) !== false) {
                $this->warnings[] = "Deprecated function/method found: $func";
            }
        }
    }

    public function getErrors() 
    {
        return $this->errors;
    }

    public function getWarnings() 
    {
        return $this->warnings;
    }

    public function hasIssues() 
    {
        return !empty($this->errors) || !empty($this->warnings);
    }
}

================
File: tools/template_generator.php
================
<?php
/**
 * Template generator tool
 * @author Ljustema Sverige AB
 */

class TemplateGenerator 
{
    private $moduleData;
    private $templates;

    public function __construct($moduleData) 
    {
        $this->moduleData = $moduleData;
        $this->templates = include dirname(__FILE__) . '/../config/templates.php';
    }

    public function generateFiles() 
    {
        $files = [];
        $moduleType = $this->moduleData['type'];

        if (!isset($this->templates[$moduleType])) {
            throw new Exception('Invalid module type: ' . $moduleType);
        }

        foreach ($this->templates[$moduleType]['files'] as $file) {
            $files[$file] = $this->generateFile($file);
        }

        return $files;
    }

    private function generateFile($path) 
    {
        $extension = pathinfo($path, PATHINFO_EXTENSION);
        $method = 'generate' . ucfirst($extension) . 'File';

        if (method_exists($this, $method)) {
            return $this->$method($path);
        }

        throw new Exception('Unsupported file type: ' . $extension);
    }

    private function generatePhpFile($path) 
    {
        $filename = basename($path);
        $template = file_get_contents(dirname(__FILE__) . '/../templates/' . $filename . '.tpl');

        return strtr($template, [
            '{{MODULE_NAME}}' => $this->moduleData['name'],
            '{{MODULE_DISPLAY_NAME}}' => $this->moduleData['display_name'],
            '{{MODULE_VERSION}}' => $this->moduleData['version'],
            '{{MODULE_AUTHOR}}' => $this->moduleData['author'],
            '{{MODULE_DESCRIPTION}}' => $this->moduleData['description'],
            '{{CURRENT_YEAR}}' => date('Y'),
            '{{GENERATED_DATE}}' => date('Y-m-d H:i:s')
        ]);
    }

    private function generateTplFile($path) 
    {
        $filename = basename($path);
        $template = file_get_contents(dirname(__FILE__) . '/../templates/' . $filename . '.tpl');

        return strtr($template, [
            '{{MODULE_NAME}}' => $this->moduleData['name'],
            '{{MODULE_DISPLAY_NAME}}' => $this->moduleData['display_name']
        ]);
    }

    private function generateJsFile($path) 
    {
        $filename = basename($path);
        $template = file_get_contents(dirname(__FILE__) . '/../templates/' . $filename . '.tpl');

        return strtr($template, [
            '{{MODULE_NAME}}' => $this->moduleData['name'],
            '{{MODULE_VERSION}}' => $this->moduleData['version']
        ]);
    }

    private function generateCssFile($path) 
    {
        $filename = basename($path);
        $template = file_get_contents(dirname(__FILE__) . '/../templates/' . $filename . '.tpl');

        return strtr($template, [
            '{{MODULE_NAME}}' => $this->moduleData['name']
        ]);
    }

    public function generateReadme() 
    {
        $template = file_get_contents(dirname(__FILE__) . '/../templates/README.md.tpl');

        return strtr($template, [
            '{{MODULE_NAME}}' => $this->moduleData['name'],
            '{{MODULE_DISPLAY_NAME}}' => $this->moduleData['display_name'],
            '{{MODULE_DESCRIPTION}}' => $this->moduleData['description'],
            '{{MODULE_VERSION}}' => $this->moduleData['version'],
            '{{MODULE_AUTHOR}}' => $this->moduleData['author'],
            '{{CURRENT_YEAR}}' => date('Y'),
            '{{REQUIREMENTS}}' => $this->generateRequirements(),
            '{{FEATURES}}' => $this->generateFeaturesList(),
            '{{INSTALLATION}}' => $this->generateInstallationGuide()
        ]);
    }

    private function generateRequirements() 
    {
        $requirements = [
            'PrestaShop ' . $this->moduleData['ps_version'] . ' or later',
            'PHP ' . $this->moduleData['php_version'] . ' or later'
        ];

        if (!empty($this->moduleData['requirements'])) {
            $requirements = array_merge($requirements, $this->moduleData['requirements']);
        }

        return implode("\n", array_map(function($req) {
            return '* ' . $req;
        }, $requirements));
    }

    private function generateFeaturesList() 
    {
        if (empty($this->moduleData['features'])) {
            return '* Basic module functionality';
        }

        return implode("\n", array_map(function($feature) {
            return '* ' . $feature;
        }, $this->moduleData['features']));
    }

    private function generateInstallationGuide() 
    {
        $steps = [
            'Upload the module folder to your PrestaShop modules directory',
            'Go to the Modules page in your PrestaShop admin panel',
            'Find "' . $this->moduleData['display_name'] . '" in the modules list',
            'Click "Install" button'
        ];

        if (!empty($this->moduleData['installation_steps'])) {
            $steps = array_merge($steps, $this->moduleData['installation_steps']);
        }

        return implode("\n", array_map(function($step) {
            return '1. ' . $step;
        }, $steps));
    }
}

================
File: translations/en.php
================
<?php
global $_MODULE;
$_MODULE = array();

$_MODULE['<{rl_aimodulemaker}prestashop>rl_aimodulemaker_f4f70727dc34561dfde1a3c529b6205c'] = 'AI Module Maker';
$_MODULE['<{rl_aimodulemaker}prestashop>rl_aimodulemaker_7258e7251413465e0a3eb58094430bde'] = 'Create and manage PrestaShop modules with AI assistance';
$_MODULE['<{rl_aimodulemaker}prestashop>rl_aimodulemaker_254f642527b45bc260048e30704edb39'] = 'Configuration';
$_MODULE['<{rl_aimodulemaker}prestashop>rl_aimodulemaker_c9cc8cce247e49bae79f15173ce97354'] = 'Save';
$_MODULE['<{rl_aimodulemaker}prestashop>rl_aimodulemaker_ea4788705e6873b424c65e91c2846b19'] = 'Cancel';

// Main Menu
$_MODULE['<{rl_aimodulemaker}prestashop>menu_7258e7251413465e0a3eb58094430bde'] = 'AI Module Maker';
$_MODULE['<{rl_aimodulemaker}prestashop>menu_b61541208db7fa7dba42c85224405911'] = 'Menu';

// Dashboard
$_MODULE['<{rl_aimodulemaker}prestashop>dashboard_2938c7f7e560ed972f8a4f68e80ff834'] = 'Dashboard';
$_MODULE['<{rl_aimodulemaker}prestashop>dashboard_b1b5505b19153ec4469669e364d1236c'] = 'Create New Module';
$_MODULE['<{rl_aimodulemaker}prestashop>dashboard_8cf04a9734132302f96da8e113e80ce5'] = 'Home';
$_MODULE['<{rl_aimodulemaker}prestashop>dashboard_54e1d44609e3abed11f6e1eb6ae8ffe5'] = 'Modules';
$_MODULE['<{rl_aimodulemaker}prestashop>dashboard_6a26f548831e6a8c26bfbbd9f6ec61e0'] = 'Help';

// Module List
$_MODULE['<{rl_aimodulemaker}prestashop>list_b718adec73e04ce3ec720dd11a06a308'] = 'ID';
$_MODULE['<{rl_aimodulemaker}prestashop>list_49ee3087348e8d44e1feda1917443987'] = 'Name';
$_MODULE['<{rl_aimodulemaker}prestashop>list_4c2a8fe7eaf24721cc7a9f0175115bd4'] = 'Message';
$_MODULE['<{rl_aimodulemaker}prestashop>list_44749712dbec183e983dcd78a7736c41'] = 'Date';
$_MODULE['<{rl_aimodulemaker}prestashop>list_ec53a8c4f07baed5d8825072c89799be'] = 'Status';
$_MODULE['<{rl_aimodulemaker}prestashop>list_004bf6c9a40003140292e97330236c53'] = 'Action';

// Module Status
$_MODULE['<{rl_aimodulemaker}prestashop>status_0eceeb45861f9585dd7a97a3e36f85c6'] = 'Created';
$_MODULE['<{rl_aimodulemaker}prestashop>status_6f8063417ab31f38d864c28302f3de2f'] = 'Approved';
$_MODULE['<{rl_aimodulemaker}prestashop>status_2d13df6f8b5e4c5af9f87e0dc39df69d'] = 'In Development';
$_MODULE['<{rl_aimodulemaker}prestashop>status_71534d55d1ae64fe767958dd70627744'] = 'Archived';

// AI Chat
$_MODULE['<{rl_aimodulemaker}prestashop>chat_4c2a8fe7eaf24721cc7a9f0175115bd4'] = 'Message';
$_MODULE['<{rl_aimodulemaker}prestashop>chat_94966d90747b97d1f0f206c98a8b1ac3'] = 'Send';
$_MODULE['<{rl_aimodulemaker}prestashop>chat_12a2993c70c8b5b0ce75f6511acb6dd3'] = 'AI Assistant';
$_MODULE['<{rl_aimodulemaker}prestashop>chat_5e9df908eafa83cb51c0a3720e8348c7'] = 'Clear Chat';
$_MODULE['<{rl_aimodulemaker}prestashop>chat_0095a9fa74d1713e43e370a7d7846224'] = 'Export';

// File Management
$_MODULE['<{rl_aimodulemaker}prestashop>files_094afb999c4e0ded0c8cbb16dec3bb62'] = 'Files';
$_MODULE['<{rl_aimodulemaker}prestashop>files_ec211f7c20af43e742bf2570c3cb84f9'] = 'Add';
$_MODULE['<{rl_aimodulemaker}prestashop>files_729a51874fe901b092899e9e8b31c97a'] = 'Are you sure?';
$_MODULE['<{rl_aimodulemaker}prestashop>files_f2a6c498fb90ee345d997f888fce3b18'] = 'Delete';

// Settings
$_MODULE['<{rl_aimodulemaker}prestashop>settings_f4f70727dc34561dfde1a3c529b6205c'] = 'Settings';
$_MODULE['<{rl_aimodulemaker}prestashop>settings_c9cc8cce247e49bae79f15173ce97354'] = 'Save';
$_MODULE['<{rl_aimodulemaker}prestashop>settings_ea4788705e6873b424c65e91c2846b19'] = 'Cancel';

// API Keys
$_MODULE['<{rl_aimodulemaker}prestashop>api_f4f70727dc34561dfde1a3c529b6205c'] = 'API Keys';
$_MODULE['<{rl_aimodulemaker}prestashop>api_6e05d189931f3aa14c49265b9544bec8'] = 'OpenAI API Key';
$_MODULE['<{rl_aimodulemaker}prestashop>api_48d24d136b74a1246536a7138c08e8d1'] = 'Claude API Key';
$_MODULE['<{rl_aimodulemaker}prestashop>api_2ec0d16e4ca169baedb9b2d50ec5c6d7'] = 'GitHub Token';

// GitHub Integration
$_MODULE['<{rl_aimodulemaker}prestashop>github_f4f70727dc34561dfde1a3c529b6205c'] = 'GitHub';
$_MODULE['<{rl_aimodulemaker}prestashop>github_490aa6e856ccf208a054389e47ce0d06'] = 'Id';
$_MODULE['<{rl_aimodulemaker}prestashop>github_694e8d1f2ee056f98ee488bdc4982d73'] = 'Quantity';
$_MODULE['<{rl_aimodulemaker}prestashop>github_004bf6c9a40003140292e97330236c53'] = 'Action';

// Error Messages
$_MODULE['<{rl_aimodulemaker}prestashop>errors_e2b7dec8fa4b498156dfee6e4c84b156'] = 'This field is required';
$_MODULE['<{rl_aimodulemaker}prestashop>errors_3f507e343d12c26a3c3667cb610f4c8b'] = 'Invalid format';
$_MODULE['<{rl_aimodulemaker}prestashop>errors_d554d9bf0cd8f79c215600eeb77825e8'] = 'Field must be a number';
$_MODULE['<{rl_aimodulemaker}prestashop>errors_692e89f35473d4006fb8c6edf85b28dc'] = 'An error occurred';

// Success Messages
$_MODULE['<{rl_aimodulemaker}prestashop>success_c888438d14855d7d96a2724ee9c306bd'] = 'Settings updated';
$_MODULE['<{rl_aimodulemaker}prestashop>success_1f73d0da88023f16584d17375f760f47'] = 'Module created';
$_MODULE['<{rl_aimodulemaker}prestashop>success_d4ee0c69c5e4f6c7f0e845786b1d6a9c'] = 'Module updated';
$_MODULE['<{rl_aimodulemaker}prestashop>success_1ba4832d68953066397789a4f92336e3'] = 'Module deleted';

// Confirmation Messages
$_MODULE['<{rl_aimodulemaker}prestashop>confirm_729a51874fe901b092899e9e8b31c97a'] = 'Are you sure?';
$_MODULE['<{rl_aimodulemaker}prestashop>confirm_38cf14f0a192e9450298230dd8d5c9b0'] = 'Changes cannot be undone';
$_MODULE['<{rl_aimodulemaker}prestashop>confirm_b9987a246a537f4fe86f1f2e3d10dbdb'] = 'Display';
$_MODULE['<{rl_aimodulemaker}prestashop>confirm_ea4788705e6873b424c65e91c2846b19'] = 'Cancel';

// Help Texts
$_MODULE['<{rl_aimodulemaker}prestashop>help_6a26f548831e6a8c26bfbbd9f6ec61e0'] = 'Help';
$_MODULE['<{rl_aimodulemaker}prestashop>help_9dffbf69ffba8bc38bc4e01abf4b1675'] = 'Text';
$_MODULE['<{rl_aimodulemaker}prestashop>help_c9cc8cce247e49bae79f15173ce97354'] = 'Save';
$_MODULE['<{rl_aimodulemaker}prestashop>help_ea4788705e6873b424c65e91c2846b19'] = 'Cancel';

// Validation
$_MODULE['<{rl_aimodulemaker}prestashop>validation_e267d34972b3ab66b987fbad59fba513'] = 'Invalid module name format';
$_MODULE['<{rl_aimodulemaker}prestashop>validation_ff324f870a2a25f2997769e12623534f'] = 'Invalid version format';
$_MODULE['<{rl_aimodulemaker}prestashop>validation_e89cbadbc41b6d0a65e56f9e4749b819'] = 'File is too large';
$_MODULE['<{rl_aimodulemaker}prestashop>validation_db0f22233b46fc6da87ef86c463cf3fd'] = 'File type not supported';

// Module Builder
$_MODULE['<{rl_aimodulemaker}prestashop>builder_b1b5505b19153ec4469669e364d1236c'] = 'Create New Module';
$_MODULE['<{rl_aimodulemaker}prestashop>builder_49ee3087348e8d44e1feda1917443987'] = 'Name';
$_MODULE['<{rl_aimodulemaker}prestashop>builder_b5a7adde1af5c87d7fd797b6245c2a39'] = 'Description';
$_MODULE['<{rl_aimodulemaker}prestashop>builder_34b6cd75171affba6957e308dcbd92be'] = 'Version';
$_MODULE['<{rl_aimodulemaker}prestashop>builder_a1fa27779242b4902f7ae3bdd5c6d508'] = 'Type';
$_MODULE['<{rl_aimodulemaker}prestashop>builder_6252c0f2c2ed83b7b06dfca86d4650bb'] = 'Invalid characters:';

// AI Integration
$_MODULE['<{rl_aimodulemaker}prestashop>ai_12a2993c70c8b5b0ce75f6511acb6dd3'] = 'AI Assistant';
$_MODULE['<{rl_aimodulemaker}prestashop>ai_94966d90747b97d1f0f206c98a8b1ac3'] = 'Send';
$_MODULE['<{rl_aimodulemaker}prestashop>ai_5e9df908eafa83cb51c0a3720e8348c7'] = 'Clear';
$_MODULE['<{rl_aimodulemaker}prestashop>ai_0095a9fa74d1713e43e370a7d7846224'] = 'Export';
$_MODULE['<{rl_aimodulemaker}prestashop>ai_72d6d7a1885885bb55a565fd1070581a'] = 'Import';
$_MODULE['<{rl_aimodulemaker}prestashop>ai_06933067aafd48425d67bcb01bba5cb6'] = 'Update';

================
File: translations/sv.php
================
<?php
global $_MODULE;
$_MODULE = array();

$_MODULE['<{rl_aimodulemaker}prestashop>rl_aimodulemaker_f4f70727dc34561dfde1a3c529b6205c'] = 'AI Module Maker';
$_MODULE['<{rl_aimodulemaker}prestashop>rl_aimodulemaker_7258e7251413465e0a3eb58094430bde'] = 'Skapa och hantera PrestaShop-moduler med AI-assistans';
$_MODULE['<{rl_aimodulemaker}prestashop>rl_aimodulemaker_254f642527b45bc260048e30704edb39'] = 'Konfiguration';
$_MODULE['<{rl_aimodulemaker}prestashop>rl_aimodulemaker_c9cc8cce247e49bae79f15173ce97354'] = 'Spara';
$_MODULE['<{rl_aimodulemaker}prestashop>rl_aimodulemaker_ea4788705e6873b424c65e91c2846b19'] = 'Avbryt';

// Huvudmeny
$_MODULE['<{rl_aimodulemaker}prestashop>menu_7258e7251413465e0a3eb58094430bde'] = 'AI Module Maker';
$_MODULE['<{rl_aimodulemaker}prestashop>menu_b61541208db7fa7dba42c85224405911'] = 'Menu';

// Dashboard
$_MODULE['<{rl_aimodulemaker}prestashop>dashboard_2938c7f7e560ed972f8a4f68e80ff834'] = 'Dashboard';
$_MODULE['<{rl_aimodulemaker}prestashop>dashboard_b1b5505b19153ec4469669e364d1236c'] = 'Skapa ny modul';
$_MODULE['<{rl_aimodulemaker}prestashop>dashboard_8cf04a9734132302f96da8e113e80ce5'] = 'Hem';
$_MODULE['<{rl_aimodulemaker}prestashop>dashboard_54e1d44609e3abed11f6e1eb6ae8ffe5'] = 'Moduler';
$_MODULE['<{rl_aimodulemaker}prestashop>dashboard_6a26f548831e6a8c26bfbbd9f6ec61e0'] = 'Hjälp';

// Modullista
$_MODULE['<{rl_aimodulemaker}prestashop>list_b718adec73e04ce3ec720dd11a06a308'] = 'ID';
$_MODULE['<{rl_aimodulemaker}prestashop>list_49ee3087348e8d44e1feda1917443987'] = 'Namn';
$_MODULE['<{rl_aimodulemaker}prestashop>list_4c2a8fe7eaf24721cc7a9f0175115bd4'] = 'Meddelande';
$_MODULE['<{rl_aimodulemaker}prestashop>list_44749712dbec183e983dcd78a7736c41'] = 'Datum';
$_MODULE['<{rl_aimodulemaker}prestashop>list_ec53a8c4f07baed5d8825072c89799be'] = 'Status';
$_MODULE['<{rl_aimodulemaker}prestashop>list_004bf6c9a40003140292e97330236c53'] = 'Åtgärd';

// Modulstatus
$_MODULE['<{rl_aimodulemaker}prestashop>status_0eceeb45861f9585dd7a97a3e36f85c6'] = 'Skapad';
$_MODULE['<{rl_aimodulemaker}prestashop>status_6f8063417ab31f38d864c28302f3de2f'] = 'Godkänd';
$_MODULE['<{rl_aimodulemaker}prestashop>status_2d13df6f8b5e4c5af9f87e0dc39df69d'] = 'Under utveckling';
$_MODULE['<{rl_aimodulemaker}prestashop>status_71534d55d1ae64fe767958dd70627744'] = 'Arkiverad';

// AI Chat
$_MODULE['<{rl_aimodulemaker}prestashop>chat_4c2a8fe7eaf24721cc7a9f0175115bd4'] = 'Meddelande';
$_MODULE['<{rl_aimodulemaker}prestashop>chat_94966d90747b97d1f0f206c98a8b1ac3'] = 'Skicka';
$_MODULE['<{rl_aimodulemaker}prestashop>chat_12a2993c70c8b5b0ce75f6511acb6dd3'] = 'AI Assistent';
$_MODULE['<{rl_aimodulemaker}prestashop>chat_5e9df908eafa83cb51c0a3720e8348c7'] = 'Rensa chatt';
$_MODULE['<{rl_aimodulemaker}prestashop>chat_0095a9fa74d1713e43e370a7d7846224'] = 'Exportera';

// Filhantering
$_MODULE['<{rl_aimodulemaker}prestashop>files_094afb999c4e0ded0c8cbb16dec3bb62'] = 'Filer';
$_MODULE['<{rl_aimodulemaker}prestashop>files_ec211f7c20af43e742bf2570c3cb84f9'] = 'Lägg till';
$_MODULE['<{rl_aimodulemaker}prestashop>files_729a51874fe901b092899e9e8b31c97a'] = 'Är du säker?';
$_MODULE['<{rl_aimodulemaker}prestashop>files_f2a6c498fb90ee345d997f888fce3b18'] = 'Ta bort';

// Inställningar
$_MODULE['<{rl_aimodulemaker}prestashop>settings_f4f70727dc34561dfde1a3c529b6205c'] = 'Inställningar';
$_MODULE['<{rl_aimodulemaker}prestashop>settings_c9cc8cce247e49bae79f15173ce97354'] = 'Spara';
$_MODULE['<{rl_aimodulemaker}prestashop>settings_ea4788705e6873b424c65e91c2846b19'] = 'Avbryt';

// API-nycklar
$_MODULE['<{rl_aimodulemaker}prestashop>api_f4f70727dc34561dfde1a3c529b6205c'] = 'API-nycklar';
$_MODULE['<{rl_aimodulemaker}prestashop>api_6e05d189931f3aa14c49265b9544bec8'] = 'OpenAI API-nyckel';
$_MODULE['<{rl_aimodulemaker}prestashop>api_48d24d136b74a1246536a7138c08e8d1'] = 'Claude API-nyckel';
$_MODULE['<{rl_aimodulemaker}prestashop>api_2ec0d16e4ca169baedb9b2d50ec5c6d7'] = 'GitHub Token';

// GitHub-integration
$_MODULE['<{rl_aimodulemaker}prestashop>github_f4f70727dc34561dfde1a3c529b6205c'] = 'GitHub';
$_MODULE['<{rl_aimodulemaker}prestashop>github_490aa6e856ccf208a054389e47ce0d06'] = 'Id';
$_MODULE['<{rl_aimodulemaker}prestashop>github_694e8d1f2ee056f98ee488bdc4982d73'] = 'Antal';
$_MODULE['<{rl_aimodulemaker}prestashop>github_004bf6c9a40003140292e97330236c53'] = 'Åtgärd';

// Felmeddelanden
$_MODULE['<{rl_aimodulemaker}prestashop>errors_e2b7dec8fa4b498156dfee6e4c84b156'] = 'Detta fält är obligatoriskt';
$_MODULE['<{rl_aimodulemaker}prestashop>errors_3f507e343d12c26a3c3667cb610f4c8b'] = 'Ogiltigt format';
$_MODULE['<{rl_aimodulemaker}prestashop>errors_d554d9bf0cd8f79c215600eeb77825e8'] = 'Fältet måste vara ett nummer';
$_MODULE['<{rl_aimodulemaker}prestashop>errors_692e89f35473d4006fb8c6edf85b28dc'] = 'Ett fel uppstod';

// Framgångsmeddelanden
$_MODULE['<{rl_aimodulemaker}prestashop>success_c888438d14855d7d96a2724ee9c306bd'] = 'Inställningar uppdaterade';
$_MODULE['<{rl_aimodulemaker}prestashop>success_1f73d0da88023f16584d17375f760f47'] = 'Modul skapad';
$_MODULE['<{rl_aimodulemaker}prestashop>success_d4ee0c69c5e4f6c7f0e845786b1d6a9c'] = 'Modul uppdaterad';
$_MODULE['<{rl_aimodulemaker}prestashop>success_1ba4832d68953066397789a4f92336e3'] = 'Modul borttagen';

// Bekräftelsemeddelanden
$_MODULE['<{rl_aimodulemaker}prestashop>confirm_729a51874fe901b092899e9e8b31c97a'] = 'Är du säker?';
$_MODULE['<{rl_aimodulemaker}prestashop>confirm_38cf14f0a192e9450298230dd8d5c9b0'] = 'Ändringarna kan inte ångras';
$_MODULE['<{rl_aimodulemaker}prestashop>confirm_b9987a246a537f4fe86f1f2e3d10dbdb'] = 'Visa';
$_MODULE['<{rl_aimodulemaker}prestashop>confirm_ea4788705e6873b424c65e91c2846b19'] = 'Avbryt';

// Hjälptexter
$_MODULE['<{rl_aimodulemaker}prestashop>help_6a26f548831e6a8c26bfbbd9f6ec61e0'] = 'Hjälp';
$_MODULE['<{rl_aimodulemaker}prestashop>help_9dffbf69ffba8bc38bc4e01abf4b1675'] = 'Text';
$_MODULE['<{rl_aimodulemaker}prestashop>help_c9cc8cce247e49bae79f15173ce97354'] = 'Spara';
$_MODULE['<{rl_aimodulemaker}prestashop>help_ea4788705e6873b424c65e91c2846b19'] = 'Avbryt';

// Validering
$_MODULE['<{rl_aimodulemaker}prestashop>validation_e267d34972b3ab66b987fbad59fba513'] = 'Ogiltigt format för modulnamn';
$_MODULE['<{rl_aimodulemaker}prestashop>validation_ff324f870a2a25f2997769e12623534f'] = 'Ogiltigt format för version';
$_MODULE['<{rl_aimodulemaker}prestashop>validation_e89cbadbc41b6d0a65e56f9e4749b819'] = 'Filen är för stor';
$_MODULE['<{rl_aimodulemaker}prestashop>validation_db0f22233b46fc6da87ef86c463cf3fd'] = 'Filtypen stöds inte';

// AI-relaterade
$_MODULE['<{rl_aimodulemaker}prestashop>ai_12a2993c70c8b5b0ce75f6511acb6dd3'] = 'AI Assistent';
$_MODULE['<{rl_aimodulemaker}prestashop>ai_94966d90747b97d1f0f206c98a8b1ac3'] = 'Skicka';
$_MODULE['<{rl_aimodulemaker}prestashop>ai_5e9df908eafa83cb51c0a3720e8348c7'] = 'Rensa';
$_MODULE['<{rl_aimodulemaker}prestashop>ai_0095a9fa74d1713e43e370a7d7846224'] = 'Exportera';

================
File: upgrade/index.php
================
<?php
header('Expires: Mon, 26 Jul 1997 05:00:00 GMT');
header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT');
header('Cache-Control: no-store, no-cache, must-revalidate');
header('Cache-Control: post-check=0, pre-check=0', false);
header('Pragma: no-cache');
header('Location: ../');
exit;

================
File: upgrade/upgrade-1.1.0.php
================
<?php
if (!defined('_PS_VERSION_')) {
    exit;
}

function upgrade_module_1_1_0($module)
{
    $sql = [];

    // Add new columns to version history table
    $sql[] = "ALTER TABLE `" . _DB_PREFIX_ . "rl_aimodulemaker_version_history`
              ADD COLUMN `commit_message` TEXT AFTER `commit_hash`,
              ADD COLUMN `branch_name` VARCHAR(255) AFTER `commit_message`";

    // Add new indexes for better performance
    $sql[] = "ALTER TABLE `" . _DB_PREFIX_ . "rl_aimodulemaker_modules`
              ADD INDEX `status_index` (`status`),
              ADD INDEX `date_add_index` (`date_add`)";

    // Add new table for module templates
    $sql[] = "CREATE TABLE IF NOT EXISTS `" . _DB_PREFIX_ . "rl_aimodulemaker_templates` (
        `id` int(11) NOT NULL AUTO_INCREMENT,
        `name` varchar(255) NOT NULL,
        `description` text,
        `type` varchar(50) NOT NULL,
        `content` longtext NOT NULL,
        `is_default` tinyint(1) NOT NULL DEFAULT 0,
        `date_add` datetime NOT NULL,
        `date_upd` datetime NOT NULL,
        PRIMARY KEY (`id`),
        UNIQUE KEY `name` (`name`)
    ) ENGINE=" . _MYSQL_ENGINE_ . " DEFAULT CHARSET=utf8mb4;";

    // Add new configuration values
    $result = true;
    foreach ($sql as $query) {
        $result &= Db::getInstance()->execute($query);
    }

    // Update configuration values
    $result &= Configuration::updateValue('RLAIMODULEMAKER_DEFAULT_AUTHOR', 'Ljustema Sverige AB');
    $result &= Configuration::updateValue('RLAIMODULEMAKER_AUTO_COMMIT', true);
    $result &= Configuration::updateValue('RLAIMODULEMAKER_ENABLE_CACHING', true);

    // Register new hooks
    $result &= $module->registerHook('actionModuleRegisterHookAfter');
    $result &= $module->registerHook('actionModuleUnRegisterHookAfter');

    // Create new directories if needed
    $dirs = [
        'templates',
        'cache',
        'exports'
    ];

    foreach ($dirs as $dir) {
        $path = _PS_MODULE_DIR_ . $module->name . '/' . $dir;
        if (!file_exists($path)) {
            mkdir($path, 0755, true);
        }
    }

    // Create .htaccess files for security
    $htaccess = "deny from all\n";
    foreach ($dirs as $dir) {
        $path = _PS_MODULE_DIR_ . $module->name . '/' . $dir . '/.htaccess';
        file_put_contents($path, $htaccess);
    }

    // Clear cache
    if (file_exists(_PS_MODULE_DIR_ . $module->name . '/cache')) {
        Tools::deleteDirectory(_PS_MODULE_DIR_ . $module->name . '/cache', true);
    }

    return $result;
}

================
File: views/css/admin.css
================
/* Main Layout */
.rl-aimodulemaker-container {
    padding: 15px;
}

/* Panel Customizations */
.rl-aimodulemaker-panel {
    border-radius: 4px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.12);
    margin-bottom: 20px;
}

.rl-aimodulemaker-panel .panel-heading {
    background: #f8f9fa;
    border-bottom: 1px solid #e9ecef;
    padding: 15px;
}

.rl-aimodulemaker-panel .panel-heading i {
    margin-right: 8px;
}

.rl-aimodulemaker-panel .panel-body {
    padding: 20px;
}

/* Status Badges */
.status-badge {
    display: inline-block;
    padding: 4px 8px;
    border-radius: 12px;
    font-size: 12px;
    font-weight: 500;
    text-transform: uppercase;
}

.status-badge.development {
    background-color: #e3f2fd;
    color: #1976d2;
}

.status-badge.testing {
    background-color: #fff3e0;
    color: #f57c00;
}

.status-badge.production {
    background-color: #e8f5e9;
    color: #388e3c;
}

.status-badge.archived {
    background-color: #f5f5f5;
    color: #616161;
}

/* Form Styling */
.rl-form-group {
    margin-bottom: 20px;
}

.rl-form-group label {
    display: block;
    margin-bottom: 8px;
    font-weight: 500;
}

.rl-form-group .help-text {
    font-size: 12px;
    color: #666;
    margin-top: 4px;
}

/* Button Customizations */
.rl-btn {
    border-radius: 4px;
    padding: 8px 16px;
    font-weight: 500;
    transition: all 0.2s;
}

.rl-btn i {
    margin-right: 6px;
}

.rl-btn-primary {
    background: #1976d2;
    color: white;
    border: none;
}

.rl-btn-primary:hover {
    background: #1565c0;
}

/* API Status Indicators */
.api-status {
    display: flex;
    align-items: center;
    margin-bottom: 8px;
}

.api-status .status-dot {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    margin-right: 8px;
}

.api-status .status-dot.active {
    background-color: #4caf50;
}

.api-status .status-dot.inactive {
    background-color: #f44336;
}

/* Loading States */
.loading-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(255,255,255,0.8);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 1000;
}

.loading-spinner {
    border: 3px solid #f3f3f3;
    border-top: 3px solid #1976d2;
    border-radius: 50%;
    width: 24px;
    height: 24px;
    animation: spin 1s linear infinite;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

/* Alert Messages */
.rl-alert {
    padding: 12px 16px;
    margin-bottom: 16px;
    border-radius: 4px;
    border-left: 4px solid transparent;
}

.rl-alert-success {
    background-color: #e8f5e9;
    border-left-color: #4caf50;
    color: #2e7d32;
}

.rl-alert-warning {
    background-color: #fff3e0;
    border-left-color: #ff9800;
    color: #ef6c00;
}

.rl-alert-error {
    background-color: #ffebee;
    border-left-color: #f44336;
    color: #c62828;
}

/* Modal Customizations */
.rl-modal .modal-header {
    background: #f8f9fa;
    border-bottom: 1px solid #e9ecef;
    padding: 15px 20px;
}

.rl-modal .modal-body {
    padding: 20px;
}

.rl-modal .modal-footer {
    background: #f8f9fa;
    border-top: 1px solid #e9ecef;
    padding: 15px 20px;
}

/* Utility Classes */
.margin-top-1 { margin-top: 10px; }
.margin-bottom-1 { margin-bottom: 10px; }
.margin-left-1 { margin-left: 10px; }
.margin-right-1 { margin-right: 10px; }

.text-success { color: #4caf50; }
.text-warning { color: #ff9800; }
.text-error { color: #f44336; }
.text-muted { color: #757575; }

/* Responsive Adjustments */
@media (max-width: 768px) {
    .rl-aimodulemaker-panel {
        margin-bottom: 15px;
    }

    .rl-aimodulemaker-panel .panel-body {
        padding: 15px;
    }

    .rl-btn {
        width: 100%;
        margin-bottom: 10px;
    }
}

================
File: views/css/components.css
================
/* AI Chat Component */
.ai-chat-container {
    height: 100%;
    display: flex;
    flex-direction: column;
}

.chat-messages {
    flex: 1;
    overflow-y: auto;
    padding: 15px;
    background: #fff;
    border: 1px solid #e0e0e0;
    border-radius: 4px;
}

.message {
    margin-bottom: 15px;
    display: flex;
    flex-direction: column;
}

.message.user {
    align-items: flex-end;
}

.message.assistant {
    align-items: flex-start;
}

.message-bubble {
    max-width: 80%;
    padding: 10px 15px;
    border-radius: 15px;
    position: relative;
}

.message.user .message-bubble {
    background: #e3f2fd;
    color: #1565c0;
}

.message.assistant .message-bubble {
    background: #f5f5f5;
    color: #212121;
}

.message-meta {
    font-size: 12px;
    color: #757575;
    margin-top: 4px;
}

.message code {
    display: block;
    background: #f8f9fa;
    padding: 10px;
    border-radius: 4px;
    margin: 5px 0;
    font-family: monospace;
    white-space: pre-wrap;
    border: 1px solid #e0e0e0;
}

.chat-input-container {
    margin-top: 15px;
    padding: 10px;
    background: #f8f9fa;
    border: 1px solid #e0e0e0;
    border-radius: 4px;
}

.chat-toolbar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 10px;
}

.typing-indicator {
    padding: 10px;
    display: flex;
    align-items: center;
}

.typing-indicator span {
    height: 8px;
    width: 8px;
    background: #90a4ae;
    border-radius: 50%;
    margin: 0 2px;
    display: inline-block;
    animation: typing 1s infinite ease-in-out;
}

.typing-indicator span:nth-child(2) { animation-delay: 0.2s; }
.typing-indicator span:nth-child(3) { animation-delay: 0.4s; }

@keyframes typing {
    0%, 100% { transform: translateY(0); }
    50% { transform: translateY(-5px); }
}

/* File Explorer Component */
.file-explorer {
    height: 100%;
    display: flex;
    flex-direction: column;
}

.file-tree {
    flex: 1;
    overflow-y: auto;
    background: #fff;
    border: 1px solid #e0e0e0;
    border-radius: 4px;
    padding: 10px;
}

.file-item {
    padding: 8px 10px;
    cursor: pointer;
    display: flex;
    align-items: center;
    border-radius: 4px;
    transition: background-color 0.2s;
}

.file-item:hover {
    background-color: #f5f5f5;
}

.file-item.selected {
    background-color: #e3f2fd;
}

.file-item i {
    margin-right: 8px;
}

.folder-item > .file-item {
    font-weight: 500;
}

.folder-content {
    margin-left: 20px;
}

.file-actions {
    margin-left: auto;
    opacity: 0;
    transition: opacity 0.2s;
}

.file-item:hover .file-actions {
    opacity: 1;
}

.file-preview {
    border: 1px solid #e0e0e0;
    border-radius: 4px;
    padding: 15px;
    margin-top: 15px;
}

/* Code Editor Customization */
.CodeMirror {
    height: 400px;
    border: 1px solid #e0e0e0;
    border-radius: 4px;
    font-family: 'JetBrains Mono', monospace;
}

.cm-s-default .cm-keyword { color: #7c4dff; }
.cm-s-default .cm-string { color: #00c853; }
.cm-s-default .cm-comment { color: #757575; }
.cm-s-default .cm-variable { color: #0277bd; }
.cm-s-default .cm-def { color: #d32f2f; }

/* Module Builder Component */
.module-preview {
    border: 1px solid #e0e0e0;
    border-radius: 4px;
    padding: 15px;
    background: #fff;
}

.module-form-section {
    margin-bottom: 20px;
    padding: 15px;
    background: #f8f9fa;
    border-radius: 4px;
}

.module-form-section h3 {
    margin-top: 0;
    margin-bottom: 15px;
    font-size: 16px;
    font-weight: 500;
}

/* Settings Component */
.settings-section {
    margin-bottom: 30px;
}

.settings-section-header {
    margin-bottom: 15px;
    padding-bottom: 10px;
    border-bottom: 2px solid #e0e0e0;
}

.api-key-input-group {
    display: flex;
    align-items: center;
}

.api-key-input-group .form-control {
    border-top-right-radius: 0;
    border-bottom-right-radius: 0;
}

.api-key-input-group .btn {
    border-top-left-radius: 0;
    border-bottom-left-radius: 0;
}

/* Theme and Color Variables */
:root {
    --primary-color: #1976d2;
    --secondary-color: #424242;
    --success-color: #4caf50;
    --warning-color: #ff9800;
    --error-color: #f44336;
    --background-color: #f8f9fa;
    --border-color: #e0e0e0;
    --text-primary: #212121;
    --text-secondary: #757575;
}

/* Dark Mode Support */
@media (prefers-color-scheme: dark) {
    :root {
        --background-color: #1e1e1e;
        --border-color: #424242;
        --text-primary: #ffffff;
        --text-secondary: #bdbdbd;
    }

    .CodeMirror {
        background: #2d2d2d;
        color: #e0e0e0;
    }

    .file-item:hover {
        background-color: #2d2d2d;
    }
}

================
File: views/js/admin.js
================
/**
 * Admin JavaScript för AI Module Maker
 * @author Ljustema Sverige AB
 */

class RlAiModuleMakerAdmin {
    constructor() {
        this.initializeComponents();
        this.bindEvents();
        this.setupAjaxDefaults();
    }

    /**
     * Initialisera komponenter
     */
    initializeComponents() {
        // Initiera tooltips
        $('[data-toggle="tooltip"]').tooltip();

        // Initiera select2 för avancerade dropdown-menyer
        if ($.fn.select2) {
            $('.rl-select2').select2({
                width: '100%',
                dropdownAutoWidth: true
            });
        }

        // Initiera datatabeller
        if ($.fn.dataTable) {
            $('.rl-datatable').dataTable({
                pageLength: 25,
                responsive: true,
                dom: '<"row"<"col-sm-6"l><"col-sm-6"f>><"row"<"col-sm-12"tr>><"row"<"col-sm-5"i><"col-sm-7"p>>',
                language: {
                    search: '',
                    searchPlaceholder: 'Sök...'
                }
            });
        }
    }

    /**
     * Bind events
     */
    bindEvents() {
        // Hantera formulärsubmit
        $(document).on('submit', '.rl-ajax-form', (e) => this.handleFormSubmit(e));

        // Hantera bulk actions
        $(document).on('click', '.bulk-action-btn', (e) => this.handleBulkAction(e));

        // Hantera tab-navigation
        $(document).on('click', '.rl-tab-link', (e) => this.handleTabNavigation(e));

        // Hantera modul-statusändringar
        $(document).on('change', '.module-status-select', (e) => this.handleStatusChange(e));

        // Hantera refresh av data
        $(document).on('click', '.refresh-data', (e) => this.handleDataRefresh(e));

        // Hantera export
        $(document).on('click', '.export-btn', (e) => this.handleExport(e));

        // Hantera bekräftelsedialoger
        $(document).on('click', '[data-confirm]', (e) => this.handleConfirmation(e));
    }

    /**
     * Sätt upp standard Ajax-inställningar
     */
    setupAjaxDefaults() {
        $.ajaxSetup({
            headers: {
                'X-CSRF-Token': prestashop.security.token
            }
        });

        // Global Ajax error handler
        $(document).ajaxError((event, jqXHR, settings, error) => {
            this.handleAjaxError(jqXHR, error);
        });
    }

    /**
     * Hantera formulärsubmit
     */
    async handleFormSubmit(event) {
        event.preventDefault();
        const $form = $(event.currentTarget);
        const $submitButton = $form.find('[type="submit"]');

        try {
            this.showLoading($submitButton);
            
            const formData = new FormData($form[0]);
            const response = await $.ajax({
                url: $form.attr('action'),
                type: 'POST',
                data: formData,
                processData: false,
                contentType: false
            });

            if (response.success) {
                this.showSuccess(response.message);
                if (response.redirect) {
                    window.location.href = response.redirect;
                } else if (response.reload) {
                    window.location.reload();
                }
            } else {
                this.showError(response.error);
            }
        } catch (error) {
            this.showError(error.message);
        } finally {
            this.hideLoading($submitButton);
        }
    }

    /**
     * Hantera bulk-actions
     */
    async handleBulkAction(event) {
        const $button = $(event.currentTarget);
        const action = $button.data('action');
        const selectedIds = this.getSelectedIds();

        if (!selectedIds.length) {
            this.showError('Inga objekt valda');
            return;
        }

        if (!await this.confirm('Är du säker på att du vill ' + action + ' valda objekt?')) {
            return;
        }

        try {
            this.showLoading($button);
            
            const response = await $.ajax({
                url: $button.data('url'),
                type: 'POST',
                data: {
                    action: action,
                    ids: selectedIds
                }
            });

            if (response.success) {
                this.showSuccess(response.message);
                if (response.reload) {
                    window.location.reload();
                }
            } else {
                this.showError(response.error);
            }
        } catch (error) {
            this.showError(error.message);
        } finally {
            this.hideLoading($button);
        }
    }

    /**
     * Hantera tab-navigation
     */
    handleTabNavigation(event) {
        event.preventDefault();
        const $link = $(event.currentTarget);
        const target = $link.attr('href');

        // Uppdatera aktiv tab
        $('.rl-tab-link').removeClass('active');
        $link.addClass('active');

        // Visa rätt innehåll
        $('.rl-tab-content').hide();
        $(target).show();

        // Uppdatera URL om det behövs
        if (history.pushState) {
            history.pushState(null, null, target);
        }
    }

    /**
     * Hantera statusändringar
     */
    async handleStatusChange(event) {
        const $select = $(event.currentTarget);
        const moduleId = $select.data('module-id');
        const newStatus = $select.val();

        try {
            const response = await $.ajax({
                url: $select.data('url'),
                type: 'POST',
                data: {
                    action: 'updateStatus',
                    module_id: moduleId,
                    status: newStatus
                }
            });

            if (response.success) {
                this.showSuccess('Status uppdaterad');
            } else {
                this.showError(response.error);
                $select.val($select.data('original-value'));
            }
        } catch (error) {
            this.showError(error.message);
            $select.val($select.data('original-value'));
        }
    }

    /**
     * Hantera data-uppdatering
     */
    async handleDataRefresh(event) {
        const $button = $(event.currentTarget);
        const target = $button.data('target');

        try {
            this.showLoading($button);
            
            const response = await $.ajax({
                url: $button.data('url'),
                type: 'POST',
                data: { action: 'refresh' }
            });

            if (response.success) {
                $(target).html(response.html);
                this.initializeComponents();
                this.showSuccess('Data uppdaterad');
            } else {
                this.showError(response.error);
            }
        } catch (error) {
            this.showError(error.message);
        } finally {
            this.hideLoading($button);
        }
    }

    /**
     * Hantera export
     */
    handleExport(event) {
        const $button = $(event.currentTarget);
        const url = new URL($button.data('url'), window.location.origin);
        const params = $button.data('params');

        // Lägg till parametrar till URL:en
        if (params) {
            Object.keys(params).forEach(key => {
                url.searchParams.append(key, params[key]);
            });
        }

        // Öppna exportlänk i nytt fönster
        window.open(url.toString(), '_blank');
    }

    /**
     * Hjälpmetoder
     */
    getSelectedIds() {
        return $('.rl-bulk-checkbox:checked').map(function() {
            return $(this).val();
        }).get();
    }

    async confirm(message) {
        return new Promise(resolve => {
            if (confirm(message)) {
                resolve(true);
            } else {
                resolve(false);
            }
        });
    }

    showLoading($element) {
        $element.prop('disabled', true);
        $element.data('original-text', $element.html());
        $element.html('<i class="icon icon-spinner icon-spin"></i> Laddar...');
    }

    hideLoading($element) {
        $element.prop('disabled', false);
        $element.html($element.data('original-text'));
    }

    showSuccess(message) {
        $.growl.notice({ message: message });
    }

    showError(message) {
        $.growl.error({ message: message });
    }

    handleAjaxError(jqXHR, error) {
        let errorMessage = 'Ett fel uppstod';
        
        if (jqXHR.responseJSON && jqXHR.responseJSON.error) {
            errorMessage = jqXHR.responseJSON.error;
        } else if (error) {
            errorMessage = error;
        }

        this.showError(errorMessage);
    }

    /**
     * Format helpers
     */
    formatDate(date) {
        return new Date(date).toLocaleDateString('sv-SE', {
            year: 'numeric',
            month: 'short',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        });
    }

    formatFileSize(bytes) {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }
}

// Initialisera när dokumentet är klart
$(document).ready(() => {
    window.RlAiModuleMaker = new RlAiModuleMakerAdmin();
});

================
File: views/js/aiChat.js
================
/**
 * AI Chat handler för AI Module Maker
 * @author Ljustema Sverige AB
 */

class AiChatHandler {
    constructor(config) {
        this.config = config;
        this.conversation = [];
        this.isProcessing = false;
        this.currentContext = null;
        
        // Cache DOM elements
        this.chatContainer = $('.ai-chat-container');
        this.messagesContainer = $('.chat-messages');
        this.inputField = $('.message-input');
        this.sendButton = $('.send-message');
        this.modelSelector = $('.ai-model-selector');
        this.clearButton = $('.clear-chat');
        this.exportButton = $('.export-chat');
        
        this.initializeChat();
        this.bindEvents();
    }

    /**
     * Initialisera chatten
     */
    initializeChat() {
        // Ladda tidigare konversation om det finns
        const savedChat = localStorage.getItem('aiModuleMakerChat');
        if (savedChat) {
            try {
                const chatData = JSON.parse(savedChat);
                this.conversation = chatData.messages || [];
                this.displaySavedMessages();
            } catch (e) {
                console.error('Failed to load saved chat:', e);
            }
        }

        // Visa välkomstmeddelande om det är en ny konversation
        if (this.conversation.length === 0) {
            this.addMessage({
                role: 'assistant',
                content: this.config.welcomeMessage
            });
        }

        // Initiera syntax highlighting
        this.initializeCodeHighlighting();
    }

    /**
     * Bind event handlers
     */
    bindEvents() {
        // Send message events
        this.sendButton.on('click', () => this.sendMessage());
        this.inputField.on('keypress', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                this.sendMessage();
            }
        });

        // Other controls
        this.clearButton.on('click', () => this.clearChat());
        this.exportButton.on('click', () => this.exportChat());
        this.modelSelector.on('change', () => this.handleModelChange());

        // Context handling
        $(document).on('updateAiContext', (e, context) => {
            this.updateContext(context);
        });
    }

    /**
     * Skicka meddelande till AI
     */
    async sendMessage() {
        if (this.isProcessing || !this.inputField.val().trim()) {
            return;
        }

        const message = this.inputField.val().trim();
        this.inputField.val('');
        this.isProcessing = true;

        // Lägg till användarens meddelande
        this.addMessage({
            role: 'user',
            content: message
        });

        // Visa typing indicator
        this.showTypingIndicator();

        try {
            const response = await this.callAiApi({
                message: message,
                conversation: this.conversation,
                model: this.modelSelector.val(),
                context: this.currentContext
            });

            // Lägg till AI:s svar
            this.addMessage({
                role: 'assistant',
                content: response.content
            });

            // Spara konversationen
            this.saveConversation();

        } catch (error) {
            this.handleError(error);
        } finally {
            this.hideTypingIndicator();
            this.isProcessing = false;
        }
    }

    /**
     * Anropa AI API
     */
    async callAiApi(data) {
        const response = await $.ajax({
            url: this.config.apiEndpoint,
            method: 'POST',
            data: {
                action: 'aiChat',
                ...data
            }
        });

        if (!response.success) {
            throw new Error(response.error || 'AI request failed');
        }

        return response;
    }

    /**
     * Lägg till meddelande i chatten
     */
    addMessage(message) {
        this.conversation.push(message);
        
        const messageHtml = this.createMessageHtml(message);
        this.messagesContainer.append(messageHtml);
        
        // Uppdatera syntax highlighting för nya kodblock
        this.highlightCode();
        
        // Scrolla till botten
        this.scrollToBottom();
    }

    /**
     * Skapa HTML för ett meddelande
     */
    createMessageHtml(message) {
        const isUser = message.role === 'user';
        const formattedContent = this.formatMessageContent(message.content);
        
        return `
            <div class="message ${isUser ? 'user' : 'assistant'}">
                <div class="message-content">
                    <div class="message-header">
                        <i class="icon icon-${isUser ? 'user' : 'robot'}"></i>
                        <span>${isUser ? 'You' : 'AI Assistant'}</span>
                        <span class="message-time">${this.formatTime(new Date())}</span>
                    </div>
                    <div class="message-text">${formattedContent}</div>
                </div>
            </div>
        `;
    }

    /**
     * Formatera meddelandeinnehåll
     */
    formatMessageContent(content) {
        // Hantera kodblock med syntax highlighting
        content = content.replace(/```(\w+)?\n([\s\S]+?)```/g, (match, lang, code) => {
            return `<pre><code class="language-${lang || 'plaintext'}">${this.escapeHtml(code.trim())}</code></pre>`;
        });

        // Hantera inline kod
        content = content.replace(/`([^`]+)`/g, '<code>$1</code>');

        // Konvertera länkar
        content = content.replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2" target="_blank">$1</a>');

        // Hantera radbrytningar
        content = content.replace(/\n/g, '<br>');

        return content;
    }

    /**
     * Initiera syntax highlighting
     */
    initializeCodeHighlighting() {
        if (typeof Prism !== 'undefined') {
            Prism.highlightAll();
        }
    }

    /**
     * Uppdatera kontext
     */
    updateContext(context) {
        this.currentContext = context;
        
        // Visa kontextindikator
        if (context) {
            this.chatContainer.addClass('has-context');
            $('.context-indicator').text(`Context: ${context.type}`);
        } else {
            this.chatContainer.removeClass('has-context');
        }
    }

    /**
     * Rensa chatten
     */
    clearChat() {
        if (confirm(this.config.translations.confirmClear)) {
            this.conversation = [];
            this.messagesContainer.empty();
            localStorage.removeItem('aiModuleMakerChat');
            
            // Visa välkomstmeddelande igen
            this.addMessage({
                role: 'assistant',
                content: this.config.welcomeMessage
            });
        }
    }

    /**
     * Exportera chathistorik
     */
    exportChat() {
        const chatLog = this.conversation.map(msg => {
            return `[${msg.role}] ${msg.content}`;
        }).join('\n\n');

        const blob = new Blob([chatLog], { type: 'text/plain' });
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `ai-chat-export-${new Date().toISOString()}.txt`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        window.URL.revokeObjectURL(url);
    }

    /**
     * Hantera modellbyte
     */
    handleModelChange() {
        const model = this.modelSelector.val();
        this.addMessage({
            role: 'system',
            content: `Switched to ${model} model`
        });
    }

    /**
     * Hjälpmetoder
     */
    showTypingIndicator() {
        $('.typing-indicator').show();
        this.scrollToBottom();
    }

    hideTypingIndicator() {
        $('.typing-indicator').hide();
    }

    scrollToBottom() {
        this.messagesContainer.scrollTop(this.messagesContainer[0].scrollHeight);
    }

    highlightCode() {
        if (typeof Prism !== 'undefined') {
            Prism.highlightAllUnder(this.messagesContainer[0]);
        }
    }

    formatTime(date) {
        return date.toLocaleTimeString('sv-SE', {
            hour: '2-digit',
            minute: '2-digit'
        });
    }

    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }

    saveConversation() {
        localStorage.setItem('aiModuleMakerChat', JSON.stringify({
            messages: this.conversation,
            timestamp: new Date().toISOString()
        }));
    }

    displaySavedMessages() {
        this.conversation.forEach(message => {
            const messageHtml = this.createMessageHtml(message);
            this.messagesContainer.append(messageHtml);
        });
        this.highlightCode();
        this.scrollToBottom();
    }

    handleError(error) {
        this.addMessage({
            role: 'system',
            content: `Error: ${error.message}`
        });
        console.error('AI Chat Error:', error);
    }
}

// Initialisera när dokumentet är klart
$(document).ready(() => {
    if ($('.ai-chat-container').length) {
        window.AiChat = new AiChatHandler({
            apiEndpoint: prestashop.urls.base_ajax_url,
            welcomeMessage: 'Hello! I\'m your AI assistant. How can I help you today?',
            translations: {
                confirmClear: 'Are you sure you want to clear the chat history?'
            }
        });
    }
});

================
File: views/js/fileExplorer.js
================
/**
 * File Explorer för AI Module Maker
 * @author Ljustema Sverige AB
 */

class FileExplorer {
    constructor(config) {
        this.config = config;
        this.currentPath = '';
        this.editors = new Map();
        this.fileTree = null;
        this.selectedNode = null;
        
        this.initializeComponents();
        this.bindEvents();
        this.loadFileTree();
    }

    /**
     * Initialisera komponenter
     */
    initializeComponents() {
        // Initialize file tree
        this.fileTree = new JSTree('#file-tree', {
            core: {
                themes: {
                    name: 'default',
                    dots: false,
                    icons: true
                },
                check_callback: true,
                data: []
            },
            plugins: ['types', 'contextmenu', 'dnd', 'search'],
            types: {
                default: {
                    icon: 'icon-file'
                },
                folder: {
                    icon: 'icon-folder'
                },
                php: {
                    icon: 'icon-php'
                },
                js: {
                    icon: 'icon-js'
                },
                css: {
                    icon: 'icon-css'
                },
                tpl: {
                    icon: 'icon-smarty'
                }
            },
            contextmenu: {
                items: (node) => this.getContextMenu(node)
            }
        });

        // Initialize code editor
        this.initializeCodeEditor();

        // Initialize search
        this.initializeSearch();
    }

    /**
     * Bind events
     */
    bindEvents() {
        // File tree events
        this.fileTree.on('select_node.jstree', (e, data) => this.handleNodeSelect(data.node));
        this.fileTree.on('rename_node.jstree', (e, data) => this.handleNodeRename(data.node));
        this.fileTree.on('move_node.jstree', (e, data) => this.handleNodeMove(data.node));
        this.fileTree.on('delete_node.jstree', (e, data) => this.handleNodeDelete(data.node));

        // Button events
        $('.refresh-files').on('click', () => this.refreshFiles());
        $('.create-file').on('click', () => this.showCreateFileModal());
        $('.create-folder').on('click', () => this.showCreateFolderModal());
        $('.save-file').on('click', () => this.saveCurrentFile());
        
        // Search events
        $('.file-search').on('keyup', _.debounce(() => this.searchFiles(), 300));

        // AI integration
        $('.ask-ai').on('click', () => this.askAiAboutFile());
    }

    /**
     * Ladda filträd
     */
    async loadFileTree() {
        try {
            const response = await $.ajax({
                url: this.config.apiEndpoint,
                method: 'POST',
                data: {
                    action: 'getFileTree',
                    module_id: this.config.moduleId
                }
            });

            if (response.success) {
                this.fileTree.settings.core.data = this.transformFileData(response.files);
                this.fileTree.refresh();
            } else {
                throw new Error(response.error);
            }
        } catch (error) {
            this.handleError('Failed to load file tree:', error);
        }
    }

    /**
     * Transformera fildata till JSTree-format
     */
    transformFileData(files, parentId = '#') {
        return files.map((file, index) => ({
            id: file.path || `node_${index}`,
            parent: parentId,
            text: file.name,
            type: file.type === 'directory' ? 'folder' : this.getFileType(file.name),
            data: {
                path: file.path,
                type: file.type
            },
            state: {
                opened: parentId === '#'
            },
            children: file.children ? this.transformFileData(file.children, file.path) : undefined
        }));
    }

    /**
     * Initiera kodredigerare
     */
    initializeCodeEditor() {
        this.defaultEditor = CodeMirror.fromTextArea(document.getElementById('code-editor'), {
            lineNumbers: true,
            mode: 'php',
            theme: 'default',
            autoCloseBrackets: true,
            matchBrackets: true,
            indentUnit: 4,
            tabSize: 4,
            lineWrapping: true,
            foldGutter: true,
            gutters: ['CodeMirror-linenumbers', 'CodeMirror-foldgutter'],
            extraKeys: {
                'Ctrl-Space': 'autocomplete',
                'Ctrl-S': () => this.saveCurrentFile()
            }
        });
    }

    /**
     * Hantera filval
     */
    async handleNodeSelect(node) {
        if (node.data.type === 'file') {
            await this.openFile(node.data.path);
        }
        this.selectedNode = node;
    }

    /**
     * Öppna fil
     */
    async openFile(path) {
        try {
            const response = await $.ajax({
                url: this.config.apiEndpoint,
                method: 'POST',
                data: {
                    action: 'getFileContent',
                    path: path,
                    module_id: this.config.moduleId
                }
            });

            if (response.success) {
                this.currentPath = path;
                this.setEditorContent(response.content, this.getFileType(path));
                this.updateFileInfo(path);
            } else {
                throw new Error(response.error);
            }
        } catch (error) {
            this.handleError('Failed to open file:', error);
        }
    }

    /**
     * Spara nuvarande fil
     */
    async saveCurrentFile() {
        if (!this.currentPath) return;

        try {
            const response = await $.ajax({
                url: this.config.apiEndpoint,
                method: 'POST',
                data: {
                    action: 'saveFile',
                    path: this.currentPath,
                    content: this.defaultEditor.getValue(),
                    module_id: this.config.moduleId
                }
            });

            if (response.success) {
                $.growl.notice({ message: 'File saved successfully' });
            } else {
                throw new Error(response.error);
            }
        } catch (error) {
            this.handleError('Failed to save file:', error);
        }
    }

    /**
     * Skapa fil/mapp
     */
    async createItem(type, name, content = '') {
        const parentPath = this.selectedNode ? 
            this.selectedNode.data.path : 
            '';

        try {
            const response = await $.ajax({
                url: this.config.apiEndpoint,
                method: 'POST',
                data: {
                    action: 'createItem',
                    type: type,
                    name: name,
                    content: content,
                    parent_path: parentPath,
                    module_id: this.config.moduleId
                }
            });

            if (response.success) {
                await this.refreshFiles();
                $.growl.notice({ message: `${type} created successfully` });
            } else {
                throw new Error(response.error);
            }
        } catch (error) {
            this.handleError(`Failed to create ${type}:`, error);
        }
    }

    /**
     * Kontextmeny för noder
     */
    getContextMenu(node) {
        const items = {};

        if (node.data.type === 'directory') {
            items.create = {
                label: 'Create',
                submenu: {
                    file: {
                        label: 'File',
                        action: () => this.showCreateFileModal()
                    },
                    folder: {
                        label: 'Folder',
                        action: () => this.showCreateFolderModal()
                    }
                }
            };
        }

        items.rename = {
            label: 'Rename',
            action: () => this.fileTree.edit(node)
        };

        items.delete = {
            label: 'Delete',
            action: () => this.confirmDelete(node)
        };

        if (node.data.type === 'file') {
            items.askAi = {
                label: 'Ask AI',
                action: () => this.askAiAboutFile()
            };
        }

        return items;
    }

    /**
     * UI Helpers
     */
    showCreateFileModal() {
        $('#create-item-modal')
            .find('.modal-title').text('Create New File').end()
            .find('[name="item_type"]').val('file').end()
            .modal('show');
    }

    showCreateFolderModal() {
        $('#create-item-modal')
            .find('.modal-title').text('Create New Folder').end()
            .find('[name="item_type"]').val('directory').end()
            .modal('show');
    }

    updateFileInfo(path) {
        $('.file-info').html(`
            <div class="file-path">${path}</div>
            <div class="file-type">Type: ${this.getFileType(path)}</div>
        `);
    }

    /**
     * Integration med AI
     */
    askAiAboutFile() {
        const content = this.defaultEditor.getValue();
        const context = {
            file: this.currentPath,
            content: content,
            type: this.getFileType(this.currentPath)
        };

        $(document).trigger('openAiChat', { context });
    }

    /**
     * Utility functions
     */
    getFileType(filename) {
        const extension = filename.split('.').pop().toLowerCase();
        const typeMap = {
            'php': 'php',
            'js': 'javascript',
            'css': 'css',
            'tpl': 'smarty',
            'html': 'html',
            'xml': 'xml',
            'json': 'javascript',
            'md': 'markdown'
        };
        return typeMap[extension] || 'text';
    }

    setEditorContent(content, mode) {
        this.defaultEditor.setValue(content);
        this.defaultEditor.setOption('mode', mode);
        this.defaultEditor.refresh();
    }

    handleError(message, error) {
        console.error(message, error);
        $.growl.error({
            message: error.message || 'An error occurred',
            duration: 5000
        });
    }

    /**
     * Sökfunktioner
     */
    initializeSearch() {
        const searchBox = $('.file-search');
        searchBox.on('keyup', _.debounce(() => {
            const term = searchBox.val();
            this.fileTree.search(term);
        }, 300));
    }

    searchFiles() {
        const term = $('.file-search').val();
        if (term.length > 2) {
            this.fileTree.search(term);
        } else if (term.length === 0) {
            this.fileTree.clear_search();
        }
    }

    /**
     * Refresh functions
     */
    async refreshFiles() {
        await this.loadFileTree();
        if (this.currentPath) {
            await this.openFile(this.currentPath);
        }
    }
}

// Initialisera när dokumentet är klart
$(document).ready(() => {
    if ($('#file-explorer').length) {
        window.fileExplorer = new FileExplorer({
            apiEndpoint: prestashop.urls.base_url + 'moduleFiles',
            moduleId: $('#file-explorer').data('module-id')
        });
    }
});

================
File: views/js/moduleBuilder.js
================
/**
 * Module Builder för AI Module Maker
 * @author Ljustema Sverige AB
 */

class ModuleBuilder {
    constructor(config) {
        this.config = config;
        this.currentStep = 1;
        this.moduleData = {};
        this.generationProgress = 0;
        
        this.initializeComponents();
        this.bindEvents();
    }

    /**
     * Initialisera komponenter
     */
    initializeComponents() {
        // Form elements
        this.form = $('#module-builder-form');
        this.previewContainer = $('.module-preview');
        this.generateButton = $('#generate-module');
        this.progressModal = $('#generation-progress-modal');
        this.progressBar = $('.progress-bar');
        this.progressInfo = $('.progress-info');
        
        // Validering
        this.initializeValidation();
        
        // CodeMirror editors för kodförhandsgranskning
        this.initializeCodeEditors();
    }

    /**
     * Bind events
     */
    bindEvents() {
        // Form events
        this.form.on('change', 'input, select, textarea', () => this.updatePreview());
        this.form.on('submit', (e) => this.handleSubmit(e));
        
        // Generation events
        this.generateButton.on('click', () => this.startGeneration());
        
        // AI Chat integration
        $('.ask-ai-help').on('click', () => this.openAiChat());
        
        // GitHub integration
        $('#create-github-repo').on('change', () => this.toggleGitHubOptions());
        
        // Navigation
        $('.nav-step').on('click', (e) => this.navigateToStep(e));
    }

    /**
     * Initialisera formulärvalidering
     */
    initializeValidation() {
        this.form.validate({
            rules: {
                module_name: {
                    required: true,
                    pattern: /^[a-z][a-z0-9_]+$/,
                    minlength: 3,
                    remote: {
                        url: this.config.checkNameUrl,
                        type: 'post',
                        data: {
                            module_name: () => $('#module_name').val()
                        }
                    }
                },
                display_name: 'required',
                version: {
                    required: true,
                    pattern: /^\d+\.\d+\.\d+$/
                }
            },
            messages: {
                module_name: {
                    pattern: 'Only lowercase letters, numbers and underscore. Must start with a letter.',
                    remote: 'This module name already exists.'
                },
                version: {
                    pattern: 'Use semantic versioning (e.g., 1.0.0)'
                }
            }
        });
    }

    /**
     * Initiera kodeditors
     */
    initializeCodeEditors() {
        $('.code-preview').each((_, element) => {
            CodeMirror.fromTextArea(element, {
                mode: $(element).data('mode') || 'php',
                theme: 'default',
                lineNumbers: true,
                readOnly: true,
                viewportMargin: Infinity
            });
        });
    }

    /**
     * Uppdatera förhandsgranskning
     */
    async updatePreview() {
        this.moduleData = this.form.serializeObject();
        
        try {
            const response = await $.ajax({
                url: this.config.previewUrl,
                method: 'POST',
                data: {
                    action: 'generatePreview',
                    module_data: this.moduleData
                }
            });

            if (response.success) {
                this.updatePreviewContent(response.preview);
            }
        } catch (error) {
            console.error('Preview generation failed:', error);
        }
    }

    /**
     * Starta modulgenerering
     */
    async startGeneration() {
        if (!this.form.valid()) {
            return;
        }

        this.showProgress();
        this.generationProgress = 0;
        
        try {
            await this.generateModule();
        } catch (error) {
            this.handleError(error);
        } finally {
            this.hideProgress();
        }
    }

    /**
     * Generera modul
     */
    async generateModule() {
        const steps = [
            { name: 'Preparing module structure', weight: 10 },
            { name: 'Generating base files', weight: 20 },
            { name: 'Creating controllers', weight: 15 },
            { name: 'Generating templates', weight: 15 },
            { name: 'Setting up database', weight: 10 },
            { name: 'Configuring hooks', weight: 10 },
            { name: 'Setting up GitHub repository', weight: 10 },
            { name: 'Creating documentation', weight: 5 },
            { name: 'Finalizing module', weight: 5 }
        ];

        for (const step of steps) {
            this.updateProgress(step.name);
            await this.executeGenerationStep(step);
            this.generationProgress += step.weight;
            this.updateProgressBar();
        }

        await this.finalizeGeneration();
    }

    /**
     * Utför ett genereringssteg
     */
    async executeGenerationStep(step) {
        const response = await $.ajax({
            url: this.config.generateUrl,
            method: 'POST',
            data: {
                action: 'executeStep',
                step: step.name,
                module_data: this.moduleData
            }
        });

        if (!response.success) {
            throw new Error(`Failed at step "${step.name}": ${response.error}`);
        }

        return response;
    }

    /**
     * Slutför genereringen
     */
    async finalizeGeneration() {
        const response = await $.ajax({
            url: this.config.generateUrl,
            method: 'POST',
            data: {
                action: 'finalizeGeneration',
                module_data: this.moduleData
            }
        });

        if (response.success) {
            this.showSuccess(response.module);
        } else {
            throw new Error(response.error);
        }
    }

    /**
     * UI Updates
     */
    updateProgress(stepName) {
        this.progressInfo.html(`
            <i class="icon icon-cog icon-spin"></i> ${stepName}...
        `);
    }

    updateProgressBar() {
        this.progressBar.css('width', `${this.generationProgress}%`);
    }

    showProgress() {
        this.progressModal.modal('show');
    }

    hideProgress() {
        this.progressModal.modal('hide');
    }

    showSuccess(moduleData) {
        $('#module-complete-modal')
            .find('.generation-summary').html(this.generateSummaryHtml(moduleData))
            .end()
            .modal('show');
    }

    /**
     * Navigering mellan steg
     */
    navigateToStep(event) {
        event.preventDefault();
        const targetStep = $(event.currentTarget).data('step');
        
        if (this.validateCurrentStep()) {
            this.showStep(targetStep);
        }
    }

    showStep(step) {
        this.currentStep = step;
        $('.builder-step').hide();
        $(`#step-${step}`).show();
        this.updateNavigationState();
    }

    validateCurrentStep() {
        const currentFields = $(`#step-${this.currentStep}`).find('input, select, textarea');
        return this.form.validate().element(currentFields);
    }

    updateNavigationState() {
        $('.nav-step').removeClass('active completed');
        $(`.nav-step[data-step="${this.currentStep}"]`).addClass('active');
        
        for (let i = 1; i < this.currentStep; i++) {
            $(`.nav-step[data-step="${i}"]`).addClass('completed');
        }
    }

    /**
     * Hjälpmetoder
     */
    generateSummaryHtml(moduleData) {
        return `
            <div class="generation-summary">
                <h4>Module Generated Successfully!</h4>
                <p><strong>Name:</strong> ${moduleData.name}</p>
                <p><strong>Version:</strong> ${moduleData.version}</p>
                <p><strong>Files Generated:</strong> ${moduleData.fileCount}</p>
                ${moduleData.githubUrl ? `
                    <p><strong>GitHub Repository:</strong> 
                        <a href="${moduleData.githubUrl}" target="_blank">${moduleData.githubUrl}</a>
                    </p>
                ` : ''}
                <div class="alert alert-info">
                    <i class="icon icon-info-circle"></i>
                    Your module has been generated and is ready to use. You can download it now
                    or access it directly through your GitHub repository.
                </div>
            </div>
        `;
    }

    handleError(error) {
        console.error('Generation error:', error);
        $.growl.error({
            message: `Generation failed: ${error.message}`,
            duration: 5000
        });
    }
}

// Initialisera när dokumentet är klart
$(document).ready(() => {
    if ($('#module-builder-form').length) {
        window.moduleBuilder = new ModuleBuilder({
            checkNameUrl: prestashop.urls.base_url + 'checkModuleName',
            previewUrl: prestashop.urls.base_url + 'previewModule',
            generateUrl: prestashop.urls.base_url + 'generateModule',
            translations: {
                error: 'An error occurred',
                success: 'Module generated successfully'
            }
        });
    }
});

================
File: views/templates/admin/configure.tpl
================
{extends file="./helpers/view/view.tpl"}

{block name="override_tpl"}
<div class="panel">
    <div class="panel-heading">
        <i class="icon icon-cogs"></i> {l s='AI Module Maker' mod='rl_aimodulemaker'}
    </div>

    <div class="panel-body">
        {if isset($api_status)}
            <div class="row margin-bottom-1">
                <div class="col-md-12">
                    <div class="alert {if $api_status.all_configured}alert-success{else}alert-warning{/if}">
                        <h4>{l s='API Status' mod='rl_aimodulemaker'}</h4>
                        <ul class="list-unstyled">
                            <li>
                                <i class="icon {if $api_status.openai}icon-check text-success{else}icon-times text-danger{/if}"></i>
                                OpenAI API: {if $api_status.openai}{l s='Configured' mod='rl_aimodulemaker'}{else}{l s='Not Configured' mod='rl_aimodulemaker'}{/if}
                            </li>
                            <li>
                                <i class="icon {if $api_status.claude}icon-check text-success{else}icon-times text-danger{/if}"></i>
                                Claude API: {if $api_status.claude}{l s='Configured' mod='rl_aimodulemaker'}{else}{l s='Not Configured' mod='rl_aimodulemaker'}{/if}
                            </li>
                            <li>
                                <i class="icon {if $api_status.github}icon-check text-success{else}icon-times text-danger{/if}"></i>
                                GitHub API: {if $api_status.github}{l s='Configured' mod='rl_aimodulemaker'}{else}{l s='Not Configured' mod='rl_aimodulemaker'}{/if}
                            </li>
                        </ul>
                        {if !$api_status.all_configured}
                            <p>
                                <a href="{$link->getAdminLink('AdminRlAiSettings')|escape:'html':'UTF-8'}" class="btn btn-default">
                                    <i class="icon icon-cog"></i> {l s='Configure APIs' mod='rl_aimodulemaker'}
                                </a>
                            </p>
                        {/if}
                    </div>
                </div>
            </div>
        {/if}

        <div class="row">
            {foreach $moduleActions as $action}
                <div class="col-md-4">
                    <div class="panel">
                        <div class="panel-heading">
                            <i class="icon icon-{$action.icon}"></i> {$action.title|escape:'html':'UTF-8'}
                        </div>
                        <div class="panel-body">
                            <p>{$action.description|escape:'html':'UTF-8'}</p>
                            <a href="{$action.link|escape:'html':'UTF-8'}" class="btn btn-primary">
                                {l s='Go' mod='rl_aimodulemaker'}
                            </a>
                        </div>
                    </div>
                </div>
            {/foreach}
        </div>

        {if isset($module_stats)}
            <div class="row">
                <div class="col-md-12">
                    <div class="panel">
                        <div class="panel-heading">
                            <i class="icon icon-bar-chart"></i> {l s='Module Statistics' mod='rl_aimodulemaker'}
                        </div>
                        <div class="panel-body">
                            <div class="row">
                                <div class="col-md-3">
                                    <div class="well">
                                        <h4>{l s='Total Modules' mod='rl_aimodulemaker'}</h4>
                                        <span class="badge badge-info">{$module_stats.total|intval}</span>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="well">
                                        <h4>{l s='In Development' mod='rl_aimodulemaker'}</h4>
                                        <span class="badge badge-warning">{$module_stats.development|intval}</span>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="well">
                                        <h4>{l s='In Testing' mod='rl_aimodulemaker'}</h4>
                                        <span class="badge badge-info">{$module_stats.testing|intval}</span>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="well">
                                        <h4>{l s='In Production' mod='rl_aimodulemaker'}</h4>
                                        <span class="badge badge-success">{$module_stats.production|intval}</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        {/if}

        {if isset($recent_activity)}
            <div class="row">
                <div class="col-md-12">
                    <div class="panel">
                        <div class="panel-heading">
                            <i class="icon icon-clock-o"></i> {l s='Recent Activity' mod='rl_aimodulemaker'}
                        </div>
                        <div class="panel-body">
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th>{l s='Date' mod='rl_aimodulemaker'}</th>
                                        <th>{l s='Module' mod='rl_aimodulemaker'}</th>
                                        <th>{l s='Action' mod='rl_aimodulemaker'}</th>
                                        <th>{l s='Details' mod='rl_aimodulemaker'}</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    {foreach $recent_activity as $activity}
                                        <tr>
                                            <td>{$activity.date_add|escape:'html':'UTF-8'}</td>
                                            <td>{$activity.module_name|escape:'html':'UTF-8'}</td>
                                            <td>{$activity.action|escape:'html':'UTF-8'}</td>
                                            <td>{$activity.details|escape:'html':'UTF-8'}</td>
                                        </tr>
                                    {/foreach}
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        {/if}
    </div>
</div>
{/block}

================
File: views/templates/admin/module_builder.tpl
================
<div class="panel">
    <div class="panel-heading">
        <i class="icon icon-cube"></i> {l s='Create New Module' mod='rl_aimodulemaker'}
    </div>
    
    <div class="panel-body">
        <div class="row">
            {* Vänster kolumn - Modulformulär *}
            <div class="col-md-6">
                <form id="module-builder-form" class="form-horizontal">
                    <div class="panel">
                        <div class="panel-heading">
                            {l s='Module Information' mod='rl_aimodulemaker'}
                        </div>
                        <div class="panel-body">
                            {* Tekniskt namn *}
                            <div class="form-group">
                                <label class="control-label col-lg-3 required">
                                    {l s='Technical Name' mod='rl_aimodulemaker'}
                                </label>
                                <div class="col-lg-9">
                                    <input type="text" name="module_name" class="form-control" required 
                                           pattern="^[a-z][a-z0-9_]+$" 
                                           placeholder="mymodule">
                                    <p class="help-block">
                                        {l s='Only lowercase letters, numbers and underscore. Must start with a letter.' mod='rl_aimodulemaker'}
                                    </p>
                                </div>
                            </div>

                            {* Visningsnamn *}
                            <div class="form-group">
                                <label class="control-label col-lg-3 required">
                                    {l s='Display Name' mod='rl_aimodulemaker'}
                                </label>
                                <div class="col-lg-9">
                                    <input type="text" name="display_name" class="form-control" required>
                                </div>
                            </div>

                            {* Beskrivning *}
                            <div class="form-group">
                                <label class="control-label col-lg-3 required">
                                    {l s='Description' mod='rl_aimodulemaker'}
                                </label>
                                <div class="col-lg-9">
                                    <textarea name="description" class="form-control" rows="3" required></textarea>
                                </div>
                            </div>

                            {* Version *}
                            <div class="form-group">
                                <label class="control-label col-lg-3 required">
                                    {l s='Version' mod='rl_aimodulemaker'}
                                </label>
                                <div class="col-lg-9">
                                    <input type="text" name="version" class="form-control" required 
                                           pattern="^\d+\.\d+\.\d+$" value="1.0.0">
                                </div>
                            </div>

                            {* Modultyp *}
                            <div class="form-group">
                                <label class="control-label col-lg-3 required">
                                    {l s='Module Type' mod='rl_aimodulemaker'}
                                </label>
                                <div class="col-lg-9">
                                    <select name="type" class="form-control" required>
                                        <option value="payment">{l s='Payment Module' mod='rl_aimodulemaker'}</option>
                                        <option value="shipping">{l s='Shipping Module' mod='rl_aimodulemaker'}</option>
                                        <option value="analytics">{l s='Analytics Module' mod='rl_aimodulemaker'}</option>
                                        <option value="marketplace">{l s='Marketplace Module' mod='rl_aimodulemaker'}</option>
                                        <option value="seo">{l s='SEO Module' mod='rl_aimodulemaker'}</option>
                                        <option value="custom">{l s='Custom Module' mod='rl_aimodulemaker'}</option>
                                    </select>
                                </div>
                            </div>

                            {* AI Model *}
                            <div class="form-group">
                                <label class="control-label col-lg-3 required">
                                    {l s='AI Assistant' mod='rl_aimodulemaker'}
                                </label>
                                <div class="col-lg-9">
                                    <select name="ai_model" class="form-control" required>
                                        {foreach $ai_models as $model}
                                            <option value="{$model.id|escape:'html':'UTF-8'}">
                                                {$model.name|escape:'html':'UTF-8'}
                                            </option>
                                        {/foreach}
                                    </select>
                                </div>
                            </div>

                            {* GitHub Integration *}
                            <div class="form-group">
                                <label class="control-label col-lg-3">
                                    {l s='GitHub Integration' mod='rl_aimodulemaker'}
                                </label>
                                <div class="col-lg-9">
                                    <div class="checkbox">
                                        <label>
                                            <input type="checkbox" name="create_github_repo" value="1">
                                            {l s='Create GitHub repository' mod='rl_aimodulemaker'}
                                        </label>
                                    </div>
                                </div>
                            </div>

                            {* VS Code Integration *}
                            <div class="form-group">
                                <label class="control-label col-lg-3">
                                    {l s='VS Code Integration' mod='rl_aimodulemaker'}
                                </label>
                                <div class="col-lg-9">
                                    <div class="checkbox">
                                        <label>
                                            <input type="checkbox" name="create_vscode_workspace" value="1">
                                            {l s='Generate VS Code workspace' mod='rl_aimodulemaker'}
                                        </label>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </form>
            </div>

            {* Höger kolumn - AI Chat *}
            <div class="col-md-6">
                <div class="panel">
                    <div class="panel-heading">
                        {l s='AI Assistant' mod='rl_aimodulemaker'}
                    </div>
                    <div class="panel-body">
                        <div class="ai-chat-container" style="height: 400px; overflow-y: auto;">
                            <div class="chat-messages"></div>
                        </div>
                        <div class="chat-input margin-top-1">
                            <div class="input-group">
                                <input type="text" class="form-control" id="ai-message-input" 
                                       placeholder="{l s='Describe your module or ask questions...' mod='rl_aimodulemaker'}">
                                <span class="input-group-btn">
                                    <button class="btn btn-primary" type="button" id="send-message">
                                        <i class="icon icon-paper-plane"></i> {l s='Send' mod='rl_aimodulemaker'}
                                    </button>
                                </span>
                            </div>
                        </div>
                    </div>
                </div>

                {* Förhandsgranskning *}
                <div class="panel">
                    <div class="panel-heading">
                        {l s='Module Preview' mod='rl_aimodulemaker'}
                    </div>
                    <div class="panel-body">
                        <div class="module-preview"></div>
                        <div class="text-center margin-top-1">
                            <button type="button" class="btn btn-success btn-lg" id="generate-module">
                                <i class="icon icon-magic"></i> {l s='Generate Module' mod='rl_aimodulemaker'}
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

{* Modaler *}
<div class="modal fade" id="generation-progress-modal">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">{l s='Generating Module' mod='rl_aimodulemaker'}</h4>
            </div>
            <div class="modal-body">
                <div class="progress-info"></div>
                <div class="progress">
                    <div class="progress-bar progress-bar-striped active" style="width: 0%"></div>
                </div>
                <div class="generation-log" style="max-height: 200px; overflow-y: auto;"></div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="module-complete-modal">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">{l s='Module Generated Successfully' mod='rl_aimodulemaker'}</h4>
            </div>
            <div class="modal-body">
                <div class="generation-summary"></div>
                <div class="text-center margin-top-1">
                    <a href="#" class="btn btn-primary download-module">
                        <i class="icon icon-download"></i> {l s='Download Module' mod='rl_aimodulemaker'}
                    </a>
                    <a href="#" class="btn btn-default view-on-github">
                        <i class="icon icon-github"></i> {l s='View on GitHub' mod='rl_aimodulemaker'}
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>

{* JavaScript för modulbyggaren *}
<script type="text/javascript">
    var moduleBuilderConfig = {
        ajaxUrl: '{$link->getAdminLink('AdminRlAiModuleMaker')|addslashes}',
        generateToken: '{$generate_token|escape:'html':'UTF-8'}',
        translations: {
            error: '{l s='Error' mod='rl_aimodulemaker' js=1}',
            success: '{l s='Success' mod='rl_aimodulemaker' js=1}',
            generating: '{l s='Generating module...' mod='rl_aimodulemaker' js=1}',
            waitingAi: '{l s='Waiting for AI response...' mod='rl_aimodulemaker' js=1}'
        }
    };
</script>

================
File: views/templates/admin/module_list.tpl
================
{extends file="./helpers/list/list_content.tpl"}

{block name="td_content"}
    {if $key == 'status'}
        <span class="badge badge-{if $tr.status == 'production'}success
            {elseif $tr.status == 'testing'}warning
            {elseif $tr.status == 'development'}info
            {else}default{/if}">
            {$tr.status|escape:'html':'UTF-8'}
        </span>
    {elseif $key == 'github_repo'}
        {if $tr.github_repo}
            <a href="{$tr.github_repo|escape:'html':'UTF-8'}" target="_blank" class="btn btn-default btn-xs">
                <i class="icon icon-github"></i> {l s='View on GitHub' mod='rl_aimodulemaker'}
            </a>
        {else}
            <span class="text-muted">-</span>
        {/if}
    {elseif $key == 'actions'}
        <div class="btn-group">
            <a href="{$link->getAdminLink('AdminRlAiModuleMaker')|escape:'html':'UTF-8'}&amp;id_module={$tr.id|intval}&amp;updatemodule" 
               class="btn btn-default btn-xs" title="{l s='Edit' mod='rl_aimodulemaker'}">
                <i class="icon icon-pencil"></i>
            </a>
            
            <a href="{$link->getAdminLink('AdminRlAiModuleMaker')|escape:'html':'UTF-8'}&amp;id_module={$tr.id|intval}&amp;duplicatemodule" 
               class="btn btn-default btn-xs" title="{l s='Duplicate' mod='rl_aimodulemaker'}">
                <i class="icon icon-copy"></i>
            </a>
            
            <a href="{$link->getAdminLink('AdminRlAiModuleMaker')|escape:'html':'UTF-8'}&amp;id_module={$tr.id|intval}&amp;exportmodule" 
               class="btn btn-default btn-xs" title="{l s='Export' mod='rl_aimodulemaker'}">
                <i class="icon icon-download"></i>
            </a>

            {if $tr.github_repo}
                <a href="#" class="btn btn-default btn-xs js-sync-github" data-module-id="{$tr.id|intval}" 
                   title="{l s='Sync with GitHub' mod='rl_aimodulemaker'}">
                    <i class="icon icon-refresh"></i>
                </a>
            {/if}

            <a href="{$link->getAdminLink('AdminRlAiModuleMaker')|escape:'html':'UTF-8'}&amp;id_module={$tr.id|intval}&amp;deletemodule" 
               class="btn btn-danger btn-xs" 
               onclick="return confirm('{l s='Are you sure you want to delete this module?' mod='rl_aimodulemaker' js=1}');" 
               title="{l s='Delete' mod='rl_aimodulemaker'}">
                <i class="icon icon-trash"></i>
            </a>
        </div>

        <div class="btn-group margin-top-1">
            <a href="#" class="btn btn-default btn-xs js-module-versions" data-module-id="{$tr.id|intval}" 
               title="{l s='Version History' mod='rl_aimodulemaker'}">
                <i class="icon icon-history"></i> {l s='Versions' mod='rl_aimodulemaker'}
            </a>

            <a href="#" class="btn btn-default btn-xs js-module-ai-chat" data-module-id="{$tr.id|intval}" 
               title="{l s='AI Chat' mod='rl_aimodulemaker'}">
                <i class="icon icon-comments"></i> {l s='AI Chat' mod='rl_aimodulemaker'}
            </a>
        </div>
    {else}
        {$smarty.block.parent}
    {/if}
{/block}

{block name="after"}
    {* Modal för versionshistorik *}
    <div class="modal fade" id="version-history-modal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">{l s='Version History' mod='rl_aimodulemaker'}</h4>
                </div>
                <div class="modal-body">
                    <div class="version-history-content"></div>
                </div>
            </div>
        </div>
    </div>

    {* Modal för AI-chat *}
    <div class="modal fade" id="ai-chat-modal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">{l s='AI Assistant' mod='rl_aimodulemaker'}</h4>
                </div>
                <div class="modal-body">
                    <div class="chat-messages"></div>
                    <div class="chat-input margin-top-1">
                        <div class="input-group">
                            <input type="text" class="form-control" id="ai-message-input" 
                                   placeholder="{l s='Type your message...' mod='rl_aimodulemaker'}">
                            <span class="input-group-btn">
                                <button class="btn btn-primary" type="button" id="send-message">
                                    <i class="icon icon-paper-plane"></i> {l s='Send' mod='rl_aimodulemaker'}
                                </button>
                            </span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
{/block}

================
File: views/templates/admin/settings.tpl
================
<div class="panel">
    <div class="panel-heading">
        <i class="icon icon-cog"></i> {l s='AI Module Maker Settings' mod='rl_aimodulemaker'}
    </div>
    
    <div class="panel-body">
        <form id="module-settings-form" class="form-horizontal" method="post">
            {* API Settings Tab *}
            <div class="panel">
                <div class="panel-heading">
                    <i class="icon icon-key"></i> {l s='API Settings' mod='rl_aimodulemaker'}
                </div>
                <div class="panel-body">
                    {* OpenAI Settings *}
                    <div class="form-group">
                        <label class="control-label col-lg-3">
                            {l s='OpenAI API Key' mod='rl_aimodulemaker'}
                        </label>
                        <div class="col-lg-6">
                            <input type="password" 
                                   name="RLAIMODULEMAKER_OPENAI_API_KEY" 
                                   value="{$currentSettings.openai.key|escape:'html':'UTF-8'}" 
                                   class="form-control">
                        </div>
                        <div class="col-lg-3">
                            <button type="button" class="btn btn-default test-api" data-api="openai">
                                <i class="icon icon-check"></i> {l s='Test Connection' mod='rl_aimodulemaker'}
                            </button>
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="control-label col-lg-3">
                            {l s='OpenAI Model' mod='rl_aimodulemaker'}
                        </label>
                        <div class="col-lg-6">
                            <select name="RLAIMODULEMAKER_OPENAI_MODEL" class="form-control">
                                <option value="gpt-4" {if $currentSettings.openai.model == 'gpt-4'}selected{/if}>
                                    GPT-4 (Most capable)
                                </option>
                                <option value="gpt-3.5-turbo" {if $currentSettings.openai.model == 'gpt-3.5-turbo'}selected{/if}>
                                    GPT-3.5 Turbo (Faster)
                                </option>
                            </select>
                        </div>
                    </div>

                    {* Claude Settings *}
                    <div class="form-group">
                        <label class="control-label col-lg-3">
                            {l s='Claude API Key' mod='rl_aimodulemaker'}
                        </label>
                        <div class="col-lg-6">
                            <input type="password" 
                                   name="RLAIMODULEMAKER_CLAUDE_API_KEY" 
                                   value="{$currentSettings.claude.key|escape:'html':'UTF-8'}" 
                                   class="form-control">
                        </div>
                        <div class="col-lg-3">
                            <button type="button" class="btn btn-default test-api" data-api="claude">
                                <i class="icon icon-check"></i> {l s='Test Connection' mod='rl_aimodulemaker'}
                            </button>
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="control-label col-lg-3">
                            {l s='Claude Model' mod='rl_aimodulemaker'}
                        </label>
                        <div class="col-lg-6">
                            <select name="RLAIMODULEMAKER_CLAUDE_MODEL" class="form-control">
                                <option value="claude-3-opus-20240229" {if $currentSettings.claude.model == 'claude-3-opus-20240229'}selected{/if}>
                                    Claude-3 Opus (Most capable)
                                </option>
                                <option value="claude-3-sonnet-20240229" {if $currentSettings.claude.model == 'claude-3-sonnet-20240229'}selected{/if}>
                                    Claude-3 Sonnet (Balanced)
                                </option>
                            </select>
                        </div>
                    </div>

                    {* GitHub Settings *}
                    <div class="form-group">
                        <label class="control-label col-lg-3">
                            {l s='GitHub Token' mod='rl_aimodulemaker'}
                        </label>
                        <div class="col-lg-6">
                            <input type="password" 
                                   name="RLAIMODULEMAKER_GITHUB_TOKEN" 
                                   value="{$currentSettings.github.token|escape:'html':'UTF-8'}" 
                                   class="form-control">
                            <p class="help-block">
                                {l s='Create a token with repo and workflow permissions' mod='rl_aimodulemaker'}
                            </p>
                        </div>
                        <div class="col-lg-3">
                            <button type="button" class="btn btn-default test-api" data-api="github">
                                <i class="icon icon-check"></i> {l s='Test Connection' mod='rl_aimodulemaker'}
                            </button>
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="control-label col-lg-3">
                            {l s='GitHub Username' mod='rl_aimodulemaker'}
                        </label>
                        <div class="col-lg-6">
                            <input type="text" 
                                   name="RLAIMODULEMAKER_GITHUB_USERNAME" 
                                   value="{$currentSettings.github.username|escape:'html':'UTF-8'}" 
                                   class="form-control">
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="control-label col-lg-3">
                            {l s='GitHub Organization' mod='rl_aimodulemaker'}
                        </label>
                        <div class="col-lg-6">
                            <input type="text" 
                                   name="RLAIMODULEMAKER_GITHUB_ORG" 
                                   value="{$currentSettings.github.organization|escape:'html':'UTF-8'}" 
                                   class="form-control">
                            <p class="help-block">
                                {l s='Optional: Leave empty to use personal account' mod='rl_aimodulemaker'}
                            </p>
                        </div>
                    </div>
                </div>
            </div>

            {* General Settings Tab *}
            <div class="panel">
                <div class="panel-heading">
                    <i class="icon icon-wrench"></i> {l s='General Settings' mod='rl_aimodulemaker'}
                </div>
                <div class="panel-body">
                    {* Default Author *}
                    <div class="form-group">
                        <label class="control-label col-lg-3">
                            {l s='Default Author' mod='rl_aimodulemaker'}
                        </label>
                        <div class="col-lg-6">
                            <input type="text" 
                                   name="RLAIMODULEMAKER_DEFAULT_AUTHOR" 
                                   value="{$currentSettings.general.default_author|escape:'html':'UTF-8'}" 
                                   class="form-control">
                        </div>
                    </div>

                    {* Auto Commit *}
                    <div class="form-group">
                        <label class="control-label col-lg-3">
                            {l s='Auto Commit Changes' mod='rl_aimodulemaker'}
                        </label>
                        <div class="col-lg-6">
                            <div class="checkbox">
                                <label>
                                    <input type="checkbox" 
                                           name="RLAIMODULEMAKER_AUTO_COMMIT" 
                                           value="1" 
                                           {if $currentSettings.general.auto_commit}checked{/if}>
                                    {l s='Automatically commit changes to GitHub' mod='rl_aimodulemaker'}
                                </label>
                            </div>
                        </div>
                    </div>

                    {* Default AI Model *}
                    <div class="form-group">
                        <label class="control-label col-lg-3">
                            {l s='Default AI Model' mod='rl_aimodulemaker'}
                        </label>
                        <div class="col-lg-6">
                            <select name="RLAIMODULEMAKER_DEFAULT_AI" class="form-control">
                                <option value="openai" {if $currentSettings.general.default_ai == 'openai'}selected{/if}>
                                    OpenAI GPT
                                </option>
                                <option value="claude" {if $currentSettings.general.default_ai == 'claude'}selected{/if}>
                                    Anthropic Claude
                                </option>
                            </select>
                        </div>
                    </div>
                </div>
            </div>

            {* Submit Button *}
            <div class="panel-footer">
                <button type="submit" class="btn btn-default pull-right" name="submitRlAiSettings">
                    <i class="process-icon-save"></i> {l s='Save Settings' mod='rl_aimodulemaker'}
                </button>
            </div>
        </form>

        {* API Test Results Modal *}
        <div class="modal fade" id="api-test-modal">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                        <h4 class="modal-title">{l s='API Connection Test' mod='rl_aimodulemaker'}</h4>
                    </div>
                    <div class="modal-body">
                        <div class="api-test-result"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

{* JavaScript för inställningar *}
<script type="text/javascript">
    $(document).ready(function() {
        // API-test hantering
        $('.test-api').click(function() {
            var api = $(this).data('api');
            var button = $(this);
            button.prop('disabled', true);
            
            $.ajax({
                url: '{$link->getAdminLink('AdminRlAiSettings')|addslashes}',
                type: 'POST',
                data: {
                    ajax: 1,
                    action: 'testApi',
                    api_type: api
                },
                success: function(response) {
                    var result = JSON.parse(response);
                    showApiTestResult(api, result.success, result.message);
                },
                error: function() {
                    showApiTestResult(api, false, 'Connection failed');
                },
                complete: function() {
                    button.prop('disabled', false);
                }
            });
        });

        function showApiTestResult(api, success, message) {
            var html = '<div class="alert alert-' + (success ? 'success' : 'danger') + '">';
            html += '<h4>' + api.toUpperCase() + ' API Test</h4>';
            html += '<p>' + message + '</p>';
            html += '</div>';

            $('.api-test-result').html(html);
            $('#api-test-modal').modal('show');
        }
    });
</script>

================
File: views/templates/components/ai_chat.tpl
================
<div class="ai-chat-component">
    <div class="chat-container panel">
        <div class="panel-heading">
            <div class="row">
                <div class="col-md-6">
                    <i class="icon icon-comments"></i> {l s='AI Assistant' mod='rl_aimodulemaker'}
                </div>
                <div class="col-md-6 text-right">
                    <select class="ai-model-selector form-control-inline">
                        {foreach $ai_models as $model}
                            <option value="{$model.id|escape:'html':'UTF-8'}">{$model.name|escape:'html':'UTF-8'}</option>
                        {/foreach}
                    </select>
                </div>
            </div>
        </div>
        
        <div class="panel-body">
            <div class="chat-messages" style="height: 300px; overflow-y: auto; margin-bottom: 15px;">
                {* Välkomstmeddelande *}
                <div class="message assistant">
                    <div class="message-content">
                        <div class="message-header">
                            <i class="icon icon-robot"></i> AI Assistant
                        </div>
                        <div class="message-text">
                            {l s='Hello! I\'m your AI assistant. I can help you with:' mod='rl_aimodulemaker'}
                            <ul>
                                <li>{l s='Creating new module features' mod='rl_aimodulemaker'}</li>
                                <li>{l s='Understanding existing code' mod='rl_aimodulemaker'}</li>
                                <li>{l s='Debugging issues' mod='rl_aimodulemaker'}</li>
                                <li>{l s='Suggesting improvements' mod='rl_aimodulemaker'}</li>
                            </ul>
                            {l s='How can I assist you today?' mod='rl_aimodulemaker'}
                        </div>
                    </div>
                </div>
            </div>

            <div class="chat-input">
                <div class="input-group">
                    <input type="text" 
                           class="form-control message-input" 
                           placeholder="{l s='Type your message here...' mod='rl_aimodulemaker'}"
                           data-context="{$chat_context|escape:'html':'UTF-8'}">
                    <span class="input-group-btn">
                        <button class="btn btn-primary send-message" type="button">
                            <i class="icon icon-paper-plane"></i> {l s='Send' mod='rl_aimodulemaker'}
                        </button>
                    </span>
                </div>
                <div class="chat-actions margin-top-1">
                    <button class="btn btn-default btn-xs show-context" type="button">
                        <i class="icon icon-code"></i> {l s='Show Context' mod='rl_aimodulemaker'}
                    </button>
                    <button class="btn btn-default btn-xs clear-chat" type="button">
                        <i class="icon icon-trash"></i> {l s='Clear Chat' mod='rl_aimodulemaker'}
                    </button>
                    <button class="btn btn-default btn-xs export-chat" type="button">
                        <i class="icon icon-download"></i> {l s='Export Chat' mod='rl_aimodulemaker'}
                    </button>
                </div>
            </div>
        </div>
    </div>

    {* Context Modal *}
    <div class="modal fade" id="context-modal">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">{l s='Current Context' mod='rl_aimodulemaker'}</h4>
                </div>
                <div class="modal-body">
                    <pre class="context-content"></pre>
                </div>
            </div>
        </div>
    </div>
</div>

{* Styles för chatkomponenten *}
<style>
    .ai-chat-component .message {
        margin-bottom: 15px;
        clear: both;
    }

    .ai-chat-component .message.user {
        float: right;
        max-width: 80%;
    }

    .ai-chat-component .message.assistant {
        float: left;
        max-width: 80%;
    }

    .ai-chat-component .message-content {
        padding: 10px;
        border-radius: 10px;
        background: #f8f9fa;
    }

    .ai-chat-component .message.user .message-content {
        background: #e3f2fd;
    }

    .ai-chat-component .message-header {
        font-size: 12px;
        color: #666;
        margin-bottom: 5px;
    }

    .ai-chat-component .message-text {
        white-space: pre-wrap;
    }

    .ai-chat-component .message-text code {
        display: block;
        background: #f1f1f1;
        padding: 10px;
        margin: 5px 0;
        border-radius: 4px;
    }

    .ai-chat-component .chat-actions {
        font-size: 12px;
    }

    .ai-chat-component .typing-indicator {
        padding: 10px;
        display: none;
    }

    .ai-chat-component .typing-indicator span {
        display: inline-block;
        width: 8px;
        height: 8px;
        background: #90949c;
        border-radius: 50%;
        margin: 0 2px;
        animation: typing 1s infinite;
    }

    @keyframes typing {
        0%, 100% { transform: translateY(0); }
        50% { transform: translateY(-5px); }
    }
</style>

{* JavaScript för chatkomponenten *}
<script type="text/javascript">
    class AiChatComponent {
        constructor(element, config) {
            this.element = element;
            this.config = config;
            this.messages = [];
            this.isProcessing = false;
            
            this.initializeElements();
            this.bindEvents();
        }

        initializeElements() {
            this.messagesContainer = this.element.find('.chat-messages');
            this.messageInput = this.element.find('.message-input');
            this.sendButton = this.element.find('.send-button');
            this.modelSelector = this.element.find('.ai-model-selector');
            this.addTypingIndicator();
        }

        bindEvents() {
            this.messageInput.on('keypress', (e) => {
                if (e.which === 13 && !e.shiftKey) {
                    e.preventDefault();
                    this.sendMessage();
                }
            });

            this.sendButton.on('click', () => this.sendMessage());
            this.element.find('.clear-chat').on('click', () => this.clearChat());
            this.element.find('.export-chat').on('click', () => this.exportChat());
            this.element.find('.show-context').on('click', () => this.showContext());
        }

        async sendMessage() {
            if (this.isProcessing || !this.messageInput.val().trim()) return;

            const message = this.messageInput.val();
            this.messageInput.val('');
            this.addMessage(message, 'user');
            this.isProcessing = true;
            this.showTypingIndicator();

            try {
                const response = await this.callAiApi(message);
                this.addMessage(response, 'assistant');
            } catch (error) {
                this.addMessage('Error: ' + error.message, 'assistant error');
            } finally {
                this.isProcessing = false;
                this.hideTypingIndicator();
            }
        }

        addMessage(text, type) {
            const messageHtml = this.createMessageHtml(text, type);
            this.messagesContainer.append(messageHtml);
            this.scrollToBottom();
            this.messages.push({ text, type });
        }

        createMessageHtml(text, type) {
            return `
                <div class="message ${type}">
                    <div class="message-content">
                        <div class="message-header">
                            <i class="icon icon-${type === 'user' ? 'user' : 'robot'}"></i>
                            ${type === 'user' ? 'You' : 'AI Assistant'}
                        </div>
                        <div class="message-text">${this.formatMessage(text)}</div>
                    </div>
                </div>
            `;
        }

        formatMessage(text) {
            // Konvertera kodblock
            text = text.replace(/```(\w+)?\n([\s\S]+?)```/g, 
                              (_, lang, code) => `<code class="language-${lang || 'plaintext'}">${this.escapeHtml(code)}</code>`);
            
            // Konvertera radbrytningar
            text = text.replace(/\n/g, '<br>');
            
            return text;
        }

        escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }

        scrollToBottom() {
            this.messagesContainer.scrollTop(this.messagesContainer[0].scrollHeight);
        }

        addTypingIndicator() {
            this.typingIndicator = $(`
                <div class="typing-indicator">
                    <span></span>
                    <span></span>
                    <span></span>
                </div>
            `);
            this.messagesContainer.append(this.typingIndicator);
        }

        showTypingIndicator() {
            this.typingIndicator.show();
            this.scrollToBottom();
        }

        hideTypingIndicator() {
            this.typingIndicator.hide();
        }

        async callAiApi(message) {
            const response = await $.ajax({
                url: this.config.ajaxUrl,
                method: 'POST',
                data: {
                    action: 'aiChat',
                    message: message,
                    model: this.modelSelector.val(),
                    context: this.messageInput.data('context')
                }
            });

            if (!response.success) {
                throw new Error(response.error);
            }

            return response.response;
        }

        clearChat() {
            if (confirm(this.config.translations.confirmClear)) {
                this.messagesContainer.html('');
                this.messages = [];
                this.addTypingIndicator();
            }
        }

        exportChat() {
            const chatLog = this.messages.map(m => `[${m.type}] ${m.text}`).join('\n\n');
            const blob = new Blob([chatLog], { type: 'text/plain' });
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'chat-export.txt';
            a.click();
            window.URL.revokeObjectURL(url);
        }

        showContext() {
            const context = this.messageInput.data('context');
            $('#context-modal .context-content').text(JSON.stringify(context, null, 2));
            $('#context-modal').modal('show');
        }
    }

    // Initialisera komponenten
    $(document).ready(function() {
        $('.ai-chat-component').each(function() {
            new AiChatComponent($(this), {
                ajaxUrl: '{$link->getAdminLink('AdminRlAiModuleMaker')|addslashes}',
                translations: {
                    confirmClear: '{l s='Are you sure you want to clear the chat history?' mod='rl_aimodulemaker' js=1}'
                }
            });
        });
    });
</script>

================
File: views/templates/components/file_explorer.tpl
================
<div class="file-explorer-component">
    <div class="panel">
        <div class="panel-heading">
            <div class="row">
                <div class="col-md-6">
                    <i class="icon icon-folder-open"></i> {l s='Module Files' mod='rl_aimodulemaker'}
                </div>
                <div class="col-md-6 text-right">
                    <div class="btn-group">
                        <button class="btn btn-default btn-xs refresh-files">
                            <i class="icon icon-refresh"></i> {l s='Refresh' mod='rl_aimodulemaker'}
                        </button>
                        <button class="btn btn-default btn-xs create-file">
                            <i class="icon icon-plus"></i> {l s='New File' mod='rl_aimodulemaker'}
                        </button>
                        <button class="btn btn-default btn-xs create-folder">
                            <i class="icon icon-folder"></i> {l s='New Folder' mod='rl_aimodulemaker'}
                        </button>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="panel-body">
            <div class="file-tree" style="height: 400px; overflow-y: auto;">
                {* Filträdet laddas dynamiskt via JavaScript *}
            </div>
        </div>
    </div>

    {* Modal för att skapa ny fil/mapp *}
    <div class="modal fade" id="create-item-modal">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">{l s='Create New Item' mod='rl_aimodulemaker'}</h4>
                </div>
                <div class="modal-body">
                    <form id="create-item-form">
                        <div class="form-group">
                            <label>{l s='Name' mod='rl_aimodulemaker'}</label>
                            <input type="text" class="form-control" name="item_name" required>
                        </div>
                        <div class="form-group file-content-group" style="display: none;">
                            <label>{l s='Initial Content' mod='rl_aimodulemaker'}</label>
                            <textarea class="form-control" name="item_content" rows="10"></textarea>
                        </div>
                        <input type="hidden" name="item_type">
                        <input type="hidden" name="current_path">
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">{l s='Cancel' mod='rl_aimodulemaker'}</button>
                    <button type="button" class="btn btn-primary" id="create-item-submit">{l s='Create' mod='rl_aimodulemaker'}</button>
                </div>
            </div>
        </div>
    </div>

    {* Modal för att visa/redigera fil *}
    <div class="modal fade" id="edit-file-modal">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title file-name"></h4>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <div id="code-editor" style="height: 400px;"></div>
                    </div>
                </div>
                <div class="modal-footer">
                    <div class="pull-left">
                        <button type="button" class="btn btn-default ask-ai">
                            <i class="icon icon-comments"></i> {l s='Ask AI' mod='rl_aimodulemaker'}
                        </button>
                    </div>
                    <button type="button" class="btn btn-default" data-dismiss="modal">{l s='Cancel' mod='rl_aimodulemaker'}</button>
                    <button type="button" class="btn btn-primary save-file">{l s='Save' mod='rl_aimodulemaker'}</button>
                </div>
            </div>
        </div>
    </div>
</div>

{* Styles för filutforskaren *}
<style>
    .file-explorer-component .file-tree {
        font-family: monospace;
    }

    .file-explorer-component .file-item {
        padding: 5px;
        cursor: pointer;
        border-radius: 3px;
        margin: 2px 0;
    }

    .file-explorer-component .file-item:hover {
        background: #f8f9fa;
    }

    .file-explorer-component .file-item.selected {
        background: #e3f2fd;
    }

    .file-explorer-component .folder-content {
        margin-left: 20px;
    }

    .file-explorer-component .icon {
        margin-right: 5px;
    }
</style>

{* JavaScript för filutforskaren *}
<script type="text/javascript">
    class FileExplorerComponent {
        constructor(element, config) {
            this.element = element;
            this.config = config;
            this.currentPath = '';
            this.editor = null;
            
            this.initializeElements();
            this.bindEvents();
            this.loadFileTree();
            this.initializeCodeEditor();
        }

        initializeElements() {
            this.fileTree = this.element.find('.file-tree');
            this.createFileBtn = this.element.find('.create-file');
            this.createFolderBtn = this.element.find('.create-folder');
            this.refreshBtn = this.element.find('.refresh-files');
        }

        bindEvents() {
            this.createFileBtn.on('click', () => this.showCreateModal('file'));
            this.createFolderBtn.on('click', () => this.showCreateModal('folder'));
            this.refreshBtn.on('click', () => this.loadFileTree());
            
            $('#create-item-submit').on('click', () => this.createItem());
            $('.save-file').on('click', () => this.saveFile());
            $('.ask-ai').on('click', () => this.askAi());

            // Delegera händelser för dynamiskt skapade element
            this.fileTree.on('click', '.file-item', (e) => {
                const item = $(e.currentTarget);
                if (item.data('type') === 'file') {
                    this.openFile(item.data('path'));
                } else {
                    this.toggleFolder(item);
                }
            });
        }

        async loadFileTree() {
            try {
                const response = await $.ajax({
                    url: this.config.ajaxUrl,
                    method: 'POST',
                    data: {
                        action: 'getFileTree',
                        module_id: this.config.moduleId
                    }
                });

                if (response.success) {
                    this.fileTree.html(this.buildFileTreeHtml(response.files));
                } else {
                    this.showError(response.error);
                }
            } catch (error) {
                this.showError(error.message);
            }
        }

        buildFileTreeHtml(files, level = 0) {
            let html = '';
            for (const file of files) {
                const indent = '&nbsp;'.repeat(level * 4);
                const icon = file.type === 'file' ? 'file-text' : 'folder';
                
                html += `
                    <div class="file-item" data-type="${file.type}" data-path="${file.path}">
                        ${indent}<i class="icon icon-${icon}"></i>${file.name}
                    </div>
                `;

                if (file.type === 'folder' && file.children) {
                    html += `<div class="folder-content" style="display: none;">`;
                    html += this.buildFileTreeHtml(file.children, level + 1);
                    html += `</div>`;
                }
            }
            return html;
        }

        initializeCodeEditor() {
            // Initialisera CodeMirror eller annan kodeditor
            this.editor = CodeMirror(document.getElementById('code-editor'), {
                mode: 'php',
                theme: 'default',
                lineNumbers: true,
                autoCloseBrackets: true,
                matchBrackets: true,
                indentUnit: 4,
                tabSize: 4,
                lineWrapping: true,
                extraKeys: {
                    "Ctrl-Space": "autocomplete"
                }
            });
        }

        async openFile(path) {
            try {
                const response = await $.ajax({
                    url: this.config.ajaxUrl,
                    method: 'POST',
                    data: {
                        action: 'getFileContent',
                        path: path,
                        module_id: this.config.moduleId
                    }
                });

                if (response.success) {
                    $('#edit-file-modal .file-name').text(path);
                    this.editor.setValue(response.content);
                    this.editor.setOption('mode', this.getEditorMode(path));
                    $('#edit-file-modal').modal('show');
                    this.currentPath = path;
                } else {
                    this.showError(response.error);
                }
            } catch (error) {
                this.showError(error.message);
            }
        }

        getEditorMode(path) {
            const ext = path.split('.').pop().toLowerCase();
            const modes = {
                'php': 'php',
                'js': 'javascript',
                'css': 'css',
                'tpl': 'smarty',
                'html': 'html',
                'xml': 'xml',
                'json': 'javascript',
                'md': 'markdown'
            };
            return modes[ext] || 'text';
        }

        async saveFile() {
            try {
                const response = await $.ajax({
                    url: this.config.ajaxUrl,
                    method: 'POST',
                    data: {
                        action: 'saveFile',
                        path: this.currentPath,
                        content: this.editor.getValue(),
                        module_id: this.config.moduleId
                    }
                });

                if (response.success) {
                    showSuccessMessage(this.config.translations.fileSaved);
                    $('#edit-file-modal').modal('hide');
                } else {
                    this.showError(response.error);
                }
            } catch (error) {
                this.showError(error.message);
            }
        }

        async createItem() {
            const form = $('#create-item-form');
            const data = {
                action: 'createItem',
                type: form.find('[name="item_type"]').val(),
                name: form.find('[name="item_name"]').val(),
                content: form.find('[name="item_content"]').val(),
                path: form.find('[name="current_path"]').val(),
                module_id: this.config.moduleId
            };

            try {
                const response = await $.ajax({
                    url: this.config.ajaxUrl,
                    method: 'POST',
                    data: data
                });

                if (response.success) {
                    $('#create-item-modal').modal('hide');
                    this.loadFileTree();
                    showSuccessMessage(this.config.translations.itemCreated);
                } else {
                    this.showError(response.error);
                }
            } catch (error) {
                this.showError(error.message);
            }
        }

        toggleFolder(folderItem) {
            const content = folderItem.next('.folder-content');
            content.slideToggle();
            const icon = folderItem.find('.icon');
            icon.toggleClass('icon-folder icon-folder-open');
        }

        showCreateModal(type) {
            const form = $('#create-item-form');
            form.find('[name="item_type"]').val(type);
            form.find('[name="current_path"]').val(this.currentPath);
            form.find('.file-content-group').toggle(type === 'file');
            $('#create-item-modal .modal-title').text(
                type === 'file' ? this.config.translations.newFile : this.config.translations.newFolder
            );
            $('#create-item-modal').modal('show');
        }

        askAi() {
            const selectedCode = this.editor.getSelection() || this.editor.getValue();
            // Trigga AI chat-komponenten med den valda koden
            $(document).trigger('openAiChat', {
                context: {
                    code: selectedCode,
                    file: this.currentPath
                }
            });
        }

        showError(message) {
            showErrorMessage(message);
        }
    }

    // Initialisera komponenten
    $(document).ready(function() {
        $('.file-explorer-component').each(function() {
            new FileExplorerComponent($(this), {
                ajaxUrl: '{$link->getAdminLink('AdminRlAiModuleMaker')|addslashes}',
                moduleId: '{$module_id|intval}',
                translations: {
                    fileSaved: '{l s='File saved successfully' mod='rl_aimodulemaker' js=1}',
                    itemCreated: '{l s='Item created successfully' mod='rl_aimodulemaker' js=1}',
                    newFile: '{l s='Create New File' mod='rl_aimodulemaker' js=1}',
                    newFolder: '{l s='Create New Folder' mod='rl_aimodulemaker' js=1}'
                }
            });
        });
    });
</script>
